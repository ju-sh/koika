-*- mode: compilation; default-directory: "~/documents/mit/plv/koika/etc/" -*-
Comint started at Wed Aug 19 17:40:19

./bench.sh 
+ bench_rv rv32i rvbench_qsort cuttlesim verilator
+ for compiler in "clang++" "g++-9" "g++-10"
+ for simulator in ${@:3}
+ bench_rv_1 clang++ cuttlesim rv32i rvbench_qsort
+ compiler=clang++
+ simulator=cuttlesim
+ design=rv32i
+ test=rvbench_qsort
++ realpath ../examples/rv/_objects/rv32i.v/
+ base=/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v
++ realpath ../examples/rv/tests/_build/rv32i/integ/
+ tests=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ
+ b='bench clang++ cuttlesim rv32i-rvbench_qsort'
+ make -C /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v clean
make: Entering directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v'
rm -rf obj_dir.opt
rm -rf obj_dir.trace
rm -f rvcore.verilator.vcd
rm -f rvcore.cuttlesim.opt
rm -f rvcore.cuttlesim.debug
rm -f rvcore.cuttlesim.perf
rm -f rvcore.cuttlesim.cov
rm -f rvcore.cuttlesim.s
rm -f rvcore.cuttlesim.out
rm -f rvcore.cuttlesim.vcd
rm -f rvcore.cuttlesim.perf.data
rm -f rvcore.cuttlesim.callgrind
rm -fr rvcore.cuttlesim.rr
rm -f *.gcov
rm -f top_ice40_usb.json
rm -f top_ice40_usb.json.log
rm -f top_ice40_usb.asc
rm -f top_ice40_usb.bin
rm -f top_ice40_usb.rpt
rm -f top_ice40_usb.json.v
make: Leaving directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v'
+ case $simulator in
+ make CXX=clang++ -C /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v rvcore.cuttlesim.opt
make: Entering directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v'
clang++ --std=c++17  -Wall -Wextra '-DSIM_VCD_SCOPES={"TOP", "top", "rv_core",}' -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector rvcore.cuttlesim.cpp -o "rvcore.cuttlesim.opt"
In file included from rvcore.cuttlesim.cpp:5:
In file included from ./rv32.hpp:10:
./cuttlesim.hpp:87:9: warning: Bignum truncation is broken in Boost < 1.68; if you run into issues, try
      upgrading. [-W#pragma-messages]
#pragma message("Bignum truncation is broken in Boost < 1.68; if you run into issues, try upgrading.")
        ^
1 warning generated.
make: Leaving directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v'
+ bench clang++ cuttlesim rv32i-rvbench_qsort /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_qsort.rv32 -1
+ compiler=clang++
+ simulator=cuttlesim
+ input=rv32i-rvbench_qsort
+ export 'TIMEFORMAT=>> clang++	cuttlesim	rv32i-rvbench_qsort	real: %3R	user: %3U	sys: %3S'
+ TIMEFORMAT='>> clang++	cuttlesim	rv32i-rvbench_qsort	real: %3R	user: %3U	sys: %3S'
+ echo '<< cuttlesim rv32i-rvbench_qsort'
<< cuttlesim rv32i-rvbench_qsort
++ seq 1 10
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_qsort.rv32 -1
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000000000011110001100 (0x78c, 1932)
rf_x12_a2 = 32'b00000000000000000000101101110100 (0xb74, 2932)
rf_x13_a3 = 32'b00000000000000000000101010110100 (0xab4, 2740)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b0 (0x0, 0)
mulState_operand2 = 32'b0 (0x0, 0)
mulState_result = 64'b0 (0x0, 0)
mulState_n_step = 5'b0 (0x0, 0)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000000000000010100001110010000 (0x14390, 82832)
instr_count = 32'b00000000000000001000101001001010 (0x8a4a, 35402)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b1 (0x1, 1)
>> clang++	cuttlesim	rv32i-rvbench_qsort	real: 0.015	user: 0.015	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_qsort.rv32 -1
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000000000011110001100 (0x78c, 1932)
rf_x12_a2 = 32'b00000000000000000000101101110100 (0xb74, 2932)
rf_x13_a3 = 32'b00000000000000000000101010110100 (0xab4, 2740)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b0 (0x0, 0)
mulState_operand2 = 32'b0 (0x0, 0)
mulState_result = 64'b0 (0x0, 0)
mulState_n_step = 5'b0 (0x0, 0)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000000000000010100001110010000 (0x14390, 82832)
instr_count = 32'b00000000000000001000101001001010 (0x8a4a, 35402)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b1 (0x1, 1)
>> clang++	cuttlesim	rv32i-rvbench_qsort	real: 0.015	user: 0.011	sys: 0.004
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_qsort.rv32 -1
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000000000011110001100 (0x78c, 1932)
rf_x12_a2 = 32'b00000000000000000000101101110100 (0xb74, 2932)
rf_x13_a3 = 32'b00000000000000000000101010110100 (0xab4, 2740)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b0 (0x0, 0)
mulState_operand2 = 32'b0 (0x0, 0)
mulState_result = 64'b0 (0x0, 0)
mulState_n_step = 5'b0 (0x0, 0)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000000000000010100001110010000 (0x14390, 82832)
instr_count = 32'b00000000000000001000101001001010 (0x8a4a, 35402)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b1 (0x1, 1)
>> clang++	cuttlesim	rv32i-rvbench_qsort	real: 0.014	user: 0.014	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_qsort.rv32 -1
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000000000011110001100 (0x78c, 1932)
rf_x12_a2 = 32'b00000000000000000000101101110100 (0xb74, 2932)
rf_x13_a3 = 32'b00000000000000000000101010110100 (0xab4, 2740)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b0 (0x0, 0)
mulState_operand2 = 32'b0 (0x0, 0)
mulState_result = 64'b0 (0x0, 0)
mulState_n_step = 5'b0 (0x0, 0)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000000000000010100001110010000 (0x14390, 82832)
instr_count = 32'b00000000000000001000101001001010 (0x8a4a, 35402)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b1 (0x1, 1)
>> clang++	cuttlesim	rv32i-rvbench_qsort	real: 0.014	user: 0.013	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_qsort.rv32 -1
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000000000011110001100 (0x78c, 1932)
rf_x12_a2 = 32'b00000000000000000000101101110100 (0xb74, 2932)
rf_x13_a3 = 32'b00000000000000000000101010110100 (0xab4, 2740)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b0 (0x0, 0)
mulState_operand2 = 32'b0 (0x0, 0)
mulState_result = 64'b0 (0x0, 0)
mulState_n_step = 5'b0 (0x0, 0)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000000000000010100001110010000 (0x14390, 82832)
instr_count = 32'b00000000000000001000101001001010 (0x8a4a, 35402)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b1 (0x1, 1)
>> clang++	cuttlesim	rv32i-rvbench_qsort	real: 0.091	user: 0.015	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_qsort.rv32 -1
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000000000011110001100 (0x78c, 1932)
rf_x12_a2 = 32'b00000000000000000000101101110100 (0xb74, 2932)
rf_x13_a3 = 32'b00000000000000000000101010110100 (0xab4, 2740)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b0 (0x0, 0)
mulState_operand2 = 32'b0 (0x0, 0)
mulState_result = 64'b0 (0x0, 0)
mulState_n_step = 5'b0 (0x0, 0)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000000000000010100001110010000 (0x14390, 82832)
instr_count = 32'b00000000000000001000101001001010 (0x8a4a, 35402)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b1 (0x1, 1)
>> clang++	cuttlesim	rv32i-rvbench_qsort	real: 0.022	user: 0.018	sys: 0.004
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_qsort.rv32 -1
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000000000011110001100 (0x78c, 1932)
rf_x12_a2 = 32'b00000000000000000000101101110100 (0xb74, 2932)
rf_x13_a3 = 32'b00000000000000000000101010110100 (0xab4, 2740)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b0 (0x0, 0)
mulState_operand2 = 32'b0 (0x0, 0)
mulState_result = 64'b0 (0x0, 0)
mulState_n_step = 5'b0 (0x0, 0)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000000000000010100001110010000 (0x14390, 82832)
instr_count = 32'b00000000000000001000101001001010 (0x8a4a, 35402)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b1 (0x1, 1)
>> clang++	cuttlesim	rv32i-rvbench_qsort	real: 0.014	user: 0.014	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_qsort.rv32 -1
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000000000011110001100 (0x78c, 1932)
rf_x12_a2 = 32'b00000000000000000000101101110100 (0xb74, 2932)
rf_x13_a3 = 32'b00000000000000000000101010110100 (0xab4, 2740)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b0 (0x0, 0)
mulState_operand2 = 32'b0 (0x0, 0)
mulState_result = 64'b0 (0x0, 0)
mulState_n_step = 5'b0 (0x0, 0)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000000000000010100001110010000 (0x14390, 82832)
instr_count = 32'b00000000000000001000101001001010 (0x8a4a, 35402)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b1 (0x1, 1)
>> clang++	cuttlesim	rv32i-rvbench_qsort	real: 0.015	user: 0.014	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_qsort.rv32 -1
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000000000011110001100 (0x78c, 1932)
rf_x12_a2 = 32'b00000000000000000000101101110100 (0xb74, 2932)
rf_x13_a3 = 32'b00000000000000000000101010110100 (0xab4, 2740)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b0 (0x0, 0)
mulState_operand2 = 32'b0 (0x0, 0)
mulState_result = 64'b0 (0x0, 0)
mulState_n_step = 5'b0 (0x0, 0)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000000000000010100001110010000 (0x14390, 82832)
instr_count = 32'b00000000000000001000101001001010 (0x8a4a, 35402)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b1 (0x1, 1)
>> clang++	cuttlesim	rv32i-rvbench_qsort	real: 0.016	user: 0.016	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_qsort.rv32 -1
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000000000011110001100 (0x78c, 1932)
rf_x12_a2 = 32'b00000000000000000000101101110100 (0xb74, 2932)
rf_x13_a3 = 32'b00000000000000000000101010110100 (0xab4, 2740)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b0 (0x0, 0)
mulState_operand2 = 32'b0 (0x0, 0)
mulState_result = 64'b0 (0x0, 0)
mulState_n_step = 5'b0 (0x0, 0)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000000000000010100001110010000 (0x14390, 82832)
instr_count = 32'b00000000000000001000101001001010 (0x8a4a, 35402)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b1 (0x1, 1)
>> clang++	cuttlesim	rv32i-rvbench_qsort	real: 0.015	user: 0.014	sys: 0.000
+ for simulator in ${@:3}
+ bench_rv_1 clang++ verilator rv32i rvbench_qsort
+ compiler=clang++
+ simulator=verilator
+ design=rv32i
+ test=rvbench_qsort
++ realpath ../examples/rv/_objects/rv32i.v/
+ base=/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v
++ realpath ../examples/rv/tests/_build/rv32i/integ/
+ tests=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ
+ b='bench clang++ verilator rv32i-rvbench_qsort'
+ make -C /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v clean
make: Entering directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v'
rm -rf obj_dir.opt
rm -rf obj_dir.trace
rm -f rvcore.verilator.vcd
rm -f rvcore.cuttlesim.opt
rm -f rvcore.cuttlesim.debug
rm -f rvcore.cuttlesim.perf
rm -f rvcore.cuttlesim.cov
rm -f rvcore.cuttlesim.s
rm -f rvcore.cuttlesim.out
rm -f rvcore.cuttlesim.vcd
rm -f rvcore.cuttlesim.perf.data
rm -f rvcore.cuttlesim.callgrind
rm -fr rvcore.cuttlesim.rr
rm -f *.gcov
rm -f top_ice40_usb.json
rm -f top_ice40_usb.json.log
rm -f top_ice40_usb.asc
rm -f top_ice40_usb.bin
rm -f top_ice40_usb.rpt
rm -f top_ice40_usb.json.v
make: Leaving directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v'
+ case $simulator in
+ make CXX=clang++ -C /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v obj_dir.opt/Vtop
make: Entering directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v'
verilator +define+MEM_ADDRESS_WIDTH=14 +define+BRAM_RUNTIME_INIT+SIMULATION -CFLAGS -DVL_USER_FINISH -Wno-fatal -CFLAGS "-I /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v" --prefix Vtop --cc --exe --compiler clang -CFLAGS -fPIC --Mdir obj_dir.opt --x-assign fast --x-initial fast --noassert -O3 -CFLAGS '-O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector ' -LDFLAGS '-O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector ' rvcore.verilator.cpp top.v
make -C obj_dir.opt -f Vtop.mk Vtop
make[1]: Entering directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt'
clang++  -I.  -MMD -I/usr/local/share/verilator/include -I/usr/local/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=0 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow     -DVL_USER_FINISH -I /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v -fPIC -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector   -c -o rvcore.o ../rvcore.verilator.cpp
warning: unknown warning option '-Wno-unused-but-set-variable'; did you mean '-Wno-unused-const-variable'? [-Wunknown-warning-option]
1 warning generated.
clang++  -I.  -MMD -I/usr/local/share/verilator/include -I/usr/local/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=0 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow     -DVL_USER_FINISH -I /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v -fPIC -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector   -c -o verilated.o /usr/local/share/verilator/include/verilated.cpp
warning: unknown warning option '-Wno-unused-but-set-variable'; did you mean '-Wno-unused-const-variable'? [-Wunknown-warning-option]
1 warning generated.
clang++  -I.  -MMD -I/usr/local/share/verilator/include -I/usr/local/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=0 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow     -DVL_USER_FINISH -I /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v -fPIC -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector   -c -o verilated_dpi.o /usr/local/share/verilator/include/verilated_dpi.cpp
warning: unknown warning option '-Wno-unused-but-set-variable'; did you mean '-Wno-unused-const-variable'? [-Wunknown-warning-option]
1 warning generated.
/usr/bin/perl /usr/local/share/verilator/bin/verilator_includer -DVL_INCLUDE_OPT=include Vtop.cpp Vtop_top.cpp Vtop_rv32.cpp > Vtop__ALLcls.cpp
clang++  -I.  -MMD -I/usr/local/share/verilator/include -I/usr/local/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=0 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow     -DVL_USER_FINISH -I /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v -fPIC -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector   -c -o Vtop__ALLcls.o Vtop__ALLcls.cpp
warning: unknown warning option '-Wno-unused-but-set-variable'; did you mean '-Wno-unused-const-variable'? [-Wunknown-warning-option]
1 warning generated.
/usr/bin/perl /usr/local/share/verilator/bin/verilator_includer -DVL_INCLUDE_OPT=include Vtop__Dpi.cpp Vtop__Syms.cpp > Vtop__ALLsup.cpp
clang++  -I.  -MMD -I/usr/local/share/verilator/include -I/usr/local/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=0 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow     -DVL_USER_FINISH -I /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v -fPIC -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector   -c -o Vtop__ALLsup.o Vtop__ALLsup.cpp
warning: unknown warning option '-Wno-unused-but-set-variable'; did you mean '-Wno-unused-const-variable'? [-Wunknown-warning-option]
1 warning generated.
ar -cr Vtop__ALL.a Vtop__ALLcls.o Vtop__ALLsup.o
ranlib Vtop__ALL.a
g++    rvcore.o verilated.o verilated_dpi.o Vtop__ALL.a   -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector  -o Vtop -lm -lstdc++ 
make[1]: Leaving directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt'
make: Leaving directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v'
+ bench clang++ verilator rv32i-rvbench_qsort /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_qsort.vmh -1
+ compiler=clang++
+ simulator=verilator
+ input=rv32i-rvbench_qsort
+ export 'TIMEFORMAT=>> clang++	verilator	rv32i-rvbench_qsort	real: %3R	user: %3U	sys: %3S'
+ TIMEFORMAT='>> clang++	verilator	rv32i-rvbench_qsort	real: %3R	user: %3U	sys: %3S'
+ echo '<< verilator rv32i-rvbench_qsort'
<< verilator rv32i-rvbench_qsort
++ seq 1 10
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_qsort.vmh -1
  PASS
>> clang++	verilator	rv32i-rvbench_qsort	real: 0.032	user: 0.032	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_qsort.vmh -1
  PASS
>> clang++	verilator	rv32i-rvbench_qsort	real: 0.033	user: 0.033	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_qsort.vmh -1
  PASS
>> clang++	verilator	rv32i-rvbench_qsort	real: 0.032	user: 0.032	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_qsort.vmh -1
  PASS
>> clang++	verilator	rv32i-rvbench_qsort	real: 0.032	user: 0.032	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_qsort.vmh -1
  PASS
>> clang++	verilator	rv32i-rvbench_qsort	real: 0.034	user: 0.030	sys: 0.004
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_qsort.vmh -1
  PASS
>> clang++	verilator	rv32i-rvbench_qsort	real: 0.034	user: 0.033	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_qsort.vmh -1
  PASS
>> clang++	verilator	rv32i-rvbench_qsort	real: 0.034	user: 0.034	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_qsort.vmh -1
  PASS
>> clang++	verilator	rv32i-rvbench_qsort	real: 0.033	user: 0.032	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_qsort.vmh -1
  PASS
>> clang++	verilator	rv32i-rvbench_qsort	real: 0.033	user: 0.033	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_qsort.vmh -1
  PASS
>> clang++	verilator	rv32i-rvbench_qsort	real: 0.033	user: 0.032	sys: 0.000
+ for compiler in "clang++" "g++-9" "g++-10"
+ for simulator in ${@:3}
+ bench_rv_1 g++-9 cuttlesim rv32i rvbench_qsort
+ compiler=g++-9
+ simulator=cuttlesim
+ design=rv32i
+ test=rvbench_qsort
++ realpath ../examples/rv/_objects/rv32i.v/
+ base=/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v
++ realpath ../examples/rv/tests/_build/rv32i/integ/
+ tests=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ
+ b='bench g++-9 cuttlesim rv32i-rvbench_qsort'
+ make -C /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v clean
make: Entering directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v'
rm -rf obj_dir.opt
rm -rf obj_dir.trace
rm -f rvcore.verilator.vcd
rm -f rvcore.cuttlesim.opt
rm -f rvcore.cuttlesim.debug
rm -f rvcore.cuttlesim.perf
rm -f rvcore.cuttlesim.cov
rm -f rvcore.cuttlesim.s
rm -f rvcore.cuttlesim.out
rm -f rvcore.cuttlesim.vcd
rm -f rvcore.cuttlesim.perf.data
rm -f rvcore.cuttlesim.callgrind
rm -fr rvcore.cuttlesim.rr
rm -f *.gcov
rm -f top_ice40_usb.json
rm -f top_ice40_usb.json.log
rm -f top_ice40_usb.asc
rm -f top_ice40_usb.bin
rm -f top_ice40_usb.rpt
rm -f top_ice40_usb.json.v
make: Leaving directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v'
+ case $simulator in
+ make CXX=g++-9 -C /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v rvcore.cuttlesim.opt
make: Entering directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v'
g++-9 --std=c++17  -Wall -Wextra '-DSIM_VCD_SCOPES={"TOP", "top", "rv_core",}' -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector rvcore.cuttlesim.cpp -o "rvcore.cuttlesim.opt"
In file included from rv32.hpp:10,
                 from rvcore.cuttlesim.cpp:5:
cuttlesim.hpp:87:102: note: #pragma message: Bignum truncation is broken in Boost < 1.68; if you run into issues, try upgrading.
   87 | #pragma message("Bignum truncation is broken in Boost < 1.68; if you run into issues, try upgrading.")
      |                                                                                                      ^
make: Leaving directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v'
+ bench g++-9 cuttlesim rv32i-rvbench_qsort /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_qsort.rv32 -1
+ compiler=g++-9
+ simulator=cuttlesim
+ input=rv32i-rvbench_qsort
+ export 'TIMEFORMAT=>> g++-9	cuttlesim	rv32i-rvbench_qsort	real: %3R	user: %3U	sys: %3S'
+ TIMEFORMAT='>> g++-9	cuttlesim	rv32i-rvbench_qsort	real: %3R	user: %3U	sys: %3S'
+ echo '<< cuttlesim rv32i-rvbench_qsort'
<< cuttlesim rv32i-rvbench_qsort
++ seq 1 10
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_qsort.rv32 -1
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000000000011110001100 (0x78c, 1932)
rf_x12_a2 = 32'b00000000000000000000101101110100 (0xb74, 2932)
rf_x13_a3 = 32'b00000000000000000000101010110100 (0xab4, 2740)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b0 (0x0, 0)
mulState_operand2 = 32'b0 (0x0, 0)
mulState_result = 64'b0 (0x0, 0)
mulState_n_step = 5'b0 (0x0, 0)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000000000000010100001110010000 (0x14390, 82832)
instr_count = 32'b00000000000000001000101001001010 (0x8a4a, 35402)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b1 (0x1, 1)
>> g++-9	cuttlesim	rv32i-rvbench_qsort	real: 0.015	user: 0.011	sys: 0.004
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_qsort.rv32 -1
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000000000011110001100 (0x78c, 1932)
rf_x12_a2 = 32'b00000000000000000000101101110100 (0xb74, 2932)
rf_x13_a3 = 32'b00000000000000000000101010110100 (0xab4, 2740)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b0 (0x0, 0)
mulState_operand2 = 32'b0 (0x0, 0)
mulState_result = 64'b0 (0x0, 0)
mulState_n_step = 5'b0 (0x0, 0)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000000000000010100001110010000 (0x14390, 82832)
instr_count = 32'b00000000000000001000101001001010 (0x8a4a, 35402)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b1 (0x1, 1)
>> g++-9	cuttlesim	rv32i-rvbench_qsort	real: 0.015	user: 0.015	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_qsort.rv32 -1
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000000000011110001100 (0x78c, 1932)
rf_x12_a2 = 32'b00000000000000000000101101110100 (0xb74, 2932)
rf_x13_a3 = 32'b00000000000000000000101010110100 (0xab4, 2740)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b0 (0x0, 0)
mulState_operand2 = 32'b0 (0x0, 0)
mulState_result = 64'b0 (0x0, 0)
mulState_n_step = 5'b0 (0x0, 0)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000000000000010100001110010000 (0x14390, 82832)
instr_count = 32'b00000000000000001000101001001010 (0x8a4a, 35402)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b1 (0x1, 1)
>> g++-9	cuttlesim	rv32i-rvbench_qsort	real: 0.017	user: 0.017	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_qsort.rv32 -1
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000000000011110001100 (0x78c, 1932)
rf_x12_a2 = 32'b00000000000000000000101101110100 (0xb74, 2932)
rf_x13_a3 = 32'b00000000000000000000101010110100 (0xab4, 2740)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b0 (0x0, 0)
mulState_operand2 = 32'b0 (0x0, 0)
mulState_result = 64'b0 (0x0, 0)
mulState_n_step = 5'b0 (0x0, 0)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000000000000010100001110010000 (0x14390, 82832)
instr_count = 32'b00000000000000001000101001001010 (0x8a4a, 35402)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b1 (0x1, 1)
>> g++-9	cuttlesim	rv32i-rvbench_qsort	real: 0.015	user: 0.015	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_qsort.rv32 -1
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000000000011110001100 (0x78c, 1932)
rf_x12_a2 = 32'b00000000000000000000101101110100 (0xb74, 2932)
rf_x13_a3 = 32'b00000000000000000000101010110100 (0xab4, 2740)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b0 (0x0, 0)
mulState_operand2 = 32'b0 (0x0, 0)
mulState_result = 64'b0 (0x0, 0)
mulState_n_step = 5'b0 (0x0, 0)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000000000000010100001110010000 (0x14390, 82832)
instr_count = 32'b00000000000000001000101001001010 (0x8a4a, 35402)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b1 (0x1, 1)
>> g++-9	cuttlesim	rv32i-rvbench_qsort	real: 0.040	user: 0.015	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_qsort.rv32 -1
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000000000011110001100 (0x78c, 1932)
rf_x12_a2 = 32'b00000000000000000000101101110100 (0xb74, 2932)
rf_x13_a3 = 32'b00000000000000000000101010110100 (0xab4, 2740)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b0 (0x0, 0)
mulState_operand2 = 32'b0 (0x0, 0)
mulState_result = 64'b0 (0x0, 0)
mulState_n_step = 5'b0 (0x0, 0)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000000000000010100001110010000 (0x14390, 82832)
instr_count = 32'b00000000000000001000101001001010 (0x8a4a, 35402)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b1 (0x1, 1)
>> g++-9	cuttlesim	rv32i-rvbench_qsort	real: 0.104	user: 0.022	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_qsort.rv32 -1
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000000000011110001100 (0x78c, 1932)
rf_x12_a2 = 32'b00000000000000000000101101110100 (0xb74, 2932)
rf_x13_a3 = 32'b00000000000000000000101010110100 (0xab4, 2740)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b0 (0x0, 0)
mulState_operand2 = 32'b0 (0x0, 0)
mulState_result = 64'b0 (0x0, 0)
mulState_n_step = 5'b0 (0x0, 0)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000000000000010100001110010000 (0x14390, 82832)
instr_count = 32'b00000000000000001000101001001010 (0x8a4a, 35402)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b1 (0x1, 1)
>> g++-9	cuttlesim	rv32i-rvbench_qsort	real: 0.047	user: 0.028	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_qsort.rv32 -1
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000000000011110001100 (0x78c, 1932)
rf_x12_a2 = 32'b00000000000000000000101101110100 (0xb74, 2932)
rf_x13_a3 = 32'b00000000000000000000101010110100 (0xab4, 2740)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b0 (0x0, 0)
mulState_operand2 = 32'b0 (0x0, 0)
mulState_result = 64'b0 (0x0, 0)
mulState_n_step = 5'b0 (0x0, 0)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000000000000010100001110010000 (0x14390, 82832)
instr_count = 32'b00000000000000001000101001001010 (0x8a4a, 35402)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b1 (0x1, 1)
>> g++-9	cuttlesim	rv32i-rvbench_qsort	real: 0.052	user: 0.015	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_qsort.rv32 -1
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000000000011110001100 (0x78c, 1932)
rf_x12_a2 = 32'b00000000000000000000101101110100 (0xb74, 2932)
rf_x13_a3 = 32'b00000000000000000000101010110100 (0xab4, 2740)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b0 (0x0, 0)
mulState_operand2 = 32'b0 (0x0, 0)
mulState_result = 64'b0 (0x0, 0)
mulState_n_step = 5'b0 (0x0, 0)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000000000000010100001110010000 (0x14390, 82832)
instr_count = 32'b00000000000000001000101001001010 (0x8a4a, 35402)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b1 (0x1, 1)
>> g++-9	cuttlesim	rv32i-rvbench_qsort	real: 0.052	user: 0.023	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_qsort.rv32 -1
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000000000011110001100 (0x78c, 1932)
rf_x12_a2 = 32'b00000000000000000000101101110100 (0xb74, 2932)
rf_x13_a3 = 32'b00000000000000000000101010110100 (0xab4, 2740)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b0 (0x0, 0)
mulState_operand2 = 32'b0 (0x0, 0)
mulState_result = 64'b0 (0x0, 0)
mulState_n_step = 5'b0 (0x0, 0)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000000000000010100001110010000 (0x14390, 82832)
instr_count = 32'b00000000000000001000101001001010 (0x8a4a, 35402)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b1 (0x1, 1)
>> g++-9	cuttlesim	rv32i-rvbench_qsort	real: 0.105	user: 0.024	sys: 0.000
+ for simulator in ${@:3}
+ bench_rv_1 g++-9 verilator rv32i rvbench_qsort
+ compiler=g++-9
+ simulator=verilator
+ design=rv32i
+ test=rvbench_qsort
++ realpath ../examples/rv/_objects/rv32i.v/
+ base=/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v
++ realpath ../examples/rv/tests/_build/rv32i/integ/
+ tests=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ
+ b='bench g++-9 verilator rv32i-rvbench_qsort'
+ make -C /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v clean
make: Entering directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v'
rm -rf obj_dir.opt
rm -rf obj_dir.trace
rm -f rvcore.verilator.vcd
rm -f rvcore.cuttlesim.opt
rm -f rvcore.cuttlesim.debug
rm -f rvcore.cuttlesim.perf
rm -f rvcore.cuttlesim.cov
rm -f rvcore.cuttlesim.s
rm -f rvcore.cuttlesim.out
rm -f rvcore.cuttlesim.vcd
rm -f rvcore.cuttlesim.perf.data
rm -f rvcore.cuttlesim.callgrind
rm -fr rvcore.cuttlesim.rr
rm -f *.gcov
rm -f top_ice40_usb.json
rm -f top_ice40_usb.json.log
rm -f top_ice40_usb.asc
rm -f top_ice40_usb.bin
rm -f top_ice40_usb.rpt
rm -f top_ice40_usb.json.v
make: Leaving directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v'
+ case $simulator in
+ make CXX=g++-9 -C /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v obj_dir.opt/Vtop
make: Entering directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v'
verilator +define+MEM_ADDRESS_WIDTH=14 +define+BRAM_RUNTIME_INIT+SIMULATION -CFLAGS -DVL_USER_FINISH -Wno-fatal -CFLAGS "-I /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v" --prefix Vtop --cc --exe  --Mdir obj_dir.opt --x-assign fast --x-initial fast --noassert -O3 -CFLAGS '-O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector ' -LDFLAGS '-O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector ' rvcore.verilator.cpp top.v
make -C obj_dir.opt -f Vtop.mk Vtop
make[1]: Entering directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt'
g++-9  -I.  -MMD -I/usr/local/share/verilator/include -I/usr/local/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=0 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow     -DVL_USER_FINISH -I /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector   -c -o rvcore.o ../rvcore.verilator.cpp
g++-9  -I.  -MMD -I/usr/local/share/verilator/include -I/usr/local/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=0 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow     -DVL_USER_FINISH -I /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector   -c -o verilated.o /usr/local/share/verilator/include/verilated.cpp
g++-9  -I.  -MMD -I/usr/local/share/verilator/include -I/usr/local/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=0 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow     -DVL_USER_FINISH -I /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector   -c -o verilated_dpi.o /usr/local/share/verilator/include/verilated_dpi.cpp
/usr/bin/perl /usr/local/share/verilator/bin/verilator_includer -DVL_INCLUDE_OPT=include Vtop.cpp Vtop_top.cpp Vtop_rv32.cpp > Vtop__ALLcls.cpp
g++-9  -I.  -MMD -I/usr/local/share/verilator/include -I/usr/local/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=0 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow     -DVL_USER_FINISH -I /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector   -c -o Vtop__ALLcls.o Vtop__ALLcls.cpp
/usr/bin/perl /usr/local/share/verilator/bin/verilator_includer -DVL_INCLUDE_OPT=include Vtop__Dpi.cpp Vtop__Syms.cpp > Vtop__ALLsup.cpp
g++-9  -I.  -MMD -I/usr/local/share/verilator/include -I/usr/local/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=0 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow     -DVL_USER_FINISH -I /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector   -c -o Vtop__ALLsup.o Vtop__ALLsup.cpp
ar -cr Vtop__ALL.a Vtop__ALLcls.o Vtop__ALLsup.o
ranlib Vtop__ALL.a
g++    rvcore.o verilated.o verilated_dpi.o Vtop__ALL.a   -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector  -o Vtop -lm -lstdc++ 
make[1]: Leaving directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt'
make: Leaving directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v'
+ bench g++-9 verilator rv32i-rvbench_qsort /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_qsort.vmh -1
+ compiler=g++-9
+ simulator=verilator
+ input=rv32i-rvbench_qsort
+ export 'TIMEFORMAT=>> g++-9	verilator	rv32i-rvbench_qsort	real: %3R	user: %3U	sys: %3S'
+ TIMEFORMAT='>> g++-9	verilator	rv32i-rvbench_qsort	real: %3R	user: %3U	sys: %3S'
+ echo '<< verilator rv32i-rvbench_qsort'
<< verilator rv32i-rvbench_qsort
++ seq 1 10
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_qsort.vmh -1
  PASS
>> g++-9	verilator	rv32i-rvbench_qsort	real: 0.038	user: 0.038	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_qsort.vmh -1
  PASS
>> g++-9	verilator	rv32i-rvbench_qsort	real: 0.036	user: 0.032	sys: 0.004
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_qsort.vmh -1
  PASS
>> g++-9	verilator	rv32i-rvbench_qsort	real: 0.037	user: 0.037	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_qsort.vmh -1
  PASS
>> g++-9	verilator	rv32i-rvbench_qsort	real: 0.037	user: 0.037	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_qsort.vmh -1
  PASS
>> g++-9	verilator	rv32i-rvbench_qsort	real: 0.037	user: 0.037	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_qsort.vmh -1
  PASS
>> g++-9	verilator	rv32i-rvbench_qsort	real: 0.038	user: 0.038	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_qsort.vmh -1
  PASS
>> g++-9	verilator	rv32i-rvbench_qsort	real: 0.036	user: 0.035	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_qsort.vmh -1
  PASS
>> g++-9	verilator	rv32i-rvbench_qsort	real: 0.038	user: 0.037	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_qsort.vmh -1
  PASS
>> g++-9	verilator	rv32i-rvbench_qsort	real: 0.037	user: 0.032	sys: 0.004
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_qsort.vmh -1
  PASS
>> g++-9	verilator	rv32i-rvbench_qsort	real: 0.038	user: 0.038	sys: 0.000
+ for compiler in "clang++" "g++-9" "g++-10"
+ for simulator in ${@:3}
+ bench_rv_1 g++-10 cuttlesim rv32i rvbench_qsort
+ compiler=g++-10
+ simulator=cuttlesim
+ design=rv32i
+ test=rvbench_qsort
++ realpath ../examples/rv/_objects/rv32i.v/
+ base=/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v
++ realpath ../examples/rv/tests/_build/rv32i/integ/
+ tests=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ
+ b='bench g++-10 cuttlesim rv32i-rvbench_qsort'
+ make -C /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v clean
make: Entering directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v'
rm -rf obj_dir.opt
rm -rf obj_dir.trace
rm -f rvcore.verilator.vcd
rm -f rvcore.cuttlesim.opt
rm -f rvcore.cuttlesim.debug
rm -f rvcore.cuttlesim.perf
rm -f rvcore.cuttlesim.cov
rm -f rvcore.cuttlesim.s
rm -f rvcore.cuttlesim.out
rm -f rvcore.cuttlesim.vcd
rm -f rvcore.cuttlesim.perf.data
rm -f rvcore.cuttlesim.callgrind
rm -fr rvcore.cuttlesim.rr
rm -f *.gcov
rm -f top_ice40_usb.json
rm -f top_ice40_usb.json.log
rm -f top_ice40_usb.asc
rm -f top_ice40_usb.bin
rm -f top_ice40_usb.rpt
rm -f top_ice40_usb.json.v
make: Leaving directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v'
+ case $simulator in
+ make CXX=g++-10 -C /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v rvcore.cuttlesim.opt
make: Entering directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v'
g++-10 --std=c++17  -Wall -Wextra '-DSIM_VCD_SCOPES={"TOP", "top", "rv_core",}' -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector rvcore.cuttlesim.cpp -o "rvcore.cuttlesim.opt"
In file included from rv32.hpp:10,
                 from rvcore.cuttlesim.cpp:5:
cuttlesim.hpp:87:102: note: ‘#pragma message: Bignum truncation is broken in Boost < 1.68; if you run into issues, try upgrading.’
   87 | #pragma message("Bignum truncation is broken in Boost < 1.68; if you run into issues, try upgrading.")
      |                                                                                                      ^
make: Leaving directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v'
+ bench g++-10 cuttlesim rv32i-rvbench_qsort /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_qsort.rv32 -1
+ compiler=g++-10
+ simulator=cuttlesim
+ input=rv32i-rvbench_qsort
+ export 'TIMEFORMAT=>> g++-10	cuttlesim	rv32i-rvbench_qsort	real: %3R	user: %3U	sys: %3S'
+ TIMEFORMAT='>> g++-10	cuttlesim	rv32i-rvbench_qsort	real: %3R	user: %3U	sys: %3S'
+ echo '<< cuttlesim rv32i-rvbench_qsort'
<< cuttlesim rv32i-rvbench_qsort
++ seq 1 10
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_qsort.rv32 -1
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000000000011110001100 (0x78c, 1932)
rf_x12_a2 = 32'b00000000000000000000101101110100 (0xb74, 2932)
rf_x13_a3 = 32'b00000000000000000000101010110100 (0xab4, 2740)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b0 (0x0, 0)
mulState_operand2 = 32'b0 (0x0, 0)
mulState_result = 64'b0 (0x0, 0)
mulState_n_step = 5'b0 (0x0, 0)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000000000000010100001110010000 (0x14390, 82832)
instr_count = 32'b00000000000000001000101001001010 (0x8a4a, 35402)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b1 (0x1, 1)
>> g++-10	cuttlesim	rv32i-rvbench_qsort	real: 0.020	user: 0.020	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_qsort.rv32 -1
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000000000011110001100 (0x78c, 1932)
rf_x12_a2 = 32'b00000000000000000000101101110100 (0xb74, 2932)
rf_x13_a3 = 32'b00000000000000000000101010110100 (0xab4, 2740)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b0 (0x0, 0)
mulState_operand2 = 32'b0 (0x0, 0)
mulState_result = 64'b0 (0x0, 0)
mulState_n_step = 5'b0 (0x0, 0)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000000000000010100001110010000 (0x14390, 82832)
instr_count = 32'b00000000000000001000101001001010 (0x8a4a, 35402)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b1 (0x1, 1)
>> g++-10	cuttlesim	rv32i-rvbench_qsort	real: 0.022	user: 0.018	sys: 0.004
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_qsort.rv32 -1
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000000000011110001100 (0x78c, 1932)
rf_x12_a2 = 32'b00000000000000000000101101110100 (0xb74, 2932)
rf_x13_a3 = 32'b00000000000000000000101010110100 (0xab4, 2740)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b0 (0x0, 0)
mulState_operand2 = 32'b0 (0x0, 0)
mulState_result = 64'b0 (0x0, 0)
mulState_n_step = 5'b0 (0x0, 0)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000000000000010100001110010000 (0x14390, 82832)
instr_count = 32'b00000000000000001000101001001010 (0x8a4a, 35402)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b1 (0x1, 1)
>> g++-10	cuttlesim	rv32i-rvbench_qsort	real: 0.021	user: 0.021	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_qsort.rv32 -1
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000000000011110001100 (0x78c, 1932)
rf_x12_a2 = 32'b00000000000000000000101101110100 (0xb74, 2932)
rf_x13_a3 = 32'b00000000000000000000101010110100 (0xab4, 2740)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b0 (0x0, 0)
mulState_operand2 = 32'b0 (0x0, 0)
mulState_result = 64'b0 (0x0, 0)
mulState_n_step = 5'b0 (0x0, 0)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000000000000010100001110010000 (0x14390, 82832)
instr_count = 32'b00000000000000001000101001001010 (0x8a4a, 35402)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b1 (0x1, 1)
>> g++-10	cuttlesim	rv32i-rvbench_qsort	real: 0.020	user: 0.020	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_qsort.rv32 -1
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000000000011110001100 (0x78c, 1932)
rf_x12_a2 = 32'b00000000000000000000101101110100 (0xb74, 2932)
rf_x13_a3 = 32'b00000000000000000000101010110100 (0xab4, 2740)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b0 (0x0, 0)
mulState_operand2 = 32'b0 (0x0, 0)
mulState_result = 64'b0 (0x0, 0)
mulState_n_step = 5'b0 (0x0, 0)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000000000000010100001110010000 (0x14390, 82832)
instr_count = 32'b00000000000000001000101001001010 (0x8a4a, 35402)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b1 (0x1, 1)
>> g++-10	cuttlesim	rv32i-rvbench_qsort	real: 0.020	user: 0.020	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_qsort.rv32 -1
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000000000011110001100 (0x78c, 1932)
rf_x12_a2 = 32'b00000000000000000000101101110100 (0xb74, 2932)
rf_x13_a3 = 32'b00000000000000000000101010110100 (0xab4, 2740)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b0 (0x0, 0)
mulState_operand2 = 32'b0 (0x0, 0)
mulState_result = 64'b0 (0x0, 0)
mulState_n_step = 5'b0 (0x0, 0)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000000000000010100001110010000 (0x14390, 82832)
instr_count = 32'b00000000000000001000101001001010 (0x8a4a, 35402)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b1 (0x1, 1)
>> g++-10	cuttlesim	rv32i-rvbench_qsort	real: 0.026	user: 0.018	sys: 0.004
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_qsort.rv32 -1
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000000000011110001100 (0x78c, 1932)
rf_x12_a2 = 32'b00000000000000000000101101110100 (0xb74, 2932)
rf_x13_a3 = 32'b00000000000000000000101010110100 (0xab4, 2740)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b0 (0x0, 0)
mulState_operand2 = 32'b0 (0x0, 0)
mulState_result = 64'b0 (0x0, 0)
mulState_n_step = 5'b0 (0x0, 0)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000000000000010100001110010000 (0x14390, 82832)
instr_count = 32'b00000000000000001000101001001010 (0x8a4a, 35402)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b1 (0x1, 1)
>> g++-10	cuttlesim	rv32i-rvbench_qsort	real: 0.058	user: 0.023	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_qsort.rv32 -1
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000000000011110001100 (0x78c, 1932)
rf_x12_a2 = 32'b00000000000000000000101101110100 (0xb74, 2932)
rf_x13_a3 = 32'b00000000000000000000101010110100 (0xab4, 2740)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b0 (0x0, 0)
mulState_operand2 = 32'b0 (0x0, 0)
mulState_result = 64'b0 (0x0, 0)
mulState_n_step = 5'b0 (0x0, 0)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000000000000010100001110010000 (0x14390, 82832)
instr_count = 32'b00000000000000001000101001001010 (0x8a4a, 35402)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b1 (0x1, 1)
>> g++-10	cuttlesim	rv32i-rvbench_qsort	real: 0.028	user: 0.028	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_qsort.rv32 -1
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000000000011110001100 (0x78c, 1932)
rf_x12_a2 = 32'b00000000000000000000101101110100 (0xb74, 2932)
rf_x13_a3 = 32'b00000000000000000000101010110100 (0xab4, 2740)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b0 (0x0, 0)
mulState_operand2 = 32'b0 (0x0, 0)
mulState_result = 64'b0 (0x0, 0)
mulState_n_step = 5'b0 (0x0, 0)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000000000000010100001110010000 (0x14390, 82832)
instr_count = 32'b00000000000000001000101001001010 (0x8a4a, 35402)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b1 (0x1, 1)
>> g++-10	cuttlesim	rv32i-rvbench_qsort	real: 0.047	user: 0.020	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_qsort.rv32 -1
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000000000011110001100 (0x78c, 1932)
rf_x12_a2 = 32'b00000000000000000000101101110100 (0xb74, 2932)
rf_x13_a3 = 32'b00000000000000000000101010110100 (0xab4, 2740)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b0 (0x0, 0)
mulState_operand2 = 32'b0 (0x0, 0)
mulState_result = 64'b0 (0x0, 0)
mulState_n_step = 5'b0 (0x0, 0)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000000000000010100001110010000 (0x14390, 82832)
instr_count = 32'b00000000000000001000101001001010 (0x8a4a, 35402)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b1 (0x1, 1)
>> g++-10	cuttlesim	rv32i-rvbench_qsort	real: 0.052	user: 0.025	sys: 0.000
+ for simulator in ${@:3}
+ bench_rv_1 g++-10 verilator rv32i rvbench_qsort
+ compiler=g++-10
+ simulator=verilator
+ design=rv32i
+ test=rvbench_qsort
++ realpath ../examples/rv/_objects/rv32i.v/
+ base=/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v
++ realpath ../examples/rv/tests/_build/rv32i/integ/
+ tests=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ
+ b='bench g++-10 verilator rv32i-rvbench_qsort'
+ make -C /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v clean
make: Entering directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v'
rm -rf obj_dir.opt
rm -rf obj_dir.trace
rm -f rvcore.verilator.vcd
rm -f rvcore.cuttlesim.opt
rm -f rvcore.cuttlesim.debug
rm -f rvcore.cuttlesim.perf
rm -f rvcore.cuttlesim.cov
rm -f rvcore.cuttlesim.s
rm -f rvcore.cuttlesim.out
rm -f rvcore.cuttlesim.vcd
rm -f rvcore.cuttlesim.perf.data
rm -f rvcore.cuttlesim.callgrind
rm -fr rvcore.cuttlesim.rr
rm -f *.gcov
rm -f top_ice40_usb.json
rm -f top_ice40_usb.json.log
rm -f top_ice40_usb.asc
rm -f top_ice40_usb.bin
rm -f top_ice40_usb.rpt
rm -f top_ice40_usb.json.v
make: Leaving directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v'
+ case $simulator in
+ make CXX=g++-10 -C /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v obj_dir.opt/Vtop
make: Entering directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v'
verilator +define+MEM_ADDRESS_WIDTH=14 +define+BRAM_RUNTIME_INIT+SIMULATION -CFLAGS -DVL_USER_FINISH -Wno-fatal -CFLAGS "-I /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v" --prefix Vtop --cc --exe  --Mdir obj_dir.opt --x-assign fast --x-initial fast --noassert -O3 -CFLAGS '-O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector ' -LDFLAGS '-O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector ' rvcore.verilator.cpp top.v
make -C obj_dir.opt -f Vtop.mk Vtop
make[1]: Entering directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt'
g++-10  -I.  -MMD -I/usr/local/share/verilator/include -I/usr/local/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=0 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow     -DVL_USER_FINISH -I /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector   -c -o rvcore.o ../rvcore.verilator.cpp
g++-10  -I.  -MMD -I/usr/local/share/verilator/include -I/usr/local/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=0 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow     -DVL_USER_FINISH -I /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector   -c -o verilated.o /usr/local/share/verilator/include/verilated.cpp
g++-10  -I.  -MMD -I/usr/local/share/verilator/include -I/usr/local/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=0 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow     -DVL_USER_FINISH -I /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector   -c -o verilated_dpi.o /usr/local/share/verilator/include/verilated_dpi.cpp
/usr/bin/perl /usr/local/share/verilator/bin/verilator_includer -DVL_INCLUDE_OPT=include Vtop.cpp Vtop_top.cpp Vtop_rv32.cpp > Vtop__ALLcls.cpp
g++-10  -I.  -MMD -I/usr/local/share/verilator/include -I/usr/local/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=0 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow     -DVL_USER_FINISH -I /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector   -c -o Vtop__ALLcls.o Vtop__ALLcls.cpp
/usr/bin/perl /usr/local/share/verilator/bin/verilator_includer -DVL_INCLUDE_OPT=include Vtop__Dpi.cpp Vtop__Syms.cpp > Vtop__ALLsup.cpp
g++-10  -I.  -MMD -I/usr/local/share/verilator/include -I/usr/local/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=0 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow     -DVL_USER_FINISH -I /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector   -c -o Vtop__ALLsup.o Vtop__ALLsup.cpp
ar -cr Vtop__ALL.a Vtop__ALLcls.o Vtop__ALLsup.o
ranlib Vtop__ALL.a
g++    rvcore.o verilated.o verilated_dpi.o Vtop__ALL.a   -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector  -o Vtop -lm -lstdc++ 
make[1]: Leaving directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt'
make: Leaving directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v'
+ bench g++-10 verilator rv32i-rvbench_qsort /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_qsort.vmh -1
+ compiler=g++-10
+ simulator=verilator
+ input=rv32i-rvbench_qsort
+ export 'TIMEFORMAT=>> g++-10	verilator	rv32i-rvbench_qsort	real: %3R	user: %3U	sys: %3S'
+ TIMEFORMAT='>> g++-10	verilator	rv32i-rvbench_qsort	real: %3R	user: %3U	sys: %3S'
+ echo '<< verilator rv32i-rvbench_qsort'
<< verilator rv32i-rvbench_qsort
++ seq 1 10
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_qsort.vmh -1
  PASS
>> g++-10	verilator	rv32i-rvbench_qsort	real: 0.036	user: 0.036	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_qsort.vmh -1
  PASS
>> g++-10	verilator	rv32i-rvbench_qsort	real: 0.037	user: 0.037	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_qsort.vmh -1
  PASS
>> g++-10	verilator	rv32i-rvbench_qsort	real: 0.037	user: 0.037	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_qsort.vmh -1
  PASS
>> g++-10	verilator	rv32i-rvbench_qsort	real: 0.038	user: 0.038	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_qsort.vmh -1
  PASS
>> g++-10	verilator	rv32i-rvbench_qsort	real: 0.038	user: 0.038	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_qsort.vmh -1
  PASS
>> g++-10	verilator	rv32i-rvbench_qsort	real: 0.037	user: 0.033	sys: 0.004
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_qsort.vmh -1
  PASS
>> g++-10	verilator	rv32i-rvbench_qsort	real: 0.037	user: 0.033	sys: 0.004
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_qsort.vmh -1
  PASS
>> g++-10	verilator	rv32i-rvbench_qsort	real: 0.038	user: 0.038	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_qsort.vmh -1
  PASS
>> g++-10	verilator	rv32i-rvbench_qsort	real: 0.037	user: 0.036	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_qsort.vmh -1
  PASS
>> g++-10	verilator	rv32i-rvbench_qsort	real: 0.038	user: 0.038	sys: 0.000
+ bench_rv rv32i rvbench_median cuttlesim verilator
+ for compiler in "clang++" "g++-9" "g++-10"
+ for simulator in ${@:3}
+ bench_rv_1 clang++ cuttlesim rv32i rvbench_median
+ compiler=clang++
+ simulator=cuttlesim
+ design=rv32i
+ test=rvbench_median
++ realpath ../examples/rv/_objects/rv32i.v/
+ base=/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v
++ realpath ../examples/rv/tests/_build/rv32i/integ/
+ tests=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ
+ b='bench clang++ cuttlesim rv32i-rvbench_median'
+ make -C /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v clean
make: Entering directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v'
rm -rf obj_dir.opt
rm -rf obj_dir.trace
rm -f rvcore.verilator.vcd
rm -f rvcore.cuttlesim.opt
rm -f rvcore.cuttlesim.debug
rm -f rvcore.cuttlesim.perf
rm -f rvcore.cuttlesim.cov
rm -f rvcore.cuttlesim.s
rm -f rvcore.cuttlesim.out
rm -f rvcore.cuttlesim.vcd
rm -f rvcore.cuttlesim.perf.data
rm -f rvcore.cuttlesim.callgrind
rm -fr rvcore.cuttlesim.rr
rm -f *.gcov
rm -f top_ice40_usb.json
rm -f top_ice40_usb.json.log
rm -f top_ice40_usb.asc
rm -f top_ice40_usb.bin
rm -f top_ice40_usb.rpt
rm -f top_ice40_usb.json.v
make: Leaving directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v'
+ case $simulator in
+ make CXX=clang++ -C /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v rvcore.cuttlesim.opt
make: Entering directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v'
clang++ --std=c++17  -Wall -Wextra '-DSIM_VCD_SCOPES={"TOP", "top", "rv_core",}' -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector rvcore.cuttlesim.cpp -o "rvcore.cuttlesim.opt"
In file included from rvcore.cuttlesim.cpp:5:
In file included from ./rv32.hpp:10:
./cuttlesim.hpp:87:9: warning: Bignum truncation is broken in Boost < 1.68; if you run into issues, try upgrading. [-W#pragma-messages]
#pragma message("Bignum truncation is broken in Boost < 1.68; if you run into issues, try upgrading.")
        ^
1 warning generated.
make: Leaving directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v'
+ bench clang++ cuttlesim rv32i-rvbench_median /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_median.rv32 -1
+ compiler=clang++
+ simulator=cuttlesim
+ input=rv32i-rvbench_median
+ export 'TIMEFORMAT=>> clang++	cuttlesim	rv32i-rvbench_median	real: %3R	user: %3U	sys: %3S'
+ TIMEFORMAT='>> clang++	cuttlesim	rv32i-rvbench_median	real: %3R	user: %3U	sys: %3S'
+ echo '<< cuttlesim rv32i-rvbench_median'
<< cuttlesim rv32i-rvbench_median
++ seq 1 10
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_median.rv32 -1
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b0 (0x0, 0); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b0 (0x0, 0); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000111111100110101100 (0x3f9ac, 260524)
rf_x12_a2 = 32'b00000000000000000000101001000000 (0xa40, 2624)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b0 (0x0, 0)
mulState_operand2 = 32'b0 (0x0, 0)
mulState_result = 64'b0 (0x0, 0)
mulState_n_step = 5'b0 (0x0, 0)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000000000000001110110100010000 (0xed10, 60688)
instr_count = 32'b00000000000000000110010101111011 (0x657b, 25979)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b0 (0x0, 0)
>> clang++	cuttlesim	rv32i-rvbench_median	real: 0.012	user: 0.012	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_median.rv32 -1
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b0 (0x0, 0); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b0 (0x0, 0); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000111111100110101100 (0x3f9ac, 260524)
rf_x12_a2 = 32'b00000000000000000000101001000000 (0xa40, 2624)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b0 (0x0, 0)
mulState_operand2 = 32'b0 (0x0, 0)
mulState_result = 64'b0 (0x0, 0)
mulState_n_step = 5'b0 (0x0, 0)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000000000000001110110100010000 (0xed10, 60688)
instr_count = 32'b00000000000000000110010101111011 (0x657b, 25979)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b0 (0x0, 0)
>> clang++	cuttlesim	rv32i-rvbench_median	real: 0.014	user: 0.014	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_median.rv32 -1
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b0 (0x0, 0); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b0 (0x0, 0); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000111111100110101100 (0x3f9ac, 260524)
rf_x12_a2 = 32'b00000000000000000000101001000000 (0xa40, 2624)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b0 (0x0, 0)
mulState_operand2 = 32'b0 (0x0, 0)
mulState_result = 64'b0 (0x0, 0)
mulState_n_step = 5'b0 (0x0, 0)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000000000000001110110100010000 (0xed10, 60688)
instr_count = 32'b00000000000000000110010101111011 (0x657b, 25979)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b0 (0x0, 0)
>> clang++	cuttlesim	rv32i-rvbench_median	real: 0.010	user: 0.007	sys: 0.003
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_median.rv32 -1
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b0 (0x0, 0); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b0 (0x0, 0); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000111111100110101100 (0x3f9ac, 260524)
rf_x12_a2 = 32'b00000000000000000000101001000000 (0xa40, 2624)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b0 (0x0, 0)
mulState_operand2 = 32'b0 (0x0, 0)
mulState_result = 64'b0 (0x0, 0)
mulState_n_step = 5'b0 (0x0, 0)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000000000000001110110100010000 (0xed10, 60688)
instr_count = 32'b00000000000000000110010101111011 (0x657b, 25979)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b0 (0x0, 0)
>> clang++	cuttlesim	rv32i-rvbench_median	real: 0.066	user: 0.013	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_median.rv32 -1
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b0 (0x0, 0); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b0 (0x0, 0); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000111111100110101100 (0x3f9ac, 260524)
rf_x12_a2 = 32'b00000000000000000000101001000000 (0xa40, 2624)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b0 (0x0, 0)
mulState_operand2 = 32'b0 (0x0, 0)
mulState_result = 64'b0 (0x0, 0)
mulState_n_step = 5'b0 (0x0, 0)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000000000000001110110100010000 (0xed10, 60688)
instr_count = 32'b00000000000000000110010101111011 (0x657b, 25979)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b0 (0x0, 0)
>> clang++	cuttlesim	rv32i-rvbench_median	real: 0.017	user: 0.014	sys: 0.004
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_median.rv32 -1
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b0 (0x0, 0); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b0 (0x0, 0); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000111111100110101100 (0x3f9ac, 260524)
rf_x12_a2 = 32'b00000000000000000000101001000000 (0xa40, 2624)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b0 (0x0, 0)
mulState_operand2 = 32'b0 (0x0, 0)
mulState_result = 64'b0 (0x0, 0)
mulState_n_step = 5'b0 (0x0, 0)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000000000000001110110100010000 (0xed10, 60688)
instr_count = 32'b00000000000000000110010101111011 (0x657b, 25979)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b0 (0x0, 0)
>> clang++	cuttlesim	rv32i-rvbench_median	real: 0.088	user: 0.011	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_median.rv32 -1
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b0 (0x0, 0); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b0 (0x0, 0); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000111111100110101100 (0x3f9ac, 260524)
rf_x12_a2 = 32'b00000000000000000000101001000000 (0xa40, 2624)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b0 (0x0, 0)
mulState_operand2 = 32'b0 (0x0, 0)
mulState_result = 64'b0 (0x0, 0)
mulState_n_step = 5'b0 (0x0, 0)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000000000000001110110100010000 (0xed10, 60688)
instr_count = 32'b00000000000000000110010101111011 (0x657b, 25979)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b0 (0x0, 0)
>> clang++	cuttlesim	rv32i-rvbench_median	real: 0.104	user: 0.018	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_median.rv32 -1
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b0 (0x0, 0); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b0 (0x0, 0); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000111111100110101100 (0x3f9ac, 260524)
rf_x12_a2 = 32'b00000000000000000000101001000000 (0xa40, 2624)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b0 (0x0, 0)
mulState_operand2 = 32'b0 (0x0, 0)
mulState_result = 64'b0 (0x0, 0)
mulState_n_step = 5'b0 (0x0, 0)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000000000000001110110100010000 (0xed10, 60688)
instr_count = 32'b00000000000000000110010101111011 (0x657b, 25979)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b0 (0x0, 0)
>> clang++	cuttlesim	rv32i-rvbench_median	real: 0.013	user: 0.013	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_median.rv32 -1
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b0 (0x0, 0); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b0 (0x0, 0); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000111111100110101100 (0x3f9ac, 260524)
rf_x12_a2 = 32'b00000000000000000000101001000000 (0xa40, 2624)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b0 (0x0, 0)
mulState_operand2 = 32'b0 (0x0, 0)
mulState_result = 64'b0 (0x0, 0)
mulState_n_step = 5'b0 (0x0, 0)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000000000000001110110100010000 (0xed10, 60688)
instr_count = 32'b00000000000000000110010101111011 (0x657b, 25979)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b0 (0x0, 0)
>> clang++	cuttlesim	rv32i-rvbench_median	real: 0.041	user: 0.010	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_median.rv32 -1
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b0 (0x0, 0); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b0 (0x0, 0); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000111111100110101100 (0x3f9ac, 260524)
rf_x12_a2 = 32'b00000000000000000000101001000000 (0xa40, 2624)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b0 (0x0, 0)
mulState_operand2 = 32'b0 (0x0, 0)
mulState_result = 64'b0 (0x0, 0)
mulState_n_step = 5'b0 (0x0, 0)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000000000000001110110100010000 (0xed10, 60688)
instr_count = 32'b00000000000000000110010101111011 (0x657b, 25979)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b0 (0x0, 0)
>> clang++	cuttlesim	rv32i-rvbench_median	real: 0.105	user: 0.015	sys: 0.000
+ for simulator in ${@:3}
+ bench_rv_1 clang++ verilator rv32i rvbench_median
+ compiler=clang++
+ simulator=verilator
+ design=rv32i
+ test=rvbench_median
++ realpath ../examples/rv/_objects/rv32i.v/
+ base=/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v
++ realpath ../examples/rv/tests/_build/rv32i/integ/
+ tests=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ
+ b='bench clang++ verilator rv32i-rvbench_median'
+ make -C /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v clean
make: Entering directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v'
rm -rf obj_dir.opt
rm -rf obj_dir.trace
rm -f rvcore.verilator.vcd
rm -f rvcore.cuttlesim.opt
rm -f rvcore.cuttlesim.debug
rm -f rvcore.cuttlesim.perf
rm -f rvcore.cuttlesim.cov
rm -f rvcore.cuttlesim.s
rm -f rvcore.cuttlesim.out
rm -f rvcore.cuttlesim.vcd
rm -f rvcore.cuttlesim.perf.data
rm -f rvcore.cuttlesim.callgrind
rm -fr rvcore.cuttlesim.rr
rm -f *.gcov
rm -f top_ice40_usb.json
rm -f top_ice40_usb.json.log
rm -f top_ice40_usb.asc
rm -f top_ice40_usb.bin
rm -f top_ice40_usb.rpt
rm -f top_ice40_usb.json.v
make: Leaving directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v'
+ case $simulator in
+ make CXX=clang++ -C /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v obj_dir.opt/Vtop
make: Entering directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v'
verilator +define+MEM_ADDRESS_WIDTH=14 +define+BRAM_RUNTIME_INIT+SIMULATION -CFLAGS -DVL_USER_FINISH -Wno-fatal -CFLAGS "-I /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v" --prefix Vtop --cc --exe --compiler clang -CFLAGS -fPIC --Mdir obj_dir.opt --x-assign fast --x-initial fast --noassert -O3 -CFLAGS '-O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector ' -LDFLAGS '-O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector ' rvcore.verilator.cpp top.v
make -C obj_dir.opt -f Vtop.mk Vtop
make[1]: Entering directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt'
clang++  -I.  -MMD -I/usr/local/share/verilator/include -I/usr/local/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=0 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow     -DVL_USER_FINISH -I /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v -fPIC -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector   -c -o rvcore.o ../rvcore.verilator.cpp
warning: unknown warning option '-Wno-unused-but-set-variable'; did you mean '-Wno-unused-const-variable'? [-Wunknown-warning-option]
1 warning generated.
clang++  -I.  -MMD -I/usr/local/share/verilator/include -I/usr/local/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=0 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow     -DVL_USER_FINISH -I /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v -fPIC -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector   -c -o verilated.o /usr/local/share/verilator/include/verilated.cpp
warning: unknown warning option '-Wno-unused-but-set-variable'; did you mean '-Wno-unused-const-variable'? [-Wunknown-warning-option]
1 warning generated.
clang++  -I.  -MMD -I/usr/local/share/verilator/include -I/usr/local/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=0 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow     -DVL_USER_FINISH -I /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v -fPIC -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector   -c -o verilated_dpi.o /usr/local/share/verilator/include/verilated_dpi.cpp
warning: unknown warning option '-Wno-unused-but-set-variable'; did you mean '-Wno-unused-const-variable'? [-Wunknown-warning-option]
1 warning generated.
/usr/bin/perl /usr/local/share/verilator/bin/verilator_includer -DVL_INCLUDE_OPT=include Vtop.cpp Vtop_top.cpp Vtop_rv32.cpp > Vtop__ALLcls.cpp
clang++  -I.  -MMD -I/usr/local/share/verilator/include -I/usr/local/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=0 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow     -DVL_USER_FINISH -I /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v -fPIC -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector   -c -o Vtop__ALLcls.o Vtop__ALLcls.cpp
warning: unknown warning option '-Wno-unused-but-set-variable'; did you mean '-Wno-unused-const-variable'? [-Wunknown-warning-option]
1 warning generated.
/usr/bin/perl /usr/local/share/verilator/bin/verilator_includer -DVL_INCLUDE_OPT=include Vtop__Dpi.cpp Vtop__Syms.cpp > Vtop__ALLsup.cpp
clang++  -I.  -MMD -I/usr/local/share/verilator/include -I/usr/local/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=0 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow     -DVL_USER_FINISH -I /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v -fPIC -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector   -c -o Vtop__ALLsup.o Vtop__ALLsup.cpp
warning: unknown warning option '-Wno-unused-but-set-variable'; did you mean '-Wno-unused-const-variable'? [-Wunknown-warning-option]
1 warning generated.
ar -cr Vtop__ALL.a Vtop__ALLcls.o Vtop__ALLsup.o
ranlib Vtop__ALL.a
g++    rvcore.o verilated.o verilated_dpi.o Vtop__ALL.a   -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector  -o Vtop -lm -lstdc++ 
make[1]: Leaving directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt'
make: Leaving directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v'
+ bench clang++ verilator rv32i-rvbench_median /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_median.vmh -1
+ compiler=clang++
+ simulator=verilator
+ input=rv32i-rvbench_median
+ export 'TIMEFORMAT=>> clang++	verilator	rv32i-rvbench_median	real: %3R	user: %3U	sys: %3S'
+ TIMEFORMAT='>> clang++	verilator	rv32i-rvbench_median	real: %3R	user: %3U	sys: %3S'
+ echo '<< verilator rv32i-rvbench_median'
<< verilator rv32i-rvbench_median
++ seq 1 10
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_median.vmh -1
  PASS
>> clang++	verilator	rv32i-rvbench_median	real: 0.024	user: 0.024	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_median.vmh -1
  PASS
>> clang++	verilator	rv32i-rvbench_median	real: 0.025	user: 0.025	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_median.vmh -1
  PASS
>> clang++	verilator	rv32i-rvbench_median	real: 0.024	user: 0.023	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_median.vmh -1
  PASS
>> clang++	verilator	rv32i-rvbench_median	real: 0.024	user: 0.024	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_median.vmh -1
  PASS
>> clang++	verilator	rv32i-rvbench_median	real: 0.023	user: 0.023	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_median.vmh -1
  PASS
>> clang++	verilator	rv32i-rvbench_median	real: 0.024	user: 0.024	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_median.vmh -1
  PASS
>> clang++	verilator	rv32i-rvbench_median	real: 0.023	user: 0.023	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_median.vmh -1
  PASS
>> clang++	verilator	rv32i-rvbench_median	real: 0.023	user: 0.023	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_median.vmh -1
  PASS
>> clang++	verilator	rv32i-rvbench_median	real: 0.026	user: 0.026	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_median.vmh -1
  PASS
>> clang++	verilator	rv32i-rvbench_median	real: 0.023	user: 0.023	sys: 0.000
+ for compiler in "clang++" "g++-9" "g++-10"
+ for simulator in ${@:3}
+ bench_rv_1 g++-9 cuttlesim rv32i rvbench_median
+ compiler=g++-9
+ simulator=cuttlesim
+ design=rv32i
+ test=rvbench_median
++ realpath ../examples/rv/_objects/rv32i.v/
+ base=/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v
++ realpath ../examples/rv/tests/_build/rv32i/integ/
+ tests=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ
+ b='bench g++-9 cuttlesim rv32i-rvbench_median'
+ make -C /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v clean
make: Entering directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v'
rm -rf obj_dir.opt
rm -rf obj_dir.trace
rm -f rvcore.verilator.vcd
rm -f rvcore.cuttlesim.opt
rm -f rvcore.cuttlesim.debug
rm -f rvcore.cuttlesim.perf
rm -f rvcore.cuttlesim.cov
rm -f rvcore.cuttlesim.s
rm -f rvcore.cuttlesim.out
rm -f rvcore.cuttlesim.vcd
rm -f rvcore.cuttlesim.perf.data
rm -f rvcore.cuttlesim.callgrind
rm -fr rvcore.cuttlesim.rr
rm -f *.gcov
rm -f top_ice40_usb.json
rm -f top_ice40_usb.json.log
rm -f top_ice40_usb.asc
rm -f top_ice40_usb.bin
rm -f top_ice40_usb.rpt
rm -f top_ice40_usb.json.v
make: Leaving directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v'
+ case $simulator in
+ make CXX=g++-9 -C /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v rvcore.cuttlesim.opt
make: Entering directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v'
g++-9 --std=c++17  -Wall -Wextra '-DSIM_VCD_SCOPES={"TOP", "top", "rv_core",}' -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector rvcore.cuttlesim.cpp -o "rvcore.cuttlesim.opt"
In file included from rv32.hpp:10,
                 from rvcore.cuttlesim.cpp:5:
cuttlesim.hpp:87:102: note: #pragma message: Bignum truncation is broken in Boost < 1.68; if you run into issues, try upgrading.
   87 | #pragma message("Bignum truncation is broken in Boost < 1.68; if you run into issues, try upgrading.")
      |                                                                                                      ^
make: Leaving directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v'
+ bench g++-9 cuttlesim rv32i-rvbench_median /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_median.rv32 -1
+ compiler=g++-9
+ simulator=cuttlesim
+ input=rv32i-rvbench_median
+ export 'TIMEFORMAT=>> g++-9	cuttlesim	rv32i-rvbench_median	real: %3R	user: %3U	sys: %3S'
+ TIMEFORMAT='>> g++-9	cuttlesim	rv32i-rvbench_median	real: %3R	user: %3U	sys: %3S'
+ echo '<< cuttlesim rv32i-rvbench_median'
<< cuttlesim rv32i-rvbench_median
++ seq 1 10
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_median.rv32 -1
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b0 (0x0, 0); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b0 (0x0, 0); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000111111100110101100 (0x3f9ac, 260524)
rf_x12_a2 = 32'b00000000000000000000101001000000 (0xa40, 2624)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b0 (0x0, 0)
mulState_operand2 = 32'b0 (0x0, 0)
mulState_result = 64'b0 (0x0, 0)
mulState_n_step = 5'b0 (0x0, 0)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000000000000001110110100010000 (0xed10, 60688)
instr_count = 32'b00000000000000000110010101111011 (0x657b, 25979)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b0 (0x0, 0)
>> g++-9	cuttlesim	rv32i-rvbench_median	real: 0.013	user: 0.012	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_median.rv32 -1
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b0 (0x0, 0); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b0 (0x0, 0); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000111111100110101100 (0x3f9ac, 260524)
rf_x12_a2 = 32'b00000000000000000000101001000000 (0xa40, 2624)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b0 (0x0, 0)
mulState_operand2 = 32'b0 (0x0, 0)
mulState_result = 64'b0 (0x0, 0)
mulState_n_step = 5'b0 (0x0, 0)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000000000000001110110100010000 (0xed10, 60688)
instr_count = 32'b00000000000000000110010101111011 (0x657b, 25979)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b0 (0x0, 0)
>> g++-9	cuttlesim	rv32i-rvbench_median	real: 0.011	user: 0.007	sys: 0.004
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_median.rv32 -1
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b0 (0x0, 0); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b0 (0x0, 0); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000111111100110101100 (0x3f9ac, 260524)
rf_x12_a2 = 32'b00000000000000000000101001000000 (0xa40, 2624)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b0 (0x0, 0)
mulState_operand2 = 32'b0 (0x0, 0)
mulState_result = 64'b0 (0x0, 0)
mulState_n_step = 5'b0 (0x0, 0)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000000000000001110110100010000 (0xed10, 60688)
instr_count = 32'b00000000000000000110010101111011 (0x657b, 25979)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b0 (0x0, 0)
>> g++-9	cuttlesim	rv32i-rvbench_median	real: 0.013	user: 0.013	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_median.rv32 -1
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b0 (0x0, 0); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b0 (0x0, 0); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000111111100110101100 (0x3f9ac, 260524)
rf_x12_a2 = 32'b00000000000000000000101001000000 (0xa40, 2624)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b0 (0x0, 0)
mulState_operand2 = 32'b0 (0x0, 0)
mulState_result = 64'b0 (0x0, 0)
mulState_n_step = 5'b0 (0x0, 0)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000000000000001110110100010000 (0xed10, 60688)
instr_count = 32'b00000000000000000110010101111011 (0x657b, 25979)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b0 (0x0, 0)
>> g++-9	cuttlesim	rv32i-rvbench_median	real: 0.014	user: 0.011	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_median.rv32 -1
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b0 (0x0, 0); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b0 (0x0, 0); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000111111100110101100 (0x3f9ac, 260524)
rf_x12_a2 = 32'b00000000000000000000101001000000 (0xa40, 2624)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b0 (0x0, 0)
mulState_operand2 = 32'b0 (0x0, 0)
mulState_result = 64'b0 (0x0, 0)
mulState_n_step = 5'b0 (0x0, 0)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000000000000001110110100010000 (0xed10, 60688)
instr_count = 32'b00000000000000000110010101111011 (0x657b, 25979)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b0 (0x0, 0)
>> g++-9	cuttlesim	rv32i-rvbench_median	real: 0.012	user: 0.012	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_median.rv32 -1
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b0 (0x0, 0); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b0 (0x0, 0); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000111111100110101100 (0x3f9ac, 260524)
rf_x12_a2 = 32'b00000000000000000000101001000000 (0xa40, 2624)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b0 (0x0, 0)
mulState_operand2 = 32'b0 (0x0, 0)
mulState_result = 64'b0 (0x0, 0)
mulState_n_step = 5'b0 (0x0, 0)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000000000000001110110100010000 (0xed10, 60688)
instr_count = 32'b00000000000000000110010101111011 (0x657b, 25979)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b0 (0x0, 0)
>> g++-9	cuttlesim	rv32i-rvbench_median	real: 0.101	user: 0.006	sys: 0.006
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_median.rv32 -1
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b0 (0x0, 0); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b0 (0x0, 0); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000111111100110101100 (0x3f9ac, 260524)
rf_x12_a2 = 32'b00000000000000000000101001000000 (0xa40, 2624)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b0 (0x0, 0)
mulState_operand2 = 32'b0 (0x0, 0)
mulState_result = 64'b0 (0x0, 0)
mulState_n_step = 5'b0 (0x0, 0)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000000000000001110110100010000 (0xed10, 60688)
instr_count = 32'b00000000000000000110010101111011 (0x657b, 25979)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b0 (0x0, 0)
>> g++-9	cuttlesim	rv32i-rvbench_median	real: 0.082	user: 0.015	sys: 0.005
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_median.rv32 -1
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b0 (0x0, 0); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b0 (0x0, 0); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000111111100110101100 (0x3f9ac, 260524)
rf_x12_a2 = 32'b00000000000000000000101001000000 (0xa40, 2624)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b0 (0x0, 0)
mulState_operand2 = 32'b0 (0x0, 0)
mulState_result = 64'b0 (0x0, 0)
mulState_n_step = 5'b0 (0x0, 0)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000000000000001110110100010000 (0xed10, 60688)
instr_count = 32'b00000000000000000110010101111011 (0x657b, 25979)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b0 (0x0, 0)
>> g++-9	cuttlesim	rv32i-rvbench_median	real: 0.019	user: 0.013	sys: 0.005
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_median.rv32 -1
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b0 (0x0, 0); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b0 (0x0, 0); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000111111100110101100 (0x3f9ac, 260524)
rf_x12_a2 = 32'b00000000000000000000101001000000 (0xa40, 2624)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b0 (0x0, 0)
mulState_operand2 = 32'b0 (0x0, 0)
mulState_result = 64'b0 (0x0, 0)
mulState_n_step = 5'b0 (0x0, 0)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000000000000001110110100010000 (0xed10, 60688)
instr_count = 32'b00000000000000000110010101111011 (0x657b, 25979)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b0 (0x0, 0)
>> g++-9	cuttlesim	rv32i-rvbench_median	real: 0.011	user: 0.011	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_median.rv32 -1
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b0 (0x0, 0); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b0 (0x0, 0); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000111111100110101100 (0x3f9ac, 260524)
rf_x12_a2 = 32'b00000000000000000000101001000000 (0xa40, 2624)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b0 (0x0, 0)
mulState_operand2 = 32'b0 (0x0, 0)
mulState_result = 64'b0 (0x0, 0)
mulState_n_step = 5'b0 (0x0, 0)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000000000000001110110100010000 (0xed10, 60688)
instr_count = 32'b00000000000000000110010101111011 (0x657b, 25979)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b0 (0x0, 0)
>> g++-9	cuttlesim	rv32i-rvbench_median	real: 0.053	user: 0.011	sys: 0.000
+ for simulator in ${@:3}
+ bench_rv_1 g++-9 verilator rv32i rvbench_median
+ compiler=g++-9
+ simulator=verilator
+ design=rv32i
+ test=rvbench_median
++ realpath ../examples/rv/_objects/rv32i.v/
+ base=/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v
++ realpath ../examples/rv/tests/_build/rv32i/integ/
+ tests=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ
+ b='bench g++-9 verilator rv32i-rvbench_median'
+ make -C /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v clean
make: Entering directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v'
rm -rf obj_dir.opt
rm -rf obj_dir.trace
rm -f rvcore.verilator.vcd
rm -f rvcore.cuttlesim.opt
rm -f rvcore.cuttlesim.debug
rm -f rvcore.cuttlesim.perf
rm -f rvcore.cuttlesim.cov
rm -f rvcore.cuttlesim.s
rm -f rvcore.cuttlesim.out
rm -f rvcore.cuttlesim.vcd
rm -f rvcore.cuttlesim.perf.data
rm -f rvcore.cuttlesim.callgrind
rm -fr rvcore.cuttlesim.rr
rm -f *.gcov
rm -f top_ice40_usb.json
rm -f top_ice40_usb.json.log
rm -f top_ice40_usb.asc
rm -f top_ice40_usb.bin
rm -f top_ice40_usb.rpt
rm -f top_ice40_usb.json.v
make: Leaving directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v'
+ case $simulator in
+ make CXX=g++-9 -C /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v obj_dir.opt/Vtop
make: Entering directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v'
verilator +define+MEM_ADDRESS_WIDTH=14 +define+BRAM_RUNTIME_INIT+SIMULATION -CFLAGS -DVL_USER_FINISH -Wno-fatal -CFLAGS "-I /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v" --prefix Vtop --cc --exe  --Mdir obj_dir.opt --x-assign fast --x-initial fast --noassert -O3 -CFLAGS '-O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector ' -LDFLAGS '-O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector ' rvcore.verilator.cpp top.v
make -C obj_dir.opt -f Vtop.mk Vtop
make[1]: Entering directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt'
g++-9  -I.  -MMD -I/usr/local/share/verilator/include -I/usr/local/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=0 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow     -DVL_USER_FINISH -I /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector   -c -o rvcore.o ../rvcore.verilator.cpp
g++-9  -I.  -MMD -I/usr/local/share/verilator/include -I/usr/local/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=0 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow     -DVL_USER_FINISH -I /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector   -c -o verilated.o /usr/local/share/verilator/include/verilated.cpp
g++-9  -I.  -MMD -I/usr/local/share/verilator/include -I/usr/local/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=0 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow     -DVL_USER_FINISH -I /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector   -c -o verilated_dpi.o /usr/local/share/verilator/include/verilated_dpi.cpp
/usr/bin/perl /usr/local/share/verilator/bin/verilator_includer -DVL_INCLUDE_OPT=include Vtop.cpp Vtop_top.cpp Vtop_rv32.cpp > Vtop__ALLcls.cpp
g++-9  -I.  -MMD -I/usr/local/share/verilator/include -I/usr/local/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=0 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow     -DVL_USER_FINISH -I /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector   -c -o Vtop__ALLcls.o Vtop__ALLcls.cpp
/usr/bin/perl /usr/local/share/verilator/bin/verilator_includer -DVL_INCLUDE_OPT=include Vtop__Dpi.cpp Vtop__Syms.cpp > Vtop__ALLsup.cpp
g++-9  -I.  -MMD -I/usr/local/share/verilator/include -I/usr/local/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=0 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow     -DVL_USER_FINISH -I /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector   -c -o Vtop__ALLsup.o Vtop__ALLsup.cpp
ar -cr Vtop__ALL.a Vtop__ALLcls.o Vtop__ALLsup.o
ranlib Vtop__ALL.a
g++    rvcore.o verilated.o verilated_dpi.o Vtop__ALL.a   -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector  -o Vtop -lm -lstdc++ 
make[1]: Leaving directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt'
make: Leaving directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v'
+ bench g++-9 verilator rv32i-rvbench_median /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_median.vmh -1
+ compiler=g++-9
+ simulator=verilator
+ input=rv32i-rvbench_median
+ export 'TIMEFORMAT=>> g++-9	verilator	rv32i-rvbench_median	real: %3R	user: %3U	sys: %3S'
+ TIMEFORMAT='>> g++-9	verilator	rv32i-rvbench_median	real: %3R	user: %3U	sys: %3S'
+ echo '<< verilator rv32i-rvbench_median'
<< verilator rv32i-rvbench_median
++ seq 1 10
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_median.vmh -1
  PASS
>> g++-9	verilator	rv32i-rvbench_median	real: 0.028	user: 0.028	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_median.vmh -1
  PASS
>> g++-9	verilator	rv32i-rvbench_median	real: 0.026	user: 0.026	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_median.vmh -1
  PASS
>> g++-9	verilator	rv32i-rvbench_median	real: 0.027	user: 0.027	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_median.vmh -1
  PASS
>> g++-9	verilator	rv32i-rvbench_median	real: 0.029	user: 0.029	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_median.vmh -1
  PASS
>> g++-9	verilator	rv32i-rvbench_median	real: 0.028	user: 0.028	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_median.vmh -1
  PASS
>> g++-9	verilator	rv32i-rvbench_median	real: 0.027	user: 0.027	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_median.vmh -1
  PASS
>> g++-9	verilator	rv32i-rvbench_median	real: 0.027	user: 0.023	sys: 0.004
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_median.vmh -1
  PASS
>> g++-9	verilator	rv32i-rvbench_median	real: 0.028	user: 0.028	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_median.vmh -1
  PASS
>> g++-9	verilator	rv32i-rvbench_median	real: 0.029	user: 0.029	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_median.vmh -1
  PASS
>> g++-9	verilator	rv32i-rvbench_median	real: 0.029	user: 0.021	sys: 0.007
+ for compiler in "clang++" "g++-9" "g++-10"
+ for simulator in ${@:3}
+ bench_rv_1 g++-10 cuttlesim rv32i rvbench_median
+ compiler=g++-10
+ simulator=cuttlesim
+ design=rv32i
+ test=rvbench_median
++ realpath ../examples/rv/_objects/rv32i.v/
+ base=/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v
++ realpath ../examples/rv/tests/_build/rv32i/integ/
+ tests=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ
+ b='bench g++-10 cuttlesim rv32i-rvbench_median'
+ make -C /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v clean
make: Entering directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v'
rm -rf obj_dir.opt
rm -rf obj_dir.trace
rm -f rvcore.verilator.vcd
rm -f rvcore.cuttlesim.opt
rm -f rvcore.cuttlesim.debug
rm -f rvcore.cuttlesim.perf
rm -f rvcore.cuttlesim.cov
rm -f rvcore.cuttlesim.s
rm -f rvcore.cuttlesim.out
rm -f rvcore.cuttlesim.vcd
rm -f rvcore.cuttlesim.perf.data
rm -f rvcore.cuttlesim.callgrind
rm -fr rvcore.cuttlesim.rr
rm -f *.gcov
rm -f top_ice40_usb.json
rm -f top_ice40_usb.json.log
rm -f top_ice40_usb.asc
rm -f top_ice40_usb.bin
rm -f top_ice40_usb.rpt
rm -f top_ice40_usb.json.v
make: Leaving directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v'
+ case $simulator in
+ make CXX=g++-10 -C /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v rvcore.cuttlesim.opt
make: Entering directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v'
g++-10 --std=c++17  -Wall -Wextra '-DSIM_VCD_SCOPES={"TOP", "top", "rv_core",}' -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector rvcore.cuttlesim.cpp -o "rvcore.cuttlesim.opt"
In file included from rv32.hpp:10,
                 from rvcore.cuttlesim.cpp:5:
cuttlesim.hpp:87:102: note: ‘#pragma message: Bignum truncation is broken in Boost < 1.68; if you run into issues, try upgrading.’
   87 | #pragma message("Bignum truncation is broken in Boost < 1.68; if you run into issues, try upgrading.")
      |                                                                                                      ^
make: Leaving directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v'
+ bench g++-10 cuttlesim rv32i-rvbench_median /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_median.rv32 -1
+ compiler=g++-10
+ simulator=cuttlesim
+ input=rv32i-rvbench_median
+ export 'TIMEFORMAT=>> g++-10	cuttlesim	rv32i-rvbench_median	real: %3R	user: %3U	sys: %3S'
+ TIMEFORMAT='>> g++-10	cuttlesim	rv32i-rvbench_median	real: %3R	user: %3U	sys: %3S'
+ echo '<< cuttlesim rv32i-rvbench_median'
<< cuttlesim rv32i-rvbench_median
++ seq 1 10
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_median.rv32 -1
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b0 (0x0, 0); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b0 (0x0, 0); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000111111100110101100 (0x3f9ac, 260524)
rf_x12_a2 = 32'b00000000000000000000101001000000 (0xa40, 2624)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b0 (0x0, 0)
mulState_operand2 = 32'b0 (0x0, 0)
mulState_result = 64'b0 (0x0, 0)
mulState_n_step = 5'b0 (0x0, 0)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000000000000001110110100010000 (0xed10, 60688)
instr_count = 32'b00000000000000000110010101111011 (0x657b, 25979)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b0 (0x0, 0)
>> g++-10	cuttlesim	rv32i-rvbench_median	real: 0.016	user: 0.016	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_median.rv32 -1
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b0 (0x0, 0); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b0 (0x0, 0); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000111111100110101100 (0x3f9ac, 260524)
rf_x12_a2 = 32'b00000000000000000000101001000000 (0xa40, 2624)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b0 (0x0, 0)
mulState_operand2 = 32'b0 (0x0, 0)
mulState_result = 64'b0 (0x0, 0)
mulState_n_step = 5'b0 (0x0, 0)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000000000000001110110100010000 (0xed10, 60688)
instr_count = 32'b00000000000000000110010101111011 (0x657b, 25979)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b0 (0x0, 0)
>> g++-10	cuttlesim	rv32i-rvbench_median	real: 0.016	user: 0.015	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_median.rv32 -1
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b0 (0x0, 0); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b0 (0x0, 0); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000111111100110101100 (0x3f9ac, 260524)
rf_x12_a2 = 32'b00000000000000000000101001000000 (0xa40, 2624)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b0 (0x0, 0)
mulState_operand2 = 32'b0 (0x0, 0)
mulState_result = 64'b0 (0x0, 0)
mulState_n_step = 5'b0 (0x0, 0)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000000000000001110110100010000 (0xed10, 60688)
instr_count = 32'b00000000000000000110010101111011 (0x657b, 25979)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b0 (0x0, 0)
>> g++-10	cuttlesim	rv32i-rvbench_median	real: 0.017	user: 0.017	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_median.rv32 -1
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b0 (0x0, 0); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b0 (0x0, 0); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000111111100110101100 (0x3f9ac, 260524)
rf_x12_a2 = 32'b00000000000000000000101001000000 (0xa40, 2624)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b0 (0x0, 0)
mulState_operand2 = 32'b0 (0x0, 0)
mulState_result = 64'b0 (0x0, 0)
mulState_n_step = 5'b0 (0x0, 0)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000000000000001110110100010000 (0xed10, 60688)
instr_count = 32'b00000000000000000110010101111011 (0x657b, 25979)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b0 (0x0, 0)
>> g++-10	cuttlesim	rv32i-rvbench_median	real: 0.018	user: 0.012	sys: 0.003
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_median.rv32 -1
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b0 (0x0, 0); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b0 (0x0, 0); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000111111100110101100 (0x3f9ac, 260524)
rf_x12_a2 = 32'b00000000000000000000101001000000 (0xa40, 2624)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b0 (0x0, 0)
mulState_operand2 = 32'b0 (0x0, 0)
mulState_result = 64'b0 (0x0, 0)
mulState_n_step = 5'b0 (0x0, 0)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000000000000001110110100010000 (0xed10, 60688)
instr_count = 32'b00000000000000000110010101111011 (0x657b, 25979)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b0 (0x0, 0)
>> g++-10	cuttlesim	rv32i-rvbench_median	real: 0.016	user: 0.016	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_median.rv32 -1
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b0 (0x0, 0); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b0 (0x0, 0); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000111111100110101100 (0x3f9ac, 260524)
rf_x12_a2 = 32'b00000000000000000000101001000000 (0xa40, 2624)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b0 (0x0, 0)
mulState_operand2 = 32'b0 (0x0, 0)
mulState_result = 64'b0 (0x0, 0)
mulState_n_step = 5'b0 (0x0, 0)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000000000000001110110100010000 (0xed10, 60688)
instr_count = 32'b00000000000000000110010101111011 (0x657b, 25979)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b0 (0x0, 0)
>> g++-10	cuttlesim	rv32i-rvbench_median	real: 0.017	user: 0.015	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_median.rv32 -1
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b0 (0x0, 0); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b0 (0x0, 0); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000111111100110101100 (0x3f9ac, 260524)
rf_x12_a2 = 32'b00000000000000000000101001000000 (0xa40, 2624)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b0 (0x0, 0)
mulState_operand2 = 32'b0 (0x0, 0)
mulState_result = 64'b0 (0x0, 0)
mulState_n_step = 5'b0 (0x0, 0)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000000000000001110110100010000 (0xed10, 60688)
instr_count = 32'b00000000000000000110010101111011 (0x657b, 25979)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b0 (0x0, 0)
>> g++-10	cuttlesim	rv32i-rvbench_median	real: 0.056	user: 0.016	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_median.rv32 -1
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b0 (0x0, 0); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b0 (0x0, 0); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000111111100110101100 (0x3f9ac, 260524)
rf_x12_a2 = 32'b00000000000000000000101001000000 (0xa40, 2624)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b0 (0x0, 0)
mulState_operand2 = 32'b0 (0x0, 0)
mulState_result = 64'b0 (0x0, 0)
mulState_n_step = 5'b0 (0x0, 0)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000000000000001110110100010000 (0xed10, 60688)
instr_count = 32'b00000000000000000110010101111011 (0x657b, 25979)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b0 (0x0, 0)
>> g++-10	cuttlesim	rv32i-rvbench_median	real: 0.052	user: 0.019	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_median.rv32 -1
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b0 (0x0, 0); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b0 (0x0, 0); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000111111100110101100 (0x3f9ac, 260524)
rf_x12_a2 = 32'b00000000000000000000101001000000 (0xa40, 2624)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b0 (0x0, 0)
mulState_operand2 = 32'b0 (0x0, 0)
mulState_result = 64'b0 (0x0, 0)
mulState_n_step = 5'b0 (0x0, 0)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000000000000001110110100010000 (0xed10, 60688)
instr_count = 32'b00000000000000000110010101111011 (0x657b, 25979)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b0 (0x0, 0)
>> g++-10	cuttlesim	rv32i-rvbench_median	real: 0.023	user: 0.023	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_median.rv32 -1
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b0 (0x0, 0); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b0 (0x0, 0); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000111111100110101100 (0x3f9ac, 260524)
rf_x12_a2 = 32'b00000000000000000000101001000000 (0xa40, 2624)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b0 (0x0, 0)
mulState_operand2 = 32'b0 (0x0, 0)
mulState_result = 64'b0 (0x0, 0)
mulState_n_step = 5'b0 (0x0, 0)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000000000000001110110100010000 (0xed10, 60688)
instr_count = 32'b00000000000000000110010101111011 (0x657b, 25979)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b0 (0x0, 0)
>> g++-10	cuttlesim	rv32i-rvbench_median	real: 0.015	user: 0.015	sys: 0.000
+ for simulator in ${@:3}
+ bench_rv_1 g++-10 verilator rv32i rvbench_median
+ compiler=g++-10
+ simulator=verilator
+ design=rv32i
+ test=rvbench_median
++ realpath ../examples/rv/_objects/rv32i.v/
+ base=/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v
++ realpath ../examples/rv/tests/_build/rv32i/integ/
+ tests=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ
+ b='bench g++-10 verilator rv32i-rvbench_median'
+ make -C /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v clean
make: Entering directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v'
rm -rf obj_dir.opt
rm -rf obj_dir.trace
rm -f rvcore.verilator.vcd
rm -f rvcore.cuttlesim.opt
rm -f rvcore.cuttlesim.debug
rm -f rvcore.cuttlesim.perf
rm -f rvcore.cuttlesim.cov
rm -f rvcore.cuttlesim.s
rm -f rvcore.cuttlesim.out
rm -f rvcore.cuttlesim.vcd
rm -f rvcore.cuttlesim.perf.data
rm -f rvcore.cuttlesim.callgrind
rm -fr rvcore.cuttlesim.rr
rm -f *.gcov
rm -f top_ice40_usb.json
rm -f top_ice40_usb.json.log
rm -f top_ice40_usb.asc
rm -f top_ice40_usb.bin
rm -f top_ice40_usb.rpt
rm -f top_ice40_usb.json.v
make: Leaving directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v'
+ case $simulator in
+ make CXX=g++-10 -C /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v obj_dir.opt/Vtop
make: Entering directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v'
verilator +define+MEM_ADDRESS_WIDTH=14 +define+BRAM_RUNTIME_INIT+SIMULATION -CFLAGS -DVL_USER_FINISH -Wno-fatal -CFLAGS "-I /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v" --prefix Vtop --cc --exe  --Mdir obj_dir.opt --x-assign fast --x-initial fast --noassert -O3 -CFLAGS '-O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector ' -LDFLAGS '-O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector ' rvcore.verilator.cpp top.v
make -C obj_dir.opt -f Vtop.mk Vtop
make[1]: Entering directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt'
g++-10  -I.  -MMD -I/usr/local/share/verilator/include -I/usr/local/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=0 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow     -DVL_USER_FINISH -I /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector   -c -o rvcore.o ../rvcore.verilator.cpp
g++-10  -I.  -MMD -I/usr/local/share/verilator/include -I/usr/local/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=0 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow     -DVL_USER_FINISH -I /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector   -c -o verilated.o /usr/local/share/verilator/include/verilated.cpp
g++-10  -I.  -MMD -I/usr/local/share/verilator/include -I/usr/local/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=0 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow     -DVL_USER_FINISH -I /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector   -c -o verilated_dpi.o /usr/local/share/verilator/include/verilated_dpi.cpp
/usr/bin/perl /usr/local/share/verilator/bin/verilator_includer -DVL_INCLUDE_OPT=include Vtop.cpp Vtop_top.cpp Vtop_rv32.cpp > Vtop__ALLcls.cpp
g++-10  -I.  -MMD -I/usr/local/share/verilator/include -I/usr/local/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=0 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow     -DVL_USER_FINISH -I /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector   -c -o Vtop__ALLcls.o Vtop__ALLcls.cpp
/usr/bin/perl /usr/local/share/verilator/bin/verilator_includer -DVL_INCLUDE_OPT=include Vtop__Dpi.cpp Vtop__Syms.cpp > Vtop__ALLsup.cpp
g++-10  -I.  -MMD -I/usr/local/share/verilator/include -I/usr/local/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=0 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow     -DVL_USER_FINISH -I /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector   -c -o Vtop__ALLsup.o Vtop__ALLsup.cpp
ar -cr Vtop__ALL.a Vtop__ALLcls.o Vtop__ALLsup.o
ranlib Vtop__ALL.a
g++    rvcore.o verilated.o verilated_dpi.o Vtop__ALL.a   -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector  -o Vtop -lm -lstdc++ 
make[1]: Leaving directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt'
make: Leaving directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v'
+ bench g++-10 verilator rv32i-rvbench_median /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_median.vmh -1
+ compiler=g++-10
+ simulator=verilator
+ input=rv32i-rvbench_median
+ export 'TIMEFORMAT=>> g++-10	verilator	rv32i-rvbench_median	real: %3R	user: %3U	sys: %3S'
+ TIMEFORMAT='>> g++-10	verilator	rv32i-rvbench_median	real: %3R	user: %3U	sys: %3S'
+ echo '<< verilator rv32i-rvbench_median'
<< verilator rv32i-rvbench_median
++ seq 1 10
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_median.vmh -1
  PASS
>> g++-10	verilator	rv32i-rvbench_median	real: 0.032	user: 0.032	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_median.vmh -1
  PASS
>> g++-10	verilator	rv32i-rvbench_median	real: 0.027	user: 0.027	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_median.vmh -1
  PASS
>> g++-10	verilator	rv32i-rvbench_median	real: 0.029	user: 0.029	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_median.vmh -1
  PASS
>> g++-10	verilator	rv32i-rvbench_median	real: 0.026	user: 0.026	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_median.vmh -1
  PASS
>> g++-10	verilator	rv32i-rvbench_median	real: 0.028	user: 0.028	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_median.vmh -1
  PASS
>> g++-10	verilator	rv32i-rvbench_median	real: 0.029	user: 0.029	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_median.vmh -1
  PASS
>> g++-10	verilator	rv32i-rvbench_median	real: 0.027	user: 0.027	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_median.vmh -1
  PASS
>> g++-10	verilator	rv32i-rvbench_median	real: 0.029	user: 0.029	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_median.vmh -1
  PASS
>> g++-10	verilator	rv32i-rvbench_median	real: 0.026	user: 0.026	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/rvbench_median.vmh -1
  PASS
>> g++-10	verilator	rv32i-rvbench_median	real: 0.026	user: 0.026	sys: 0.000
+ bench_rv rv32i primes cuttlesim verilator
+ for compiler in "clang++" "g++-9" "g++-10"
+ for simulator in ${@:3}
+ bench_rv_1 clang++ cuttlesim rv32i primes
+ compiler=clang++
+ simulator=cuttlesim
+ design=rv32i
+ test=primes
++ realpath ../examples/rv/_objects/rv32i.v/
+ base=/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v
++ realpath ../examples/rv/tests/_build/rv32i/integ/
+ tests=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ
+ b='bench clang++ cuttlesim rv32i-primes'
+ make -C /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v clean
make: Entering directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v'
rm -rf obj_dir.opt
rm -rf obj_dir.trace
rm -f rvcore.verilator.vcd
rm -f rvcore.cuttlesim.opt
rm -f rvcore.cuttlesim.debug
rm -f rvcore.cuttlesim.perf
rm -f rvcore.cuttlesim.cov
rm -f rvcore.cuttlesim.s
rm -f rvcore.cuttlesim.out
rm -f rvcore.cuttlesim.vcd
rm -f rvcore.cuttlesim.perf.data
rm -f rvcore.cuttlesim.callgrind
rm -fr rvcore.cuttlesim.rr
rm -f *.gcov
rm -f top_ice40_usb.json
rm -f top_ice40_usb.json.log
rm -f top_ice40_usb.asc
rm -f top_ice40_usb.bin
rm -f top_ice40_usb.rpt
rm -f top_ice40_usb.json.v
make: Leaving directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v'
+ case $simulator in
+ make CXX=clang++ -C /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v rvcore.cuttlesim.opt
make: Entering directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v'
clang++ --std=c++17  -Wall -Wextra '-DSIM_VCD_SCOPES={"TOP", "top", "rv_core",}' -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector rvcore.cuttlesim.cpp -o "rvcore.cuttlesim.opt"
In file included from rvcore.cuttlesim.cpp:5:
In file included from ./rv32.hpp:10:
./cuttlesim.hpp:87:9: warning: Bignum truncation is broken in Boost < 1.68; if you run into issues, try upgrading. [-W#pragma-messages]
#pragma message("Bignum truncation is broken in Boost < 1.68; if you run into issues, try upgrading.")
        ^
1 warning generated.
make: Leaving directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v'
+ bench clang++ cuttlesim rv32i-primes /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/primes.rv32 -1
+ compiler=clang++
+ simulator=cuttlesim
+ input=rv32i-primes
+ export 'TIMEFORMAT=>> clang++	cuttlesim	rv32i-primes	real: %3R	user: %3U	sys: %3S'
+ TIMEFORMAT='>> clang++	cuttlesim	rv32i-primes	real: %3R	user: %3U	sys: %3S'
+ echo '<< cuttlesim rv32i-primes'
<< cuttlesim rv32i-primes
++ seq 1 10
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/primes.rv32 -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000000000000011010000 (0xd0, 208)
rf_x12_a2 = 32'b0 (0x0, 0)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b00000000000000000000000000010011 (0x13, 19)
mulState_operand2 = 32'b00000000000000000000000000010011 (0x13, 19)
mulState_result = 64'b0000000000000000000000000000000000000000000000000000000101101001 (0x169, 361)
mulState_n_step = 5'b11111 (0x1f, 31)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001011111101111110110000011 (0x17efd83, 25099651)
instr_count = 32'b00000000101000011111100100001100 (0xa1f90c, 10615052)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b1 (0x1, 1)
>> clang++	cuttlesim	rv32i-primes	real: 3.594	user: 3.590	sys: 0.004
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/primes.rv32 -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000000000000011010000 (0xd0, 208)
rf_x12_a2 = 32'b0 (0x0, 0)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b00000000000000000000000000010011 (0x13, 19)
mulState_operand2 = 32'b00000000000000000000000000010011 (0x13, 19)
mulState_result = 64'b0000000000000000000000000000000000000000000000000000000101101001 (0x169, 361)
mulState_n_step = 5'b11111 (0x1f, 31)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001011111101111110110000011 (0x17efd83, 25099651)
instr_count = 32'b00000000101000011111100100001100 (0xa1f90c, 10615052)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b1 (0x1, 1)
>> clang++	cuttlesim	rv32i-primes	real: 3.644	user: 3.643	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/primes.rv32 -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000000000000011010000 (0xd0, 208)
rf_x12_a2 = 32'b0 (0x0, 0)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b00000000000000000000000000010011 (0x13, 19)
mulState_operand2 = 32'b00000000000000000000000000010011 (0x13, 19)
mulState_result = 64'b0000000000000000000000000000000000000000000000000000000101101001 (0x169, 361)
mulState_n_step = 5'b11111 (0x1f, 31)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001011111101111110110000011 (0x17efd83, 25099651)
instr_count = 32'b00000000101000011111100100001100 (0xa1f90c, 10615052)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b1 (0x1, 1)
>> clang++	cuttlesim	rv32i-primes	real: 3.616	user: 3.594	sys: 0.008
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/primes.rv32 -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000000000000011010000 (0xd0, 208)
rf_x12_a2 = 32'b0 (0x0, 0)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b00000000000000000000000000010011 (0x13, 19)
mulState_operand2 = 32'b00000000000000000000000000010011 (0x13, 19)
mulState_result = 64'b0000000000000000000000000000000000000000000000000000000101101001 (0x169, 361)
mulState_n_step = 5'b11111 (0x1f, 31)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001011111101111110110000011 (0x17efd83, 25099651)
instr_count = 32'b00000000101000011111100100001100 (0xa1f90c, 10615052)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b1 (0x1, 1)
>> clang++	cuttlesim	rv32i-primes	real: 3.608	user: 3.608	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/primes.rv32 -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000000000000011010000 (0xd0, 208)
rf_x12_a2 = 32'b0 (0x0, 0)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b00000000000000000000000000010011 (0x13, 19)
mulState_operand2 = 32'b00000000000000000000000000010011 (0x13, 19)
mulState_result = 64'b0000000000000000000000000000000000000000000000000000000101101001 (0x169, 361)
mulState_n_step = 5'b11111 (0x1f, 31)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001011111101111110110000011 (0x17efd83, 25099651)
instr_count = 32'b00000000101000011111100100001100 (0xa1f90c, 10615052)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b1 (0x1, 1)
>> clang++	cuttlesim	rv32i-primes	real: 3.610	user: 3.606	sys: 0.004
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/primes.rv32 -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000000000000011010000 (0xd0, 208)
rf_x12_a2 = 32'b0 (0x0, 0)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b00000000000000000000000000010011 (0x13, 19)
mulState_operand2 = 32'b00000000000000000000000000010011 (0x13, 19)
mulState_result = 64'b0000000000000000000000000000000000000000000000000000000101101001 (0x169, 361)
mulState_n_step = 5'b11111 (0x1f, 31)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001011111101111110110000011 (0x17efd83, 25099651)
instr_count = 32'b00000000101000011111100100001100 (0xa1f90c, 10615052)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b1 (0x1, 1)
>> clang++	cuttlesim	rv32i-primes	real: 3.808	user: 3.804	sys: 0.004
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/primes.rv32 -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000000000000011010000 (0xd0, 208)
rf_x12_a2 = 32'b0 (0x0, 0)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b00000000000000000000000000010011 (0x13, 19)
mulState_operand2 = 32'b00000000000000000000000000010011 (0x13, 19)
mulState_result = 64'b0000000000000000000000000000000000000000000000000000000101101001 (0x169, 361)
mulState_n_step = 5'b11111 (0x1f, 31)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001011111101111110110000011 (0x17efd83, 25099651)
instr_count = 32'b00000000101000011111100100001100 (0xa1f90c, 10615052)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b1 (0x1, 1)
>> clang++	cuttlesim	rv32i-primes	real: 3.606	user: 3.606	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/primes.rv32 -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000000000000011010000 (0xd0, 208)
rf_x12_a2 = 32'b0 (0x0, 0)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b00000000000000000000000000010011 (0x13, 19)
mulState_operand2 = 32'b00000000000000000000000000010011 (0x13, 19)
mulState_result = 64'b0000000000000000000000000000000000000000000000000000000101101001 (0x169, 361)
mulState_n_step = 5'b11111 (0x1f, 31)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001011111101111110110000011 (0x17efd83, 25099651)
instr_count = 32'b00000000101000011111100100001100 (0xa1f90c, 10615052)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b1 (0x1, 1)
>> clang++	cuttlesim	rv32i-primes	real: 3.632	user: 3.631	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/primes.rv32 -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000000000000011010000 (0xd0, 208)
rf_x12_a2 = 32'b0 (0x0, 0)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b00000000000000000000000000010011 (0x13, 19)
mulState_operand2 = 32'b00000000000000000000000000010011 (0x13, 19)
mulState_result = 64'b0000000000000000000000000000000000000000000000000000000101101001 (0x169, 361)
mulState_n_step = 5'b11111 (0x1f, 31)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001011111101111110110000011 (0x17efd83, 25099651)
instr_count = 32'b00000000101000011111100100001100 (0xa1f90c, 10615052)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b1 (0x1, 1)
>> clang++	cuttlesim	rv32i-primes	real: 3.641	user: 3.611	sys: 0.012
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/primes.rv32 -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000000000000011010000 (0xd0, 208)
rf_x12_a2 = 32'b0 (0x0, 0)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b00000000000000000000000000010011 (0x13, 19)
mulState_operand2 = 32'b00000000000000000000000000010011 (0x13, 19)
mulState_result = 64'b0000000000000000000000000000000000000000000000000000000101101001 (0x169, 361)
mulState_n_step = 5'b11111 (0x1f, 31)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001011111101111110110000011 (0x17efd83, 25099651)
instr_count = 32'b00000000101000011111100100001100 (0xa1f90c, 10615052)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b1 (0x1, 1)
>> clang++	cuttlesim	rv32i-primes	real: 3.565	user: 3.564	sys: 0.000
+ for simulator in ${@:3}
+ bench_rv_1 clang++ verilator rv32i primes
+ compiler=clang++
+ simulator=verilator
+ design=rv32i
+ test=primes
++ realpath ../examples/rv/_objects/rv32i.v/
+ base=/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v
++ realpath ../examples/rv/tests/_build/rv32i/integ/
+ tests=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ
+ b='bench clang++ verilator rv32i-primes'
+ make -C /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v clean
make: Entering directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v'
rm -rf obj_dir.opt
rm -rf obj_dir.trace
rm -f rvcore.verilator.vcd
rm -f rvcore.cuttlesim.opt
rm -f rvcore.cuttlesim.debug
rm -f rvcore.cuttlesim.perf
rm -f rvcore.cuttlesim.cov
rm -f rvcore.cuttlesim.s
rm -f rvcore.cuttlesim.out
rm -f rvcore.cuttlesim.vcd
rm -f rvcore.cuttlesim.perf.data
rm -f rvcore.cuttlesim.callgrind
rm -fr rvcore.cuttlesim.rr
rm -f *.gcov
rm -f top_ice40_usb.json
rm -f top_ice40_usb.json.log
rm -f top_ice40_usb.asc
rm -f top_ice40_usb.bin
rm -f top_ice40_usb.rpt
rm -f top_ice40_usb.json.v
make: Leaving directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v'
+ case $simulator in
+ make CXX=clang++ -C /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v obj_dir.opt/Vtop
make: Entering directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v'
verilator +define+MEM_ADDRESS_WIDTH=14 +define+BRAM_RUNTIME_INIT+SIMULATION -CFLAGS -DVL_USER_FINISH -Wno-fatal -CFLAGS "-I /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v" --prefix Vtop --cc --exe --compiler clang -CFLAGS -fPIC --Mdir obj_dir.opt --x-assign fast --x-initial fast --noassert -O3 -CFLAGS '-O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector ' -LDFLAGS '-O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector ' rvcore.verilator.cpp top.v
make -C obj_dir.opt -f Vtop.mk Vtop
make[1]: Entering directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt'
clang++  -I.  -MMD -I/usr/local/share/verilator/include -I/usr/local/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=0 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow     -DVL_USER_FINISH -I /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v -fPIC -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector   -c -o rvcore.o ../rvcore.verilator.cpp
warning: unknown warning option '-Wno-unused-but-set-variable'; did you mean '-Wno-unused-const-variable'? [-Wunknown-warning-option]
1 warning generated.
clang++  -I.  -MMD -I/usr/local/share/verilator/include -I/usr/local/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=0 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow     -DVL_USER_FINISH -I /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v -fPIC -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector   -c -o verilated.o /usr/local/share/verilator/include/verilated.cpp
warning: unknown warning option '-Wno-unused-but-set-variable'; did you mean '-Wno-unused-const-variable'? [-Wunknown-warning-option]
1 warning generated.
clang++  -I.  -MMD -I/usr/local/share/verilator/include -I/usr/local/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=0 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow     -DVL_USER_FINISH -I /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v -fPIC -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector   -c -o verilated_dpi.o /usr/local/share/verilator/include/verilated_dpi.cpp
warning: unknown warning option '-Wno-unused-but-set-variable'; did you mean '-Wno-unused-const-variable'? [-Wunknown-warning-option]
1 warning generated.
/usr/bin/perl /usr/local/share/verilator/bin/verilator_includer -DVL_INCLUDE_OPT=include Vtop.cpp Vtop_top.cpp Vtop_rv32.cpp > Vtop__ALLcls.cpp
clang++  -I.  -MMD -I/usr/local/share/verilator/include -I/usr/local/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=0 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow     -DVL_USER_FINISH -I /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v -fPIC -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector   -c -o Vtop__ALLcls.o Vtop__ALLcls.cpp
warning: unknown warning option '-Wno-unused-but-set-variable'; did you mean '-Wno-unused-const-variable'? [-Wunknown-warning-option]
1 warning generated.
/usr/bin/perl /usr/local/share/verilator/bin/verilator_includer -DVL_INCLUDE_OPT=include Vtop__Dpi.cpp Vtop__Syms.cpp > Vtop__ALLsup.cpp
clang++  -I.  -MMD -I/usr/local/share/verilator/include -I/usr/local/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=0 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow     -DVL_USER_FINISH -I /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v -fPIC -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector   -c -o Vtop__ALLsup.o Vtop__ALLsup.cpp
warning: unknown warning option '-Wno-unused-but-set-variable'; did you mean '-Wno-unused-const-variable'? [-Wunknown-warning-option]
1 warning generated.
ar -cr Vtop__ALL.a Vtop__ALLcls.o Vtop__ALLsup.o
ranlib Vtop__ALL.a
g++    rvcore.o verilated.o verilated_dpi.o Vtop__ALL.a   -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector  -o Vtop -lm -lstdc++ 
make[1]: Leaving directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt'
make: Leaving directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v'
+ bench clang++ verilator rv32i-primes /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/primes.vmh -1
+ compiler=clang++
+ simulator=verilator
+ input=rv32i-primes
+ export 'TIMEFORMAT=>> clang++	verilator	rv32i-primes	real: %3R	user: %3U	sys: %3S'
+ TIMEFORMAT='>> clang++	verilator	rv32i-primes	real: %3R	user: %3U	sys: %3S'
+ echo '<< verilator rv32i-primes'
<< verilator rv32i-primes
++ seq 1 10
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/primes.vmh -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
>> clang++	verilator	rv32i-primes	real: 8.800	user: 8.788	sys: 0.012
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/primes.vmh -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
>> clang++	verilator	rv32i-primes	real: 8.868	user: 8.851	sys: 0.008
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/primes.vmh -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
>> clang++	verilator	rv32i-primes	real: 8.825	user: 8.825	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/primes.vmh -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
>> clang++	verilator	rv32i-primes	real: 8.880	user: 8.874	sys: 0.004
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/primes.vmh -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
>> clang++	verilator	rv32i-primes	real: 8.857	user: 8.855	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/primes.vmh -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
>> clang++	verilator	rv32i-primes	real: 8.886	user: 8.886	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/primes.vmh -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
>> clang++	verilator	rv32i-primes	real: 8.804	user: 8.804	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/primes.vmh -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
>> clang++	verilator	rv32i-primes	real: 8.757	user: 8.754	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/primes.vmh -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
>> clang++	verilator	rv32i-primes	real: 8.814	user: 8.801	sys: 0.012
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/primes.vmh -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
>> clang++	verilator	rv32i-primes	real: 8.843	user: 8.843	sys: 0.000
+ for compiler in "clang++" "g++-9" "g++-10"
+ for simulator in ${@:3}
+ bench_rv_1 g++-9 cuttlesim rv32i primes
+ compiler=g++-9
+ simulator=cuttlesim
+ design=rv32i
+ test=primes
++ realpath ../examples/rv/_objects/rv32i.v/
+ base=/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v
++ realpath ../examples/rv/tests/_build/rv32i/integ/
+ tests=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ
+ b='bench g++-9 cuttlesim rv32i-primes'
+ make -C /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v clean
make: Entering directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v'
rm -rf obj_dir.opt
rm -rf obj_dir.trace
rm -f rvcore.verilator.vcd
rm -f rvcore.cuttlesim.opt
rm -f rvcore.cuttlesim.debug
rm -f rvcore.cuttlesim.perf
rm -f rvcore.cuttlesim.cov
rm -f rvcore.cuttlesim.s
rm -f rvcore.cuttlesim.out
rm -f rvcore.cuttlesim.vcd
rm -f rvcore.cuttlesim.perf.data
rm -f rvcore.cuttlesim.callgrind
rm -fr rvcore.cuttlesim.rr
rm -f *.gcov
rm -f top_ice40_usb.json
rm -f top_ice40_usb.json.log
rm -f top_ice40_usb.asc
rm -f top_ice40_usb.bin
rm -f top_ice40_usb.rpt
rm -f top_ice40_usb.json.v
make: Leaving directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v'
+ case $simulator in
+ make CXX=g++-9 -C /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v rvcore.cuttlesim.opt
make: Entering directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v'
g++-9 --std=c++17  -Wall -Wextra '-DSIM_VCD_SCOPES={"TOP", "top", "rv_core",}' -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector rvcore.cuttlesim.cpp -o "rvcore.cuttlesim.opt"
In file included from rv32.hpp:10,
                 from rvcore.cuttlesim.cpp:5:
cuttlesim.hpp:87:102: note: #pragma message: Bignum truncation is broken in Boost < 1.68; if you run into issues, try upgrading.
   87 | #pragma message("Bignum truncation is broken in Boost < 1.68; if you run into issues, try upgrading.")
      |                                                                                                      ^
make: Leaving directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v'
+ bench g++-9 cuttlesim rv32i-primes /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/primes.rv32 -1
+ compiler=g++-9
+ simulator=cuttlesim
+ input=rv32i-primes
+ export 'TIMEFORMAT=>> g++-9	cuttlesim	rv32i-primes	real: %3R	user: %3U	sys: %3S'
+ TIMEFORMAT='>> g++-9	cuttlesim	rv32i-primes	real: %3R	user: %3U	sys: %3S'
+ echo '<< cuttlesim rv32i-primes'
<< cuttlesim rv32i-primes
++ seq 1 10
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/primes.rv32 -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000000000000011010000 (0xd0, 208)
rf_x12_a2 = 32'b0 (0x0, 0)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b00000000000000000000000000010011 (0x13, 19)
mulState_operand2 = 32'b00000000000000000000000000010011 (0x13, 19)
mulState_result = 64'b0000000000000000000000000000000000000000000000000000000101101001 (0x169, 361)
mulState_n_step = 5'b11111 (0x1f, 31)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001011111101111110110000011 (0x17efd83, 25099651)
instr_count = 32'b00000000101000011111100100001100 (0xa1f90c, 10615052)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b1 (0x1, 1)
>> g++-9	cuttlesim	rv32i-primes	real: 3.853	user: 3.851	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/primes.rv32 -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000000000000011010000 (0xd0, 208)
rf_x12_a2 = 32'b0 (0x0, 0)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b00000000000000000000000000010011 (0x13, 19)
mulState_operand2 = 32'b00000000000000000000000000010011 (0x13, 19)
mulState_result = 64'b0000000000000000000000000000000000000000000000000000000101101001 (0x169, 361)
mulState_n_step = 5'b11111 (0x1f, 31)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001011111101111110110000011 (0x17efd83, 25099651)
instr_count = 32'b00000000101000011111100100001100 (0xa1f90c, 10615052)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b1 (0x1, 1)
>> g++-9	cuttlesim	rv32i-primes	real: 3.885	user: 3.884	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/primes.rv32 -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000000000000011010000 (0xd0, 208)
rf_x12_a2 = 32'b0 (0x0, 0)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b00000000000000000000000000010011 (0x13, 19)
mulState_operand2 = 32'b00000000000000000000000000010011 (0x13, 19)
mulState_result = 64'b0000000000000000000000000000000000000000000000000000000101101001 (0x169, 361)
mulState_n_step = 5'b11111 (0x1f, 31)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001011111101111110110000011 (0x17efd83, 25099651)
instr_count = 32'b00000000101000011111100100001100 (0xa1f90c, 10615052)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b1 (0x1, 1)
>> g++-9	cuttlesim	rv32i-primes	real: 3.846	user: 3.846	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/primes.rv32 -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000000000000011010000 (0xd0, 208)
rf_x12_a2 = 32'b0 (0x0, 0)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b00000000000000000000000000010011 (0x13, 19)
mulState_operand2 = 32'b00000000000000000000000000010011 (0x13, 19)
mulState_result = 64'b0000000000000000000000000000000000000000000000000000000101101001 (0x169, 361)
mulState_n_step = 5'b11111 (0x1f, 31)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001011111101111110110000011 (0x17efd83, 25099651)
instr_count = 32'b00000000101000011111100100001100 (0xa1f90c, 10615052)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b1 (0x1, 1)
>> g++-9	cuttlesim	rv32i-primes	real: 3.846	user: 3.839	sys: 0.004
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/primes.rv32 -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000000000000011010000 (0xd0, 208)
rf_x12_a2 = 32'b0 (0x0, 0)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b00000000000000000000000000010011 (0x13, 19)
mulState_operand2 = 32'b00000000000000000000000000010011 (0x13, 19)
mulState_result = 64'b0000000000000000000000000000000000000000000000000000000101101001 (0x169, 361)
mulState_n_step = 5'b11111 (0x1f, 31)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001011111101111110110000011 (0x17efd83, 25099651)
instr_count = 32'b00000000101000011111100100001100 (0xa1f90c, 10615052)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b1 (0x1, 1)
>> g++-9	cuttlesim	rv32i-primes	real: 3.861	user: 3.857	sys: 0.004
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/primes.rv32 -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000000000000011010000 (0xd0, 208)
rf_x12_a2 = 32'b0 (0x0, 0)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b00000000000000000000000000010011 (0x13, 19)
mulState_operand2 = 32'b00000000000000000000000000010011 (0x13, 19)
mulState_result = 64'b0000000000000000000000000000000000000000000000000000000101101001 (0x169, 361)
mulState_n_step = 5'b11111 (0x1f, 31)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001011111101111110110000011 (0x17efd83, 25099651)
instr_count = 32'b00000000101000011111100100001100 (0xa1f90c, 10615052)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b1 (0x1, 1)
>> g++-9	cuttlesim	rv32i-primes	real: 3.867	user: 3.863	sys: 0.004
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/primes.rv32 -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000000000000011010000 (0xd0, 208)
rf_x12_a2 = 32'b0 (0x0, 0)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b00000000000000000000000000010011 (0x13, 19)
mulState_operand2 = 32'b00000000000000000000000000010011 (0x13, 19)
mulState_result = 64'b0000000000000000000000000000000000000000000000000000000101101001 (0x169, 361)
mulState_n_step = 5'b11111 (0x1f, 31)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001011111101111110110000011 (0x17efd83, 25099651)
instr_count = 32'b00000000101000011111100100001100 (0xa1f90c, 10615052)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b1 (0x1, 1)
>> g++-9	cuttlesim	rv32i-primes	real: 3.855	user: 3.855	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/primes.rv32 -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000000000000011010000 (0xd0, 208)
rf_x12_a2 = 32'b0 (0x0, 0)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b00000000000000000000000000010011 (0x13, 19)
mulState_operand2 = 32'b00000000000000000000000000010011 (0x13, 19)
mulState_result = 64'b0000000000000000000000000000000000000000000000000000000101101001 (0x169, 361)
mulState_n_step = 5'b11111 (0x1f, 31)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001011111101111110110000011 (0x17efd83, 25099651)
instr_count = 32'b00000000101000011111100100001100 (0xa1f90c, 10615052)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b1 (0x1, 1)
>> g++-9	cuttlesim	rv32i-primes	real: 3.859	user: 3.855	sys: 0.004
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/primes.rv32 -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000000000000011010000 (0xd0, 208)
rf_x12_a2 = 32'b0 (0x0, 0)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b00000000000000000000000000010011 (0x13, 19)
mulState_operand2 = 32'b00000000000000000000000000010011 (0x13, 19)
mulState_result = 64'b0000000000000000000000000000000000000000000000000000000101101001 (0x169, 361)
mulState_n_step = 5'b11111 (0x1f, 31)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001011111101111110110000011 (0x17efd83, 25099651)
instr_count = 32'b00000000101000011111100100001100 (0xa1f90c, 10615052)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b1 (0x1, 1)
>> g++-9	cuttlesim	rv32i-primes	real: 3.844	user: 3.824	sys: 0.016
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/primes.rv32 -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000000000000011010000 (0xd0, 208)
rf_x12_a2 = 32'b0 (0x0, 0)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b00000000000000000000000000010011 (0x13, 19)
mulState_operand2 = 32'b00000000000000000000000000010011 (0x13, 19)
mulState_result = 64'b0000000000000000000000000000000000000000000000000000000101101001 (0x169, 361)
mulState_n_step = 5'b11111 (0x1f, 31)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001011111101111110110000011 (0x17efd83, 25099651)
instr_count = 32'b00000000101000011111100100001100 (0xa1f90c, 10615052)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b1 (0x1, 1)
>> g++-9	cuttlesim	rv32i-primes	real: 3.862	user: 3.861	sys: 0.000
+ for simulator in ${@:3}
+ bench_rv_1 g++-9 verilator rv32i primes
+ compiler=g++-9
+ simulator=verilator
+ design=rv32i
+ test=primes
++ realpath ../examples/rv/_objects/rv32i.v/
+ base=/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v
++ realpath ../examples/rv/tests/_build/rv32i/integ/
+ tests=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ
+ b='bench g++-9 verilator rv32i-primes'
+ make -C /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v clean
make: Entering directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v'
rm -rf obj_dir.opt
rm -rf obj_dir.trace
rm -f rvcore.verilator.vcd
rm -f rvcore.cuttlesim.opt
rm -f rvcore.cuttlesim.debug
rm -f rvcore.cuttlesim.perf
rm -f rvcore.cuttlesim.cov
rm -f rvcore.cuttlesim.s
rm -f rvcore.cuttlesim.out
rm -f rvcore.cuttlesim.vcd
rm -f rvcore.cuttlesim.perf.data
rm -f rvcore.cuttlesim.callgrind
rm -fr rvcore.cuttlesim.rr
rm -f *.gcov
rm -f top_ice40_usb.json
rm -f top_ice40_usb.json.log
rm -f top_ice40_usb.asc
rm -f top_ice40_usb.bin
rm -f top_ice40_usb.rpt
rm -f top_ice40_usb.json.v
make: Leaving directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v'
+ case $simulator in
+ make CXX=g++-9 -C /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v obj_dir.opt/Vtop
make: Entering directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v'
verilator +define+MEM_ADDRESS_WIDTH=14 +define+BRAM_RUNTIME_INIT+SIMULATION -CFLAGS -DVL_USER_FINISH -Wno-fatal -CFLAGS "-I /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v" --prefix Vtop --cc --exe  --Mdir obj_dir.opt --x-assign fast --x-initial fast --noassert -O3 -CFLAGS '-O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector ' -LDFLAGS '-O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector ' rvcore.verilator.cpp top.v
make -C obj_dir.opt -f Vtop.mk Vtop
make[1]: Entering directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt'
g++-9  -I.  -MMD -I/usr/local/share/verilator/include -I/usr/local/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=0 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow     -DVL_USER_FINISH -I /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector   -c -o rvcore.o ../rvcore.verilator.cpp
g++-9  -I.  -MMD -I/usr/local/share/verilator/include -I/usr/local/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=0 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow     -DVL_USER_FINISH -I /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector   -c -o verilated.o /usr/local/share/verilator/include/verilated.cpp
g++-9  -I.  -MMD -I/usr/local/share/verilator/include -I/usr/local/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=0 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow     -DVL_USER_FINISH -I /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector   -c -o verilated_dpi.o /usr/local/share/verilator/include/verilated_dpi.cpp
/usr/bin/perl /usr/local/share/verilator/bin/verilator_includer -DVL_INCLUDE_OPT=include Vtop.cpp Vtop_top.cpp Vtop_rv32.cpp > Vtop__ALLcls.cpp
g++-9  -I.  -MMD -I/usr/local/share/verilator/include -I/usr/local/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=0 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow     -DVL_USER_FINISH -I /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector   -c -o Vtop__ALLcls.o Vtop__ALLcls.cpp
/usr/bin/perl /usr/local/share/verilator/bin/verilator_includer -DVL_INCLUDE_OPT=include Vtop__Dpi.cpp Vtop__Syms.cpp > Vtop__ALLsup.cpp
g++-9  -I.  -MMD -I/usr/local/share/verilator/include -I/usr/local/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=0 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow     -DVL_USER_FINISH -I /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector   -c -o Vtop__ALLsup.o Vtop__ALLsup.cpp
ar -cr Vtop__ALL.a Vtop__ALLcls.o Vtop__ALLsup.o
ranlib Vtop__ALL.a
g++    rvcore.o verilated.o verilated_dpi.o Vtop__ALL.a   -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector  -o Vtop -lm -lstdc++ 
make[1]: Leaving directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt'
make: Leaving directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v'
+ bench g++-9 verilator rv32i-primes /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/primes.vmh -1
+ compiler=g++-9
+ simulator=verilator
+ input=rv32i-primes
+ export 'TIMEFORMAT=>> g++-9	verilator	rv32i-primes	real: %3R	user: %3U	sys: %3S'
+ TIMEFORMAT='>> g++-9	verilator	rv32i-primes	real: %3R	user: %3U	sys: %3S'
+ echo '<< verilator rv32i-primes'
<< verilator rv32i-primes
++ seq 1 10
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/primes.vmh -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
>> g++-9	verilator	rv32i-primes	real: 10.005	user: 10.004	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/primes.vmh -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
>> g++-9	verilator	rv32i-primes	real: 9.967	user: 9.965	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/primes.vmh -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
>> g++-9	verilator	rv32i-primes	real: 9.984	user: 9.984	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/primes.vmh -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
>> g++-9	verilator	rv32i-primes	real: 9.976	user: 9.955	sys: 0.008
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/primes.vmh -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
>> g++-9	verilator	rv32i-primes	real: 10.045	user: 10.044	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/primes.vmh -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
>> g++-9	verilator	rv32i-primes	real: 10.394	user: 10.390	sys: 0.004
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/primes.vmh -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
>> g++-9	verilator	rv32i-primes	real: 9.975	user: 9.970	sys: 0.004
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/primes.vmh -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
>> g++-9	verilator	rv32i-primes	real: 10.257	user: 10.257	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/primes.vmh -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
>> g++-9	verilator	rv32i-primes	real: 10.700	user: 10.688	sys: 0.004
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/primes.vmh -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
>> g++-9	verilator	rv32i-primes	real: 10.535	user: 10.535	sys: 0.000
+ for compiler in "clang++" "g++-9" "g++-10"
+ for simulator in ${@:3}
+ bench_rv_1 g++-10 cuttlesim rv32i primes
+ compiler=g++-10
+ simulator=cuttlesim
+ design=rv32i
+ test=primes
++ realpath ../examples/rv/_objects/rv32i.v/
+ base=/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v
++ realpath ../examples/rv/tests/_build/rv32i/integ/
+ tests=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ
+ b='bench g++-10 cuttlesim rv32i-primes'
+ make -C /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v clean
make: Entering directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v'
rm -rf obj_dir.opt
rm -rf obj_dir.trace
rm -f rvcore.verilator.vcd
rm -f rvcore.cuttlesim.opt
rm -f rvcore.cuttlesim.debug
rm -f rvcore.cuttlesim.perf
rm -f rvcore.cuttlesim.cov
rm -f rvcore.cuttlesim.s
rm -f rvcore.cuttlesim.out
rm -f rvcore.cuttlesim.vcd
rm -f rvcore.cuttlesim.perf.data
rm -f rvcore.cuttlesim.callgrind
rm -fr rvcore.cuttlesim.rr
rm -f *.gcov
rm -f top_ice40_usb.json
rm -f top_ice40_usb.json.log
rm -f top_ice40_usb.asc
rm -f top_ice40_usb.bin
rm -f top_ice40_usb.rpt
rm -f top_ice40_usb.json.v
make: Leaving directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v'
+ case $simulator in
+ make CXX=g++-10 -C /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v rvcore.cuttlesim.opt
make: Entering directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v'
g++-10 --std=c++17  -Wall -Wextra '-DSIM_VCD_SCOPES={"TOP", "top", "rv_core",}' -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector rvcore.cuttlesim.cpp -o "rvcore.cuttlesim.opt"
In file included from rv32.hpp:10,
                 from rvcore.cuttlesim.cpp:5:
cuttlesim.hpp:87:102: note: ‘#pragma message: Bignum truncation is broken in Boost < 1.68; if you run into issues, try upgrading.’
   87 | #pragma message("Bignum truncation is broken in Boost < 1.68; if you run into issues, try upgrading.")
      |                                                                                                      ^
make: Leaving directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v'
+ bench g++-10 cuttlesim rv32i-primes /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/primes.rv32 -1
+ compiler=g++-10
+ simulator=cuttlesim
+ input=rv32i-primes
+ export 'TIMEFORMAT=>> g++-10	cuttlesim	rv32i-primes	real: %3R	user: %3U	sys: %3S'
+ TIMEFORMAT='>> g++-10	cuttlesim	rv32i-primes	real: %3R	user: %3U	sys: %3S'
+ echo '<< cuttlesim rv32i-primes'
<< cuttlesim rv32i-primes
++ seq 1 10
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/primes.rv32 -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000000000000011010000 (0xd0, 208)
rf_x12_a2 = 32'b0 (0x0, 0)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b00000000000000000000000000010011 (0x13, 19)
mulState_operand2 = 32'b00000000000000000000000000010011 (0x13, 19)
mulState_result = 64'b0000000000000000000000000000000000000000000000000000000101101001 (0x169, 361)
mulState_n_step = 5'b11111 (0x1f, 31)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001011111101111110110000011 (0x17efd83, 25099651)
instr_count = 32'b00000000101000011111100100001100 (0xa1f90c, 10615052)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b1 (0x1, 1)
>> g++-10	cuttlesim	rv32i-primes	real: 5.807	user: 5.776	sys: 0.004
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/primes.rv32 -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000000000000011010000 (0xd0, 208)
rf_x12_a2 = 32'b0 (0x0, 0)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b00000000000000000000000000010011 (0x13, 19)
mulState_operand2 = 32'b00000000000000000000000000010011 (0x13, 19)
mulState_result = 64'b0000000000000000000000000000000000000000000000000000000101101001 (0x169, 361)
mulState_n_step = 5'b11111 (0x1f, 31)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001011111101111110110000011 (0x17efd83, 25099651)
instr_count = 32'b00000000101000011111100100001100 (0xa1f90c, 10615052)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b1 (0x1, 1)
>> g++-10	cuttlesim	rv32i-primes	real: 5.788	user: 5.783	sys: 0.004
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/primes.rv32 -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000000000000011010000 (0xd0, 208)
rf_x12_a2 = 32'b0 (0x0, 0)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b00000000000000000000000000010011 (0x13, 19)
mulState_operand2 = 32'b00000000000000000000000000010011 (0x13, 19)
mulState_result = 64'b0000000000000000000000000000000000000000000000000000000101101001 (0x169, 361)
mulState_n_step = 5'b11111 (0x1f, 31)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001011111101111110110000011 (0x17efd83, 25099651)
instr_count = 32'b00000000101000011111100100001100 (0xa1f90c, 10615052)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b1 (0x1, 1)
>> g++-10	cuttlesim	rv32i-primes	real: 5.746	user: 5.744	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/primes.rv32 -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000000000000011010000 (0xd0, 208)
rf_x12_a2 = 32'b0 (0x0, 0)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b00000000000000000000000000010011 (0x13, 19)
mulState_operand2 = 32'b00000000000000000000000000010011 (0x13, 19)
mulState_result = 64'b0000000000000000000000000000000000000000000000000000000101101001 (0x169, 361)
mulState_n_step = 5'b11111 (0x1f, 31)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001011111101111110110000011 (0x17efd83, 25099651)
instr_count = 32'b00000000101000011111100100001100 (0xa1f90c, 10615052)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b1 (0x1, 1)
>> g++-10	cuttlesim	rv32i-primes	real: 5.802	user: 5.786	sys: 0.012
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/primes.rv32 -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000000000000011010000 (0xd0, 208)
rf_x12_a2 = 32'b0 (0x0, 0)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b00000000000000000000000000010011 (0x13, 19)
mulState_operand2 = 32'b00000000000000000000000000010011 (0x13, 19)
mulState_result = 64'b0000000000000000000000000000000000000000000000000000000101101001 (0x169, 361)
mulState_n_step = 5'b11111 (0x1f, 31)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001011111101111110110000011 (0x17efd83, 25099651)
instr_count = 32'b00000000101000011111100100001100 (0xa1f90c, 10615052)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b1 (0x1, 1)
>> g++-10	cuttlesim	rv32i-primes	real: 5.761	user: 5.752	sys: 0.008
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/primes.rv32 -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000000000000011010000 (0xd0, 208)
rf_x12_a2 = 32'b0 (0x0, 0)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b00000000000000000000000000010011 (0x13, 19)
mulState_operand2 = 32'b00000000000000000000000000010011 (0x13, 19)
mulState_result = 64'b0000000000000000000000000000000000000000000000000000000101101001 (0x169, 361)
mulState_n_step = 5'b11111 (0x1f, 31)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001011111101111110110000011 (0x17efd83, 25099651)
instr_count = 32'b00000000101000011111100100001100 (0xa1f90c, 10615052)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b1 (0x1, 1)
>> g++-10	cuttlesim	rv32i-primes	real: 5.813	user: 5.804	sys: 0.008
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/primes.rv32 -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000000000000011010000 (0xd0, 208)
rf_x12_a2 = 32'b0 (0x0, 0)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b00000000000000000000000000010011 (0x13, 19)
mulState_operand2 = 32'b00000000000000000000000000010011 (0x13, 19)
mulState_result = 64'b0000000000000000000000000000000000000000000000000000000101101001 (0x169, 361)
mulState_n_step = 5'b11111 (0x1f, 31)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001011111101111110110000011 (0x17efd83, 25099651)
instr_count = 32'b00000000101000011111100100001100 (0xa1f90c, 10615052)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b1 (0x1, 1)
>> g++-10	cuttlesim	rv32i-primes	real: 5.738	user: 5.738	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/primes.rv32 -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000000000000011010000 (0xd0, 208)
rf_x12_a2 = 32'b0 (0x0, 0)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b00000000000000000000000000010011 (0x13, 19)
mulState_operand2 = 32'b00000000000000000000000000010011 (0x13, 19)
mulState_result = 64'b0000000000000000000000000000000000000000000000000000000101101001 (0x169, 361)
mulState_n_step = 5'b11111 (0x1f, 31)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001011111101111110110000011 (0x17efd83, 25099651)
instr_count = 32'b00000000101000011111100100001100 (0xa1f90c, 10615052)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b1 (0x1, 1)
>> g++-10	cuttlesim	rv32i-primes	real: 5.675	user: 5.667	sys: 0.008
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/primes.rv32 -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000000000000011010000 (0xd0, 208)
rf_x12_a2 = 32'b0 (0x0, 0)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b00000000000000000000000000010011 (0x13, 19)
mulState_operand2 = 32'b00000000000000000000000000010011 (0x13, 19)
mulState_result = 64'b0000000000000000000000000000000000000000000000000000000101101001 (0x169, 361)
mulState_n_step = 5'b11111 (0x1f, 31)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001011111101111110110000011 (0x17efd83, 25099651)
instr_count = 32'b00000000101000011111100100001100 (0xa1f90c, 10615052)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b1 (0x1, 1)
>> g++-10	cuttlesim	rv32i-primes	real: 5.762	user: 5.600	sys: 0.024
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/primes.rv32 -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000000000000011010000 (0xd0, 208)
rf_x12_a2 = 32'b0 (0x0, 0)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b00000000000000000000000000010011 (0x13, 19)
mulState_operand2 = 32'b00000000000000000000000000010011 (0x13, 19)
mulState_result = 64'b0000000000000000000000000000000000000000000000000000000101101001 (0x169, 361)
mulState_n_step = 5'b11111 (0x1f, 31)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001011111101111110110000011 (0x17efd83, 25099651)
instr_count = 32'b00000000101000011111100100001100 (0xa1f90c, 10615052)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b1 (0x1, 1)
>> g++-10	cuttlesim	rv32i-primes	real: 5.769	user: 5.701	sys: 0.016
+ for simulator in ${@:3}
+ bench_rv_1 g++-10 verilator rv32i primes
+ compiler=g++-10
+ simulator=verilator
+ design=rv32i
+ test=primes
++ realpath ../examples/rv/_objects/rv32i.v/
+ base=/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v
++ realpath ../examples/rv/tests/_build/rv32i/integ/
+ tests=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ
+ b='bench g++-10 verilator rv32i-primes'
+ make -C /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v clean
make: Entering directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v'
rm -rf obj_dir.opt
rm -rf obj_dir.trace
rm -f rvcore.verilator.vcd
rm -f rvcore.cuttlesim.opt
rm -f rvcore.cuttlesim.debug
rm -f rvcore.cuttlesim.perf
rm -f rvcore.cuttlesim.cov
rm -f rvcore.cuttlesim.s
rm -f rvcore.cuttlesim.out
rm -f rvcore.cuttlesim.vcd
rm -f rvcore.cuttlesim.perf.data
rm -f rvcore.cuttlesim.callgrind
rm -fr rvcore.cuttlesim.rr
rm -f *.gcov
rm -f top_ice40_usb.json
rm -f top_ice40_usb.json.log
rm -f top_ice40_usb.asc
rm -f top_ice40_usb.bin
rm -f top_ice40_usb.rpt
rm -f top_ice40_usb.json.v
make: Leaving directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v'
+ case $simulator in
+ make CXX=g++-10 -C /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v obj_dir.opt/Vtop
make: Entering directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v'
verilator +define+MEM_ADDRESS_WIDTH=14 +define+BRAM_RUNTIME_INIT+SIMULATION -CFLAGS -DVL_USER_FINISH -Wno-fatal -CFLAGS "-I /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v" --prefix Vtop --cc --exe  --Mdir obj_dir.opt --x-assign fast --x-initial fast --noassert -O3 -CFLAGS '-O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector ' -LDFLAGS '-O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector ' rvcore.verilator.cpp top.v
make -C obj_dir.opt -f Vtop.mk Vtop
make[1]: Entering directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt'
g++-10  -I.  -MMD -I/usr/local/share/verilator/include -I/usr/local/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=0 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow     -DVL_USER_FINISH -I /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector   -c -o rvcore.o ../rvcore.verilator.cpp
g++-10  -I.  -MMD -I/usr/local/share/verilator/include -I/usr/local/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=0 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow     -DVL_USER_FINISH -I /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector   -c -o verilated.o /usr/local/share/verilator/include/verilated.cpp
g++-10  -I.  -MMD -I/usr/local/share/verilator/include -I/usr/local/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=0 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow     -DVL_USER_FINISH -I /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector   -c -o verilated_dpi.o /usr/local/share/verilator/include/verilated_dpi.cpp
/usr/bin/perl /usr/local/share/verilator/bin/verilator_includer -DVL_INCLUDE_OPT=include Vtop.cpp Vtop_top.cpp Vtop_rv32.cpp > Vtop__ALLcls.cpp
g++-10  -I.  -MMD -I/usr/local/share/verilator/include -I/usr/local/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=0 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow     -DVL_USER_FINISH -I /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector   -c -o Vtop__ALLcls.o Vtop__ALLcls.cpp
/usr/bin/perl /usr/local/share/verilator/bin/verilator_includer -DVL_INCLUDE_OPT=include Vtop__Dpi.cpp Vtop__Syms.cpp > Vtop__ALLsup.cpp
g++-10  -I.  -MMD -I/usr/local/share/verilator/include -I/usr/local/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=0 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow     -DVL_USER_FINISH -I /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector   -c -o Vtop__ALLsup.o Vtop__ALLsup.cpp
ar -cr Vtop__ALL.a Vtop__ALLcls.o Vtop__ALLsup.o
ranlib Vtop__ALL.a
g++    rvcore.o verilated.o verilated_dpi.o Vtop__ALL.a   -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector  -o Vtop -lm -lstdc++ 
make[1]: Leaving directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt'
make: Leaving directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v'
+ bench g++-10 verilator rv32i-primes /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/primes.vmh -1
+ compiler=g++-10
+ simulator=verilator
+ input=rv32i-primes
+ export 'TIMEFORMAT=>> g++-10	verilator	rv32i-primes	real: %3R	user: %3U	sys: %3S'
+ TIMEFORMAT='>> g++-10	verilator	rv32i-primes	real: %3R	user: %3U	sys: %3S'
+ echo '<< verilator rv32i-primes'
<< verilator rv32i-primes
++ seq 1 10
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/primes.vmh -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
>> g++-10	verilator	rv32i-primes	real: 10.876	user: 10.876	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/primes.vmh -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
>> g++-10	verilator	rv32i-primes	real: 10.761	user: 10.753	sys: 0.008
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/primes.vmh -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
>> g++-10	verilator	rv32i-primes	real: 10.888	user: 10.887	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/primes.vmh -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
>> g++-10	verilator	rv32i-primes	real: 10.698	user: 10.645	sys: 0.012
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/primes.vmh -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
>> g++-10	verilator	rv32i-primes	real: 10.687	user: 10.685	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/primes.vmh -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
>> g++-10	verilator	rv32i-primes	real: 10.818	user: 10.813	sys: 0.004
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/primes.vmh -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
>> g++-10	verilator	rv32i-primes	real: 10.893	user: 10.888	sys: 0.004
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/primes.vmh -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
>> g++-10	verilator	rv32i-primes	real: 10.740	user: 10.734	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/primes.vmh -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
>> g++-10	verilator	rv32i-primes	real: 10.704	user: 10.696	sys: 0.008
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/primes.vmh -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
>> g++-10	verilator	rv32i-primes	real: 10.500	user: 10.496	sys: 0.004
+ bench_rv rv32e primes cuttlesim verilator
+ for compiler in "clang++" "g++-9" "g++-10"
+ for simulator in ${@:3}
+ bench_rv_1 clang++ cuttlesim rv32e primes
+ compiler=clang++
+ simulator=cuttlesim
+ design=rv32e
+ test=primes
++ realpath ../examples/rv/_objects/rv32e.v/
+ base=/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v
++ realpath ../examples/rv/tests/_build/rv32e/integ/
+ tests=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ
+ b='bench clang++ cuttlesim rv32e-primes'
+ make -C /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v clean
make: Entering directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v'
rm -rf obj_dir.opt
rm -rf obj_dir.trace
rm -f rvcore.verilator.vcd
rm -f rvcore.cuttlesim.opt
rm -f rvcore.cuttlesim.debug
rm -f rvcore.cuttlesim.perf
rm -f rvcore.cuttlesim.cov
rm -f rvcore.cuttlesim.s
rm -f rvcore.cuttlesim.out
rm -f rvcore.cuttlesim.vcd
rm -f rvcore.cuttlesim.perf.data
rm -f rvcore.cuttlesim.callgrind
rm -fr rvcore.cuttlesim.rr
rm -f *.gcov
rm -f top_ice40_usb.json
rm -f top_ice40_usb.json.log
rm -f top_ice40_usb.asc
rm -f top_ice40_usb.bin
rm -f top_ice40_usb.rpt
rm -f top_ice40_usb.json.v
make: Leaving directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v'
+ case $simulator in
+ make CXX=clang++ -C /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v rvcore.cuttlesim.opt
make: Entering directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v'
clang++ --std=c++17  -Wall -Wextra '-DSIM_VCD_SCOPES={"TOP", "top", "rv_core",}' -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector rvcore.cuttlesim.cpp -o "rvcore.cuttlesim.opt"
In file included from rvcore.cuttlesim.cpp:5:
In file included from ./rv32.hpp:10:
./cuttlesim.hpp:87:9: warning: Bignum truncation is broken in Boost < 1.68; if you run into issues, try upgrading. [-W#pragma-messages]
#pragma message("Bignum truncation is broken in Boost < 1.68; if you run into issues, try upgrading.")
        ^
In file included from rvcore.cuttlesim.cpp:5:
./rv32.hpp:1670:38: warning: unused parameter 'op1' [-Wunused-parameter]
  DEF_FN(enq_2, unit &_ret, bits<32> op1, bits<32> op2) {
                                     ^
./rv32.hpp:1670:52: warning: unused parameter 'op2' [-Wunused-parameter]
  DEF_FN(enq_2, unit &_ret, bits<32> op1, bits<32> op2) {
                                                   ^
3 warnings generated.
make: Leaving directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v'
+ bench clang++ cuttlesim rv32e-primes /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/primes.rv32 -1
+ compiler=clang++
+ simulator=cuttlesim
+ input=rv32e-primes
+ export 'TIMEFORMAT=>> clang++	cuttlesim	rv32e-primes	real: %3R	user: %3U	sys: %3S'
+ TIMEFORMAT='>> clang++	cuttlesim	rv32e-primes	real: %3R	user: %3U	sys: %3S'
+ echo '<< cuttlesim rv32e-primes'
<< cuttlesim rv32e-primes
++ seq 1 10
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/primes.rv32 -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010011000 (0x98, 152); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010010100 (0x94, 148); .data = 32'b00000000100000010010001000100011 (0x812223, 8462883); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010011000 (0x98, 152); .ppc = 32'b00000000000000000000000010011100 (0x9c, 156); .epoch = 1'b0 (0x0, 0); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010010100 (0x94, 148); .ppc = 32'b00000000000000000000000010011000 (0x98, 152); .epoch = 1'b0 (0x0, 0); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000010010000 (0x90, 144); .ppc = 32'b00000000000000000000000010010100 (0x94, 148); .epoch = 1'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111111100000010000000100010011 (0xff810113, 4286644499); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000000000111111110100 (0xff4, 4084); .rval2 = 32'b00000000000000000000111111111100 (0xffc, 4092); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000001010000 (0x50, 80)
rf_x02_sp = 32'b00000000000000000000111111110100 (0xff4, 4084)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000000000111111111100 (0xffc, 4092)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000000000000011010000 (0xd0, 208)
rf_x12_a2 = 32'b00000000000000000000001001100000 (0x260, 608)
rf_x13_a3 = 32'b00000000000000000000000000000001 (0x1, 1)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001011111110001000010111110 (0x17f10be, 25104574)
instr_count = 32'b00000000101000100101111111101110 (0xa25fee, 10641390)
pc = 32'b00000000000000000000000010011100 (0x9c, 156)
epoch = 1'b0 (0x0, 0)
>> clang++	cuttlesim	rv32e-primes	real: 2.843	user: 2.843	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/primes.rv32 -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010011000 (0x98, 152); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010010100 (0x94, 148); .data = 32'b00000000100000010010001000100011 (0x812223, 8462883); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010011000 (0x98, 152); .ppc = 32'b00000000000000000000000010011100 (0x9c, 156); .epoch = 1'b0 (0x0, 0); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010010100 (0x94, 148); .ppc = 32'b00000000000000000000000010011000 (0x98, 152); .epoch = 1'b0 (0x0, 0); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000010010000 (0x90, 144); .ppc = 32'b00000000000000000000000010010100 (0x94, 148); .epoch = 1'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111111100000010000000100010011 (0xff810113, 4286644499); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000000000111111110100 (0xff4, 4084); .rval2 = 32'b00000000000000000000111111111100 (0xffc, 4092); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000001010000 (0x50, 80)
rf_x02_sp = 32'b00000000000000000000111111110100 (0xff4, 4084)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000000000111111111100 (0xffc, 4092)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000000000000011010000 (0xd0, 208)
rf_x12_a2 = 32'b00000000000000000000001001100000 (0x260, 608)
rf_x13_a3 = 32'b00000000000000000000000000000001 (0x1, 1)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001011111110001000010111110 (0x17f10be, 25104574)
instr_count = 32'b00000000101000100101111111101110 (0xa25fee, 10641390)
pc = 32'b00000000000000000000000010011100 (0x9c, 156)
epoch = 1'b0 (0x0, 0)
>> clang++	cuttlesim	rv32e-primes	real: 2.873	user: 2.873	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/primes.rv32 -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010011000 (0x98, 152); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010010100 (0x94, 148); .data = 32'b00000000100000010010001000100011 (0x812223, 8462883); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010011000 (0x98, 152); .ppc = 32'b00000000000000000000000010011100 (0x9c, 156); .epoch = 1'b0 (0x0, 0); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010010100 (0x94, 148); .ppc = 32'b00000000000000000000000010011000 (0x98, 152); .epoch = 1'b0 (0x0, 0); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000010010000 (0x90, 144); .ppc = 32'b00000000000000000000000010010100 (0x94, 148); .epoch = 1'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111111100000010000000100010011 (0xff810113, 4286644499); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000000000111111110100 (0xff4, 4084); .rval2 = 32'b00000000000000000000111111111100 (0xffc, 4092); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000001010000 (0x50, 80)
rf_x02_sp = 32'b00000000000000000000111111110100 (0xff4, 4084)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000000000111111111100 (0xffc, 4092)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000000000000011010000 (0xd0, 208)
rf_x12_a2 = 32'b00000000000000000000001001100000 (0x260, 608)
rf_x13_a3 = 32'b00000000000000000000000000000001 (0x1, 1)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001011111110001000010111110 (0x17f10be, 25104574)
instr_count = 32'b00000000101000100101111111101110 (0xa25fee, 10641390)
pc = 32'b00000000000000000000000010011100 (0x9c, 156)
epoch = 1'b0 (0x0, 0)
>> clang++	cuttlesim	rv32e-primes	real: 2.867	user: 2.828	sys: 0.004
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/primes.rv32 -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010011000 (0x98, 152); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010010100 (0x94, 148); .data = 32'b00000000100000010010001000100011 (0x812223, 8462883); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010011000 (0x98, 152); .ppc = 32'b00000000000000000000000010011100 (0x9c, 156); .epoch = 1'b0 (0x0, 0); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010010100 (0x94, 148); .ppc = 32'b00000000000000000000000010011000 (0x98, 152); .epoch = 1'b0 (0x0, 0); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000010010000 (0x90, 144); .ppc = 32'b00000000000000000000000010010100 (0x94, 148); .epoch = 1'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111111100000010000000100010011 (0xff810113, 4286644499); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000000000111111110100 (0xff4, 4084); .rval2 = 32'b00000000000000000000111111111100 (0xffc, 4092); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000001010000 (0x50, 80)
rf_x02_sp = 32'b00000000000000000000111111110100 (0xff4, 4084)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000000000111111111100 (0xffc, 4092)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000000000000011010000 (0xd0, 208)
rf_x12_a2 = 32'b00000000000000000000001001100000 (0x260, 608)
rf_x13_a3 = 32'b00000000000000000000000000000001 (0x1, 1)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001011111110001000010111110 (0x17f10be, 25104574)
instr_count = 32'b00000000101000100101111111101110 (0xa25fee, 10641390)
pc = 32'b00000000000000000000000010011100 (0x9c, 156)
epoch = 1'b0 (0x0, 0)
>> clang++	cuttlesim	rv32e-primes	real: 2.783	user: 2.778	sys: 0.004
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/primes.rv32 -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010011000 (0x98, 152); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010010100 (0x94, 148); .data = 32'b00000000100000010010001000100011 (0x812223, 8462883); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010011000 (0x98, 152); .ppc = 32'b00000000000000000000000010011100 (0x9c, 156); .epoch = 1'b0 (0x0, 0); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010010100 (0x94, 148); .ppc = 32'b00000000000000000000000010011000 (0x98, 152); .epoch = 1'b0 (0x0, 0); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000010010000 (0x90, 144); .ppc = 32'b00000000000000000000000010010100 (0x94, 148); .epoch = 1'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111111100000010000000100010011 (0xff810113, 4286644499); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000000000111111110100 (0xff4, 4084); .rval2 = 32'b00000000000000000000111111111100 (0xffc, 4092); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000001010000 (0x50, 80)
rf_x02_sp = 32'b00000000000000000000111111110100 (0xff4, 4084)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000000000111111111100 (0xffc, 4092)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000000000000011010000 (0xd0, 208)
rf_x12_a2 = 32'b00000000000000000000001001100000 (0x260, 608)
rf_x13_a3 = 32'b00000000000000000000000000000001 (0x1, 1)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001011111110001000010111110 (0x17f10be, 25104574)
instr_count = 32'b00000000101000100101111111101110 (0xa25fee, 10641390)
pc = 32'b00000000000000000000000010011100 (0x9c, 156)
epoch = 1'b0 (0x0, 0)
>> clang++	cuttlesim	rv32e-primes	real: 2.778	user: 2.774	sys: 0.004
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/primes.rv32 -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010011000 (0x98, 152); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010010100 (0x94, 148); .data = 32'b00000000100000010010001000100011 (0x812223, 8462883); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010011000 (0x98, 152); .ppc = 32'b00000000000000000000000010011100 (0x9c, 156); .epoch = 1'b0 (0x0, 0); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010010100 (0x94, 148); .ppc = 32'b00000000000000000000000010011000 (0x98, 152); .epoch = 1'b0 (0x0, 0); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000010010000 (0x90, 144); .ppc = 32'b00000000000000000000000010010100 (0x94, 148); .epoch = 1'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111111100000010000000100010011 (0xff810113, 4286644499); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000000000111111110100 (0xff4, 4084); .rval2 = 32'b00000000000000000000111111111100 (0xffc, 4092); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000001010000 (0x50, 80)
rf_x02_sp = 32'b00000000000000000000111111110100 (0xff4, 4084)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000000000111111111100 (0xffc, 4092)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000000000000011010000 (0xd0, 208)
rf_x12_a2 = 32'b00000000000000000000001001100000 (0x260, 608)
rf_x13_a3 = 32'b00000000000000000000000000000001 (0x1, 1)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001011111110001000010111110 (0x17f10be, 25104574)
instr_count = 32'b00000000101000100101111111101110 (0xa25fee, 10641390)
pc = 32'b00000000000000000000000010011100 (0x9c, 156)
epoch = 1'b0 (0x0, 0)
>> clang++	cuttlesim	rv32e-primes	real: 2.821	user: 2.821	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/primes.rv32 -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010011000 (0x98, 152); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010010100 (0x94, 148); .data = 32'b00000000100000010010001000100011 (0x812223, 8462883); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010011000 (0x98, 152); .ppc = 32'b00000000000000000000000010011100 (0x9c, 156); .epoch = 1'b0 (0x0, 0); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010010100 (0x94, 148); .ppc = 32'b00000000000000000000000010011000 (0x98, 152); .epoch = 1'b0 (0x0, 0); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000010010000 (0x90, 144); .ppc = 32'b00000000000000000000000010010100 (0x94, 148); .epoch = 1'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111111100000010000000100010011 (0xff810113, 4286644499); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000000000111111110100 (0xff4, 4084); .rval2 = 32'b00000000000000000000111111111100 (0xffc, 4092); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000001010000 (0x50, 80)
rf_x02_sp = 32'b00000000000000000000111111110100 (0xff4, 4084)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000000000111111111100 (0xffc, 4092)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000000000000011010000 (0xd0, 208)
rf_x12_a2 = 32'b00000000000000000000001001100000 (0x260, 608)
rf_x13_a3 = 32'b00000000000000000000000000000001 (0x1, 1)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001011111110001000010111110 (0x17f10be, 25104574)
instr_count = 32'b00000000101000100101111111101110 (0xa25fee, 10641390)
pc = 32'b00000000000000000000000010011100 (0x9c, 156)
epoch = 1'b0 (0x0, 0)
>> clang++	cuttlesim	rv32e-primes	real: 2.752	user: 2.747	sys: 0.004
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/primes.rv32 -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010011000 (0x98, 152); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010010100 (0x94, 148); .data = 32'b00000000100000010010001000100011 (0x812223, 8462883); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010011000 (0x98, 152); .ppc = 32'b00000000000000000000000010011100 (0x9c, 156); .epoch = 1'b0 (0x0, 0); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010010100 (0x94, 148); .ppc = 32'b00000000000000000000000010011000 (0x98, 152); .epoch = 1'b0 (0x0, 0); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000010010000 (0x90, 144); .ppc = 32'b00000000000000000000000010010100 (0x94, 148); .epoch = 1'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111111100000010000000100010011 (0xff810113, 4286644499); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000000000111111110100 (0xff4, 4084); .rval2 = 32'b00000000000000000000111111111100 (0xffc, 4092); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000001010000 (0x50, 80)
rf_x02_sp = 32'b00000000000000000000111111110100 (0xff4, 4084)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000000000111111111100 (0xffc, 4092)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000000000000011010000 (0xd0, 208)
rf_x12_a2 = 32'b00000000000000000000001001100000 (0x260, 608)
rf_x13_a3 = 32'b00000000000000000000000000000001 (0x1, 1)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001011111110001000010111110 (0x17f10be, 25104574)
instr_count = 32'b00000000101000100101111111101110 (0xa25fee, 10641390)
pc = 32'b00000000000000000000000010011100 (0x9c, 156)
epoch = 1'b0 (0x0, 0)
>> clang++	cuttlesim	rv32e-primes	real: 2.841	user: 2.837	sys: 0.004
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/primes.rv32 -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010011000 (0x98, 152); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010010100 (0x94, 148); .data = 32'b00000000100000010010001000100011 (0x812223, 8462883); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010011000 (0x98, 152); .ppc = 32'b00000000000000000000000010011100 (0x9c, 156); .epoch = 1'b0 (0x0, 0); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010010100 (0x94, 148); .ppc = 32'b00000000000000000000000010011000 (0x98, 152); .epoch = 1'b0 (0x0, 0); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000010010000 (0x90, 144); .ppc = 32'b00000000000000000000000010010100 (0x94, 148); .epoch = 1'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111111100000010000000100010011 (0xff810113, 4286644499); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000000000111111110100 (0xff4, 4084); .rval2 = 32'b00000000000000000000111111111100 (0xffc, 4092); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000001010000 (0x50, 80)
rf_x02_sp = 32'b00000000000000000000111111110100 (0xff4, 4084)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000000000111111111100 (0xffc, 4092)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000000000000011010000 (0xd0, 208)
rf_x12_a2 = 32'b00000000000000000000001001100000 (0x260, 608)
rf_x13_a3 = 32'b00000000000000000000000000000001 (0x1, 1)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001011111110001000010111110 (0x17f10be, 25104574)
instr_count = 32'b00000000101000100101111111101110 (0xa25fee, 10641390)
pc = 32'b00000000000000000000000010011100 (0x9c, 156)
epoch = 1'b0 (0x0, 0)
>> clang++	cuttlesim	rv32e-primes	real: 2.880	user: 2.880	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/primes.rv32 -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010011000 (0x98, 152); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010010100 (0x94, 148); .data = 32'b00000000100000010010001000100011 (0x812223, 8462883); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010011000 (0x98, 152); .ppc = 32'b00000000000000000000000010011100 (0x9c, 156); .epoch = 1'b0 (0x0, 0); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010010100 (0x94, 148); .ppc = 32'b00000000000000000000000010011000 (0x98, 152); .epoch = 1'b0 (0x0, 0); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000010010000 (0x90, 144); .ppc = 32'b00000000000000000000000010010100 (0x94, 148); .epoch = 1'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111111100000010000000100010011 (0xff810113, 4286644499); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000000000111111110100 (0xff4, 4084); .rval2 = 32'b00000000000000000000111111111100 (0xffc, 4092); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000001010000 (0x50, 80)
rf_x02_sp = 32'b00000000000000000000111111110100 (0xff4, 4084)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000000000111111111100 (0xffc, 4092)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000000000000011010000 (0xd0, 208)
rf_x12_a2 = 32'b00000000000000000000001001100000 (0x260, 608)
rf_x13_a3 = 32'b00000000000000000000000000000001 (0x1, 1)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001011111110001000010111110 (0x17f10be, 25104574)
instr_count = 32'b00000000101000100101111111101110 (0xa25fee, 10641390)
pc = 32'b00000000000000000000000010011100 (0x9c, 156)
epoch = 1'b0 (0x0, 0)
>> clang++	cuttlesim	rv32e-primes	real: 2.796	user: 2.788	sys: 0.008
+ for simulator in ${@:3}
+ bench_rv_1 clang++ verilator rv32e primes
+ compiler=clang++
+ simulator=verilator
+ design=rv32e
+ test=primes
++ realpath ../examples/rv/_objects/rv32e.v/
+ base=/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v
++ realpath ../examples/rv/tests/_build/rv32e/integ/
+ tests=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ
+ b='bench clang++ verilator rv32e-primes'
+ make -C /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v clean
make: Entering directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v'
rm -rf obj_dir.opt
rm -rf obj_dir.trace
rm -f rvcore.verilator.vcd
rm -f rvcore.cuttlesim.opt
rm -f rvcore.cuttlesim.debug
rm -f rvcore.cuttlesim.perf
rm -f rvcore.cuttlesim.cov
rm -f rvcore.cuttlesim.s
rm -f rvcore.cuttlesim.out
rm -f rvcore.cuttlesim.vcd
rm -f rvcore.cuttlesim.perf.data
rm -f rvcore.cuttlesim.callgrind
rm -fr rvcore.cuttlesim.rr
rm -f *.gcov
rm -f top_ice40_usb.json
rm -f top_ice40_usb.json.log
rm -f top_ice40_usb.asc
rm -f top_ice40_usb.bin
rm -f top_ice40_usb.rpt
rm -f top_ice40_usb.json.v
make: Leaving directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v'
+ case $simulator in
+ make CXX=clang++ -C /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v obj_dir.opt/Vtop
make: Entering directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v'
verilator +define+MEM_ADDRESS_WIDTH=10 +define+BRAM_RUNTIME_INIT+SIMULATION -CFLAGS -DVL_USER_FINISH -Wno-fatal -CFLAGS "-I /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v" --prefix Vtop --cc --exe --compiler clang -CFLAGS -fPIC --Mdir obj_dir.opt --x-assign fast --x-initial fast --noassert -O3 -CFLAGS '-O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector ' -LDFLAGS '-O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector ' rvcore.verilator.cpp top.v
make -C obj_dir.opt -f Vtop.mk Vtop
make[1]: Entering directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/obj_dir.opt'
clang++  -I.  -MMD -I/usr/local/share/verilator/include -I/usr/local/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=0 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow     -DVL_USER_FINISH -I /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v -fPIC -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector   -c -o rvcore.o ../rvcore.verilator.cpp
warning: unknown warning option '-Wno-unused-but-set-variable'; did you mean '-Wno-unused-const-variable'? [-Wunknown-warning-option]
1 warning generated.
clang++  -I.  -MMD -I/usr/local/share/verilator/include -I/usr/local/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=0 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow     -DVL_USER_FINISH -I /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v -fPIC -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector   -c -o verilated.o /usr/local/share/verilator/include/verilated.cpp
warning: unknown warning option '-Wno-unused-but-set-variable'; did you mean '-Wno-unused-const-variable'? [-Wunknown-warning-option]
1 warning generated.
clang++  -I.  -MMD -I/usr/local/share/verilator/include -I/usr/local/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=0 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow     -DVL_USER_FINISH -I /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v -fPIC -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector   -c -o verilated_dpi.o /usr/local/share/verilator/include/verilated_dpi.cpp
warning: unknown warning option '-Wno-unused-but-set-variable'; did you mean '-Wno-unused-const-variable'? [-Wunknown-warning-option]
1 warning generated.
/usr/bin/perl /usr/local/share/verilator/bin/verilator_includer -DVL_INCLUDE_OPT=include Vtop.cpp Vtop_top.cpp Vtop_rv32.cpp > Vtop__ALLcls.cpp
clang++  -I.  -MMD -I/usr/local/share/verilator/include -I/usr/local/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=0 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow     -DVL_USER_FINISH -I /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v -fPIC -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector   -c -o Vtop__ALLcls.o Vtop__ALLcls.cpp
warning: unknown warning option '-Wno-unused-but-set-variable'; did you mean '-Wno-unused-const-variable'? [-Wunknown-warning-option]
1 warning generated.
/usr/bin/perl /usr/local/share/verilator/bin/verilator_includer -DVL_INCLUDE_OPT=include Vtop__Dpi.cpp Vtop__Syms.cpp > Vtop__ALLsup.cpp
clang++  -I.  -MMD -I/usr/local/share/verilator/include -I/usr/local/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=0 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow     -DVL_USER_FINISH -I /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v -fPIC -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector   -c -o Vtop__ALLsup.o Vtop__ALLsup.cpp
warning: unknown warning option '-Wno-unused-but-set-variable'; did you mean '-Wno-unused-const-variable'? [-Wunknown-warning-option]
1 warning generated.
ar -cr Vtop__ALL.a Vtop__ALLcls.o Vtop__ALLsup.o
ranlib Vtop__ALL.a
g++    rvcore.o verilated.o verilated_dpi.o Vtop__ALL.a   -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector  -o Vtop -lm -lstdc++ 
make[1]: Leaving directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/obj_dir.opt'
make: Leaving directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v'
+ bench clang++ verilator rv32e-primes /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/primes.vmh -1
+ compiler=clang++
+ simulator=verilator
+ input=rv32e-primes
+ export 'TIMEFORMAT=>> clang++	verilator	rv32e-primes	real: %3R	user: %3U	sys: %3S'
+ TIMEFORMAT='>> clang++	verilator	rv32e-primes	real: %3R	user: %3U	sys: %3S'
+ echo '<< verilator rv32e-primes'
<< verilator rv32e-primes
++ seq 1 10
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/primes.vmh -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
>> clang++	verilator	rv32e-primes	real: 6.399	user: 6.387	sys: 0.012
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/primes.vmh -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
>> clang++	verilator	rv32e-primes	real: 6.173	user: 6.173	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/primes.vmh -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
>> clang++	verilator	rv32e-primes	real: 6.202	user: 6.198	sys: 0.004
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/primes.vmh -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
>> clang++	verilator	rv32e-primes	real: 6.278	user: 6.278	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/primes.vmh -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
>> clang++	verilator	rv32e-primes	real: 6.181	user: 6.177	sys: 0.004
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/primes.vmh -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
>> clang++	verilator	rv32e-primes	real: 6.176	user: 6.168	sys: 0.008
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/primes.vmh -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
>> clang++	verilator	rv32e-primes	real: 6.273	user: 6.269	sys: 0.004
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/primes.vmh -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
>> clang++	verilator	rv32e-primes	real: 6.231	user: 6.227	sys: 0.004
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/primes.vmh -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
>> clang++	verilator	rv32e-primes	real: 6.279	user: 6.275	sys: 0.004
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/primes.vmh -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
>> clang++	verilator	rv32e-primes	real: 6.175	user: 6.169	sys: 0.004
+ for compiler in "clang++" "g++-9" "g++-10"
+ for simulator in ${@:3}
+ bench_rv_1 g++-9 cuttlesim rv32e primes
+ compiler=g++-9
+ simulator=cuttlesim
+ design=rv32e
+ test=primes
++ realpath ../examples/rv/_objects/rv32e.v/
+ base=/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v
++ realpath ../examples/rv/tests/_build/rv32e/integ/
+ tests=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ
+ b='bench g++-9 cuttlesim rv32e-primes'
+ make -C /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v clean
make: Entering directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v'
rm -rf obj_dir.opt
rm -rf obj_dir.trace
rm -f rvcore.verilator.vcd
rm -f rvcore.cuttlesim.opt
rm -f rvcore.cuttlesim.debug
rm -f rvcore.cuttlesim.perf
rm -f rvcore.cuttlesim.cov
rm -f rvcore.cuttlesim.s
rm -f rvcore.cuttlesim.out
rm -f rvcore.cuttlesim.vcd
rm -f rvcore.cuttlesim.perf.data
rm -f rvcore.cuttlesim.callgrind
rm -fr rvcore.cuttlesim.rr
rm -f *.gcov
rm -f top_ice40_usb.json
rm -f top_ice40_usb.json.log
rm -f top_ice40_usb.asc
rm -f top_ice40_usb.bin
rm -f top_ice40_usb.rpt
rm -f top_ice40_usb.json.v
make: Leaving directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v'
+ case $simulator in
+ make CXX=g++-9 -C /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v rvcore.cuttlesim.opt
make: Entering directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v'
g++-9 --std=c++17  -Wall -Wextra '-DSIM_VCD_SCOPES={"TOP", "top", "rv_core",}' -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector rvcore.cuttlesim.cpp -o "rvcore.cuttlesim.opt"
In file included from rv32.hpp:10,
                 from rvcore.cuttlesim.cpp:5:
cuttlesim.hpp:87:102: note: #pragma message: Bignum truncation is broken in Boost < 1.68; if you run into issues, try upgrading.
   87 | #pragma message("Bignum truncation is broken in Boost < 1.68; if you run into issues, try upgrading.")
      |                                                                                                      ^
make: Leaving directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v'
+ bench g++-9 cuttlesim rv32e-primes /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/primes.rv32 -1
+ compiler=g++-9
+ simulator=cuttlesim
+ input=rv32e-primes
+ export 'TIMEFORMAT=>> g++-9	cuttlesim	rv32e-primes	real: %3R	user: %3U	sys: %3S'
+ TIMEFORMAT='>> g++-9	cuttlesim	rv32e-primes	real: %3R	user: %3U	sys: %3S'
+ echo '<< cuttlesim rv32e-primes'
<< cuttlesim rv32e-primes
++ seq 1 10
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/primes.rv32 -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010011000 (0x98, 152); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010010100 (0x94, 148); .data = 32'b00000000100000010010001000100011 (0x812223, 8462883); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010011000 (0x98, 152); .ppc = 32'b00000000000000000000000010011100 (0x9c, 156); .epoch = 1'b0 (0x0, 0); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010010100 (0x94, 148); .ppc = 32'b00000000000000000000000010011000 (0x98, 152); .epoch = 1'b0 (0x0, 0); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000010010000 (0x90, 144); .ppc = 32'b00000000000000000000000010010100 (0x94, 148); .epoch = 1'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111111100000010000000100010011 (0xff810113, 4286644499); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000000000111111110100 (0xff4, 4084); .rval2 = 32'b00000000000000000000111111111100 (0xffc, 4092); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000001010000 (0x50, 80)
rf_x02_sp = 32'b00000000000000000000111111110100 (0xff4, 4084)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000000000111111111100 (0xffc, 4092)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000000000000011010000 (0xd0, 208)
rf_x12_a2 = 32'b00000000000000000000001001100000 (0x260, 608)
rf_x13_a3 = 32'b00000000000000000000000000000001 (0x1, 1)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001011111110001000010111110 (0x17f10be, 25104574)
instr_count = 32'b00000000101000100101111111101110 (0xa25fee, 10641390)
pc = 32'b00000000000000000000000010011100 (0x9c, 156)
epoch = 1'b0 (0x0, 0)
>> g++-9	cuttlesim	rv32e-primes	real: 2.362	user: 2.362	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/primes.rv32 -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010011000 (0x98, 152); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010010100 (0x94, 148); .data = 32'b00000000100000010010001000100011 (0x812223, 8462883); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010011000 (0x98, 152); .ppc = 32'b00000000000000000000000010011100 (0x9c, 156); .epoch = 1'b0 (0x0, 0); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010010100 (0x94, 148); .ppc = 32'b00000000000000000000000010011000 (0x98, 152); .epoch = 1'b0 (0x0, 0); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000010010000 (0x90, 144); .ppc = 32'b00000000000000000000000010010100 (0x94, 148); .epoch = 1'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111111100000010000000100010011 (0xff810113, 4286644499); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000000000111111110100 (0xff4, 4084); .rval2 = 32'b00000000000000000000111111111100 (0xffc, 4092); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000001010000 (0x50, 80)
rf_x02_sp = 32'b00000000000000000000111111110100 (0xff4, 4084)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000000000111111111100 (0xffc, 4092)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000000000000011010000 (0xd0, 208)
rf_x12_a2 = 32'b00000000000000000000001001100000 (0x260, 608)
rf_x13_a3 = 32'b00000000000000000000000000000001 (0x1, 1)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001011111110001000010111110 (0x17f10be, 25104574)
instr_count = 32'b00000000101000100101111111101110 (0xa25fee, 10641390)
pc = 32'b00000000000000000000000010011100 (0x9c, 156)
epoch = 1'b0 (0x0, 0)
>> g++-9	cuttlesim	rv32e-primes	real: 2.419	user: 2.415	sys: 0.004
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/primes.rv32 -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010011000 (0x98, 152); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010010100 (0x94, 148); .data = 32'b00000000100000010010001000100011 (0x812223, 8462883); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010011000 (0x98, 152); .ppc = 32'b00000000000000000000000010011100 (0x9c, 156); .epoch = 1'b0 (0x0, 0); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010010100 (0x94, 148); .ppc = 32'b00000000000000000000000010011000 (0x98, 152); .epoch = 1'b0 (0x0, 0); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000010010000 (0x90, 144); .ppc = 32'b00000000000000000000000010010100 (0x94, 148); .epoch = 1'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111111100000010000000100010011 (0xff810113, 4286644499); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000000000111111110100 (0xff4, 4084); .rval2 = 32'b00000000000000000000111111111100 (0xffc, 4092); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000001010000 (0x50, 80)
rf_x02_sp = 32'b00000000000000000000111111110100 (0xff4, 4084)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000000000111111111100 (0xffc, 4092)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000000000000011010000 (0xd0, 208)
rf_x12_a2 = 32'b00000000000000000000001001100000 (0x260, 608)
rf_x13_a3 = 32'b00000000000000000000000000000001 (0x1, 1)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001011111110001000010111110 (0x17f10be, 25104574)
instr_count = 32'b00000000101000100101111111101110 (0xa25fee, 10641390)
pc = 32'b00000000000000000000000010011100 (0x9c, 156)
epoch = 1'b0 (0x0, 0)
>> g++-9	cuttlesim	rv32e-primes	real: 2.472	user: 2.403	sys: 0.008
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/primes.rv32 -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010011000 (0x98, 152); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010010100 (0x94, 148); .data = 32'b00000000100000010010001000100011 (0x812223, 8462883); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010011000 (0x98, 152); .ppc = 32'b00000000000000000000000010011100 (0x9c, 156); .epoch = 1'b0 (0x0, 0); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010010100 (0x94, 148); .ppc = 32'b00000000000000000000000010011000 (0x98, 152); .epoch = 1'b0 (0x0, 0); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000010010000 (0x90, 144); .ppc = 32'b00000000000000000000000010010100 (0x94, 148); .epoch = 1'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111111100000010000000100010011 (0xff810113, 4286644499); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000000000111111110100 (0xff4, 4084); .rval2 = 32'b00000000000000000000111111111100 (0xffc, 4092); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000001010000 (0x50, 80)
rf_x02_sp = 32'b00000000000000000000111111110100 (0xff4, 4084)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000000000111111111100 (0xffc, 4092)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000000000000011010000 (0xd0, 208)
rf_x12_a2 = 32'b00000000000000000000001001100000 (0x260, 608)
rf_x13_a3 = 32'b00000000000000000000000000000001 (0x1, 1)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001011111110001000010111110 (0x17f10be, 25104574)
instr_count = 32'b00000000101000100101111111101110 (0xa25fee, 10641390)
pc = 32'b00000000000000000000000010011100 (0x9c, 156)
epoch = 1'b0 (0x0, 0)
>> g++-9	cuttlesim	rv32e-primes	real: 2.391	user: 2.390	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/primes.rv32 -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010011000 (0x98, 152); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010010100 (0x94, 148); .data = 32'b00000000100000010010001000100011 (0x812223, 8462883); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010011000 (0x98, 152); .ppc = 32'b00000000000000000000000010011100 (0x9c, 156); .epoch = 1'b0 (0x0, 0); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010010100 (0x94, 148); .ppc = 32'b00000000000000000000000010011000 (0x98, 152); .epoch = 1'b0 (0x0, 0); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000010010000 (0x90, 144); .ppc = 32'b00000000000000000000000010010100 (0x94, 148); .epoch = 1'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111111100000010000000100010011 (0xff810113, 4286644499); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000000000111111110100 (0xff4, 4084); .rval2 = 32'b00000000000000000000111111111100 (0xffc, 4092); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000001010000 (0x50, 80)
rf_x02_sp = 32'b00000000000000000000111111110100 (0xff4, 4084)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000000000111111111100 (0xffc, 4092)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000000000000011010000 (0xd0, 208)
rf_x12_a2 = 32'b00000000000000000000001001100000 (0x260, 608)
rf_x13_a3 = 32'b00000000000000000000000000000001 (0x1, 1)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001011111110001000010111110 (0x17f10be, 25104574)
instr_count = 32'b00000000101000100101111111101110 (0xa25fee, 10641390)
pc = 32'b00000000000000000000000010011100 (0x9c, 156)
epoch = 1'b0 (0x0, 0)
>> g++-9	cuttlesim	rv32e-primes	real: 2.439	user: 2.392	sys: 0.012
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/primes.rv32 -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010011000 (0x98, 152); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010010100 (0x94, 148); .data = 32'b00000000100000010010001000100011 (0x812223, 8462883); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010011000 (0x98, 152); .ppc = 32'b00000000000000000000000010011100 (0x9c, 156); .epoch = 1'b0 (0x0, 0); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010010100 (0x94, 148); .ppc = 32'b00000000000000000000000010011000 (0x98, 152); .epoch = 1'b0 (0x0, 0); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000010010000 (0x90, 144); .ppc = 32'b00000000000000000000000010010100 (0x94, 148); .epoch = 1'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111111100000010000000100010011 (0xff810113, 4286644499); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000000000111111110100 (0xff4, 4084); .rval2 = 32'b00000000000000000000111111111100 (0xffc, 4092); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000001010000 (0x50, 80)
rf_x02_sp = 32'b00000000000000000000111111110100 (0xff4, 4084)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000000000111111111100 (0xffc, 4092)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000000000000011010000 (0xd0, 208)
rf_x12_a2 = 32'b00000000000000000000001001100000 (0x260, 608)
rf_x13_a3 = 32'b00000000000000000000000000000001 (0x1, 1)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001011111110001000010111110 (0x17f10be, 25104574)
instr_count = 32'b00000000101000100101111111101110 (0xa25fee, 10641390)
pc = 32'b00000000000000000000000010011100 (0x9c, 156)
epoch = 1'b0 (0x0, 0)
>> g++-9	cuttlesim	rv32e-primes	real: 2.431	user: 2.426	sys: 0.004
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/primes.rv32 -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010011000 (0x98, 152); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010010100 (0x94, 148); .data = 32'b00000000100000010010001000100011 (0x812223, 8462883); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010011000 (0x98, 152); .ppc = 32'b00000000000000000000000010011100 (0x9c, 156); .epoch = 1'b0 (0x0, 0); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010010100 (0x94, 148); .ppc = 32'b00000000000000000000000010011000 (0x98, 152); .epoch = 1'b0 (0x0, 0); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000010010000 (0x90, 144); .ppc = 32'b00000000000000000000000010010100 (0x94, 148); .epoch = 1'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111111100000010000000100010011 (0xff810113, 4286644499); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000000000111111110100 (0xff4, 4084); .rval2 = 32'b00000000000000000000111111111100 (0xffc, 4092); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000001010000 (0x50, 80)
rf_x02_sp = 32'b00000000000000000000111111110100 (0xff4, 4084)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000000000111111111100 (0xffc, 4092)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000000000000011010000 (0xd0, 208)
rf_x12_a2 = 32'b00000000000000000000001001100000 (0x260, 608)
rf_x13_a3 = 32'b00000000000000000000000000000001 (0x1, 1)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001011111110001000010111110 (0x17f10be, 25104574)
instr_count = 32'b00000000101000100101111111101110 (0xa25fee, 10641390)
pc = 32'b00000000000000000000000010011100 (0x9c, 156)
epoch = 1'b0 (0x0, 0)
>> g++-9	cuttlesim	rv32e-primes	real: 2.405	user: 2.393	sys: 0.004
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/primes.rv32 -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010011000 (0x98, 152); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010010100 (0x94, 148); .data = 32'b00000000100000010010001000100011 (0x812223, 8462883); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010011000 (0x98, 152); .ppc = 32'b00000000000000000000000010011100 (0x9c, 156); .epoch = 1'b0 (0x0, 0); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010010100 (0x94, 148); .ppc = 32'b00000000000000000000000010011000 (0x98, 152); .epoch = 1'b0 (0x0, 0); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000010010000 (0x90, 144); .ppc = 32'b00000000000000000000000010010100 (0x94, 148); .epoch = 1'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111111100000010000000100010011 (0xff810113, 4286644499); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000000000111111110100 (0xff4, 4084); .rval2 = 32'b00000000000000000000111111111100 (0xffc, 4092); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000001010000 (0x50, 80)
rf_x02_sp = 32'b00000000000000000000111111110100 (0xff4, 4084)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000000000111111111100 (0xffc, 4092)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000000000000011010000 (0xd0, 208)
rf_x12_a2 = 32'b00000000000000000000001001100000 (0x260, 608)
rf_x13_a3 = 32'b00000000000000000000000000000001 (0x1, 1)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001011111110001000010111110 (0x17f10be, 25104574)
instr_count = 32'b00000000101000100101111111101110 (0xa25fee, 10641390)
pc = 32'b00000000000000000000000010011100 (0x9c, 156)
epoch = 1'b0 (0x0, 0)
>> g++-9	cuttlesim	rv32e-primes	real: 2.411	user: 2.407	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/primes.rv32 -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010011000 (0x98, 152); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010010100 (0x94, 148); .data = 32'b00000000100000010010001000100011 (0x812223, 8462883); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010011000 (0x98, 152); .ppc = 32'b00000000000000000000000010011100 (0x9c, 156); .epoch = 1'b0 (0x0, 0); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010010100 (0x94, 148); .ppc = 32'b00000000000000000000000010011000 (0x98, 152); .epoch = 1'b0 (0x0, 0); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000010010000 (0x90, 144); .ppc = 32'b00000000000000000000000010010100 (0x94, 148); .epoch = 1'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111111100000010000000100010011 (0xff810113, 4286644499); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000000000111111110100 (0xff4, 4084); .rval2 = 32'b00000000000000000000111111111100 (0xffc, 4092); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000001010000 (0x50, 80)
rf_x02_sp = 32'b00000000000000000000111111110100 (0xff4, 4084)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000000000111111111100 (0xffc, 4092)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000000000000011010000 (0xd0, 208)
rf_x12_a2 = 32'b00000000000000000000001001100000 (0x260, 608)
rf_x13_a3 = 32'b00000000000000000000000000000001 (0x1, 1)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001011111110001000010111110 (0x17f10be, 25104574)
instr_count = 32'b00000000101000100101111111101110 (0xa25fee, 10641390)
pc = 32'b00000000000000000000000010011100 (0x9c, 156)
epoch = 1'b0 (0x0, 0)
>> g++-9	cuttlesim	rv32e-primes	real: 2.382	user: 2.374	sys: 0.008
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/primes.rv32 -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010011000 (0x98, 152); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010010100 (0x94, 148); .data = 32'b00000000100000010010001000100011 (0x812223, 8462883); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010011000 (0x98, 152); .ppc = 32'b00000000000000000000000010011100 (0x9c, 156); .epoch = 1'b0 (0x0, 0); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010010100 (0x94, 148); .ppc = 32'b00000000000000000000000010011000 (0x98, 152); .epoch = 1'b0 (0x0, 0); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000010010000 (0x90, 144); .ppc = 32'b00000000000000000000000010010100 (0x94, 148); .epoch = 1'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111111100000010000000100010011 (0xff810113, 4286644499); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000000000111111110100 (0xff4, 4084); .rval2 = 32'b00000000000000000000111111111100 (0xffc, 4092); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000001010000 (0x50, 80)
rf_x02_sp = 32'b00000000000000000000111111110100 (0xff4, 4084)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000000000111111111100 (0xffc, 4092)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000000000000011010000 (0xd0, 208)
rf_x12_a2 = 32'b00000000000000000000001001100000 (0x260, 608)
rf_x13_a3 = 32'b00000000000000000000000000000001 (0x1, 1)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001011111110001000010111110 (0x17f10be, 25104574)
instr_count = 32'b00000000101000100101111111101110 (0xa25fee, 10641390)
pc = 32'b00000000000000000000000010011100 (0x9c, 156)
epoch = 1'b0 (0x0, 0)
>> g++-9	cuttlesim	rv32e-primes	real: 2.480	user: 2.475	sys: 0.004
+ for simulator in ${@:3}
+ bench_rv_1 g++-9 verilator rv32e primes
+ compiler=g++-9
+ simulator=verilator
+ design=rv32e
+ test=primes
++ realpath ../examples/rv/_objects/rv32e.v/
+ base=/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v
++ realpath ../examples/rv/tests/_build/rv32e/integ/
+ tests=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ
+ b='bench g++-9 verilator rv32e-primes'
+ make -C /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v clean
make: Entering directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v'
rm -rf obj_dir.opt
rm -rf obj_dir.trace
rm -f rvcore.verilator.vcd
rm -f rvcore.cuttlesim.opt
rm -f rvcore.cuttlesim.debug
rm -f rvcore.cuttlesim.perf
rm -f rvcore.cuttlesim.cov
rm -f rvcore.cuttlesim.s
rm -f rvcore.cuttlesim.out
rm -f rvcore.cuttlesim.vcd
rm -f rvcore.cuttlesim.perf.data
rm -f rvcore.cuttlesim.callgrind
rm -fr rvcore.cuttlesim.rr
rm -f *.gcov
rm -f top_ice40_usb.json
rm -f top_ice40_usb.json.log
rm -f top_ice40_usb.asc
rm -f top_ice40_usb.bin
rm -f top_ice40_usb.rpt
rm -f top_ice40_usb.json.v
make: Leaving directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v'
+ case $simulator in
+ make CXX=g++-9 -C /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v obj_dir.opt/Vtop
make: Entering directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v'
verilator +define+MEM_ADDRESS_WIDTH=10 +define+BRAM_RUNTIME_INIT+SIMULATION -CFLAGS -DVL_USER_FINISH -Wno-fatal -CFLAGS "-I /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v" --prefix Vtop --cc --exe  --Mdir obj_dir.opt --x-assign fast --x-initial fast --noassert -O3 -CFLAGS '-O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector ' -LDFLAGS '-O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector ' rvcore.verilator.cpp top.v
make -C obj_dir.opt -f Vtop.mk Vtop
make[1]: Entering directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/obj_dir.opt'
g++-9  -I.  -MMD -I/usr/local/share/verilator/include -I/usr/local/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=0 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow     -DVL_USER_FINISH -I /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector   -c -o rvcore.o ../rvcore.verilator.cpp
g++-9  -I.  -MMD -I/usr/local/share/verilator/include -I/usr/local/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=0 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow     -DVL_USER_FINISH -I /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector   -c -o verilated.o /usr/local/share/verilator/include/verilated.cpp
g++-9  -I.  -MMD -I/usr/local/share/verilator/include -I/usr/local/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=0 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow     -DVL_USER_FINISH -I /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector   -c -o verilated_dpi.o /usr/local/share/verilator/include/verilated_dpi.cpp
/usr/bin/perl /usr/local/share/verilator/bin/verilator_includer -DVL_INCLUDE_OPT=include Vtop.cpp Vtop_top.cpp Vtop_rv32.cpp > Vtop__ALLcls.cpp
g++-9  -I.  -MMD -I/usr/local/share/verilator/include -I/usr/local/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=0 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow     -DVL_USER_FINISH -I /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector   -c -o Vtop__ALLcls.o Vtop__ALLcls.cpp
/usr/bin/perl /usr/local/share/verilator/bin/verilator_includer -DVL_INCLUDE_OPT=include Vtop__Dpi.cpp Vtop__Syms.cpp > Vtop__ALLsup.cpp
g++-9  -I.  -MMD -I/usr/local/share/verilator/include -I/usr/local/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=0 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow     -DVL_USER_FINISH -I /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector   -c -o Vtop__ALLsup.o Vtop__ALLsup.cpp
ar -cr Vtop__ALL.a Vtop__ALLcls.o Vtop__ALLsup.o
ranlib Vtop__ALL.a
g++    rvcore.o verilated.o verilated_dpi.o Vtop__ALL.a   -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector  -o Vtop -lm -lstdc++ 
make[1]: Leaving directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/obj_dir.opt'
make: Leaving directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v'
+ bench g++-9 verilator rv32e-primes /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/primes.vmh -1
+ compiler=g++-9
+ simulator=verilator
+ input=rv32e-primes
+ export 'TIMEFORMAT=>> g++-9	verilator	rv32e-primes	real: %3R	user: %3U	sys: %3S'
+ TIMEFORMAT='>> g++-9	verilator	rv32e-primes	real: %3R	user: %3U	sys: %3S'
+ echo '<< verilator rv32e-primes'
<< verilator rv32e-primes
++ seq 1 10
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/primes.vmh -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
>> g++-9	verilator	rv32e-primes	real: 7.060	user: 7.050	sys: 0.008
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/primes.vmh -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
>> g++-9	verilator	rv32e-primes	real: 7.079	user: 7.072	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/primes.vmh -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
>> g++-9	verilator	rv32e-primes	real: 7.127	user: 7.071	sys: 0.016
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/primes.vmh -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
>> g++-9	verilator	rv32e-primes	real: 7.182	user: 7.182	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/primes.vmh -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
>> g++-9	verilator	rv32e-primes	real: 7.141	user: 7.129	sys: 0.012
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/primes.vmh -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
>> g++-9	verilator	rv32e-primes	real: 6.988	user: 6.988	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/primes.vmh -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
>> g++-9	verilator	rv32e-primes	real: 7.056	user: 7.050	sys: 0.004
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/primes.vmh -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
>> g++-9	verilator	rv32e-primes	real: 7.252	user: 7.248	sys: 0.004
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/primes.vmh -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
>> g++-9	verilator	rv32e-primes	real: 7.207	user: 7.199	sys: 0.004
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/primes.vmh -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
>> g++-9	verilator	rv32e-primes	real: 7.087	user: 7.077	sys: 0.004
+ for compiler in "clang++" "g++-9" "g++-10"
+ for simulator in ${@:3}
+ bench_rv_1 g++-10 cuttlesim rv32e primes
+ compiler=g++-10
+ simulator=cuttlesim
+ design=rv32e
+ test=primes
++ realpath ../examples/rv/_objects/rv32e.v/
+ base=/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v
++ realpath ../examples/rv/tests/_build/rv32e/integ/
+ tests=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ
+ b='bench g++-10 cuttlesim rv32e-primes'
+ make -C /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v clean
make: Entering directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v'
rm -rf obj_dir.opt
rm -rf obj_dir.trace
rm -f rvcore.verilator.vcd
rm -f rvcore.cuttlesim.opt
rm -f rvcore.cuttlesim.debug
rm -f rvcore.cuttlesim.perf
rm -f rvcore.cuttlesim.cov
rm -f rvcore.cuttlesim.s
rm -f rvcore.cuttlesim.out
rm -f rvcore.cuttlesim.vcd
rm -f rvcore.cuttlesim.perf.data
rm -f rvcore.cuttlesim.callgrind
rm -fr rvcore.cuttlesim.rr
rm -f *.gcov
rm -f top_ice40_usb.json
rm -f top_ice40_usb.json.log
rm -f top_ice40_usb.asc
rm -f top_ice40_usb.bin
rm -f top_ice40_usb.rpt
rm -f top_ice40_usb.json.v
make: Leaving directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v'
+ case $simulator in
+ make CXX=g++-10 -C /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v rvcore.cuttlesim.opt
make: Entering directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v'
g++-10 --std=c++17  -Wall -Wextra '-DSIM_VCD_SCOPES={"TOP", "top", "rv_core",}' -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector rvcore.cuttlesim.cpp -o "rvcore.cuttlesim.opt"
In file included from rv32.hpp:10,
                 from rvcore.cuttlesim.cpp:5:
cuttlesim.hpp:87:102: note: ‘#pragma message: Bignum truncation is broken in Boost < 1.68; if you run into issues, try upgrading.’
   87 | #pragma message("Bignum truncation is broken in Boost < 1.68; if you run into issues, try upgrading.")
      |                                                                                                      ^
make: Leaving directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v'
+ bench g++-10 cuttlesim rv32e-primes /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/primes.rv32 -1
+ compiler=g++-10
+ simulator=cuttlesim
+ input=rv32e-primes
+ export 'TIMEFORMAT=>> g++-10	cuttlesim	rv32e-primes	real: %3R	user: %3U	sys: %3S'
+ TIMEFORMAT='>> g++-10	cuttlesim	rv32e-primes	real: %3R	user: %3U	sys: %3S'
+ echo '<< cuttlesim rv32e-primes'
<< cuttlesim rv32e-primes
++ seq 1 10
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/primes.rv32 -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010011000 (0x98, 152); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010010100 (0x94, 148); .data = 32'b00000000100000010010001000100011 (0x812223, 8462883); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010011000 (0x98, 152); .ppc = 32'b00000000000000000000000010011100 (0x9c, 156); .epoch = 1'b0 (0x0, 0); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010010100 (0x94, 148); .ppc = 32'b00000000000000000000000010011000 (0x98, 152); .epoch = 1'b0 (0x0, 0); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000010010000 (0x90, 144); .ppc = 32'b00000000000000000000000010010100 (0x94, 148); .epoch = 1'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111111100000010000000100010011 (0xff810113, 4286644499); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000000000111111110100 (0xff4, 4084); .rval2 = 32'b00000000000000000000111111111100 (0xffc, 4092); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000001010000 (0x50, 80)
rf_x02_sp = 32'b00000000000000000000111111110100 (0xff4, 4084)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000000000111111111100 (0xffc, 4092)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000000000000011010000 (0xd0, 208)
rf_x12_a2 = 32'b00000000000000000000001001100000 (0x260, 608)
rf_x13_a3 = 32'b00000000000000000000000000000001 (0x1, 1)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001011111110001000010111110 (0x17f10be, 25104574)
instr_count = 32'b00000000101000100101111111101110 (0xa25fee, 10641390)
pc = 32'b00000000000000000000000010011100 (0x9c, 156)
epoch = 1'b0 (0x0, 0)
>> g++-10	cuttlesim	rv32e-primes	real: 2.540	user: 2.519	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/primes.rv32 -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010011000 (0x98, 152); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010010100 (0x94, 148); .data = 32'b00000000100000010010001000100011 (0x812223, 8462883); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010011000 (0x98, 152); .ppc = 32'b00000000000000000000000010011100 (0x9c, 156); .epoch = 1'b0 (0x0, 0); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010010100 (0x94, 148); .ppc = 32'b00000000000000000000000010011000 (0x98, 152); .epoch = 1'b0 (0x0, 0); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000010010000 (0x90, 144); .ppc = 32'b00000000000000000000000010010100 (0x94, 148); .epoch = 1'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111111100000010000000100010011 (0xff810113, 4286644499); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000000000111111110100 (0xff4, 4084); .rval2 = 32'b00000000000000000000111111111100 (0xffc, 4092); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000001010000 (0x50, 80)
rf_x02_sp = 32'b00000000000000000000111111110100 (0xff4, 4084)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000000000111111111100 (0xffc, 4092)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000000000000011010000 (0xd0, 208)
rf_x12_a2 = 32'b00000000000000000000001001100000 (0x260, 608)
rf_x13_a3 = 32'b00000000000000000000000000000001 (0x1, 1)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001011111110001000010111110 (0x17f10be, 25104574)
instr_count = 32'b00000000101000100101111111101110 (0xa25fee, 10641390)
pc = 32'b00000000000000000000000010011100 (0x9c, 156)
epoch = 1'b0 (0x0, 0)
>> g++-10	cuttlesim	rv32e-primes	real: 2.479	user: 2.472	sys: 0.004
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/primes.rv32 -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010011000 (0x98, 152); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010010100 (0x94, 148); .data = 32'b00000000100000010010001000100011 (0x812223, 8462883); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010011000 (0x98, 152); .ppc = 32'b00000000000000000000000010011100 (0x9c, 156); .epoch = 1'b0 (0x0, 0); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010010100 (0x94, 148); .ppc = 32'b00000000000000000000000010011000 (0x98, 152); .epoch = 1'b0 (0x0, 0); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000010010000 (0x90, 144); .ppc = 32'b00000000000000000000000010010100 (0x94, 148); .epoch = 1'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111111100000010000000100010011 (0xff810113, 4286644499); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000000000111111110100 (0xff4, 4084); .rval2 = 32'b00000000000000000000111111111100 (0xffc, 4092); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000001010000 (0x50, 80)
rf_x02_sp = 32'b00000000000000000000111111110100 (0xff4, 4084)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000000000111111111100 (0xffc, 4092)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000000000000011010000 (0xd0, 208)
rf_x12_a2 = 32'b00000000000000000000001001100000 (0x260, 608)
rf_x13_a3 = 32'b00000000000000000000000000000001 (0x1, 1)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001011111110001000010111110 (0x17f10be, 25104574)
instr_count = 32'b00000000101000100101111111101110 (0xa25fee, 10641390)
pc = 32'b00000000000000000000000010011100 (0x9c, 156)
epoch = 1'b0 (0x0, 0)
>> g++-10	cuttlesim	rv32e-primes	real: 2.499	user: 2.498	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/primes.rv32 -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010011000 (0x98, 152); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010010100 (0x94, 148); .data = 32'b00000000100000010010001000100011 (0x812223, 8462883); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010011000 (0x98, 152); .ppc = 32'b00000000000000000000000010011100 (0x9c, 156); .epoch = 1'b0 (0x0, 0); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010010100 (0x94, 148); .ppc = 32'b00000000000000000000000010011000 (0x98, 152); .epoch = 1'b0 (0x0, 0); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000010010000 (0x90, 144); .ppc = 32'b00000000000000000000000010010100 (0x94, 148); .epoch = 1'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111111100000010000000100010011 (0xff810113, 4286644499); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000000000111111110100 (0xff4, 4084); .rval2 = 32'b00000000000000000000111111111100 (0xffc, 4092); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000001010000 (0x50, 80)
rf_x02_sp = 32'b00000000000000000000111111110100 (0xff4, 4084)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000000000111111111100 (0xffc, 4092)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000000000000011010000 (0xd0, 208)
rf_x12_a2 = 32'b00000000000000000000001001100000 (0x260, 608)
rf_x13_a3 = 32'b00000000000000000000000000000001 (0x1, 1)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001011111110001000010111110 (0x17f10be, 25104574)
instr_count = 32'b00000000101000100101111111101110 (0xa25fee, 10641390)
pc = 32'b00000000000000000000000010011100 (0x9c, 156)
epoch = 1'b0 (0x0, 0)
>> g++-10	cuttlesim	rv32e-primes	real: 2.521	user: 2.516	sys: 0.004
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/primes.rv32 -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010011000 (0x98, 152); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010010100 (0x94, 148); .data = 32'b00000000100000010010001000100011 (0x812223, 8462883); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010011000 (0x98, 152); .ppc = 32'b00000000000000000000000010011100 (0x9c, 156); .epoch = 1'b0 (0x0, 0); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010010100 (0x94, 148); .ppc = 32'b00000000000000000000000010011000 (0x98, 152); .epoch = 1'b0 (0x0, 0); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000010010000 (0x90, 144); .ppc = 32'b00000000000000000000000010010100 (0x94, 148); .epoch = 1'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111111100000010000000100010011 (0xff810113, 4286644499); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000000000111111110100 (0xff4, 4084); .rval2 = 32'b00000000000000000000111111111100 (0xffc, 4092); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000001010000 (0x50, 80)
rf_x02_sp = 32'b00000000000000000000111111110100 (0xff4, 4084)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000000000111111111100 (0xffc, 4092)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000000000000011010000 (0xd0, 208)
rf_x12_a2 = 32'b00000000000000000000001001100000 (0x260, 608)
rf_x13_a3 = 32'b00000000000000000000000000000001 (0x1, 1)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001011111110001000010111110 (0x17f10be, 25104574)
instr_count = 32'b00000000101000100101111111101110 (0xa25fee, 10641390)
pc = 32'b00000000000000000000000010011100 (0x9c, 156)
epoch = 1'b0 (0x0, 0)
>> g++-10	cuttlesim	rv32e-primes	real: 2.658	user: 2.649	sys: 0.008
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/primes.rv32 -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010011000 (0x98, 152); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010010100 (0x94, 148); .data = 32'b00000000100000010010001000100011 (0x812223, 8462883); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010011000 (0x98, 152); .ppc = 32'b00000000000000000000000010011100 (0x9c, 156); .epoch = 1'b0 (0x0, 0); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010010100 (0x94, 148); .ppc = 32'b00000000000000000000000010011000 (0x98, 152); .epoch = 1'b0 (0x0, 0); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000010010000 (0x90, 144); .ppc = 32'b00000000000000000000000010010100 (0x94, 148); .epoch = 1'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111111100000010000000100010011 (0xff810113, 4286644499); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000000000111111110100 (0xff4, 4084); .rval2 = 32'b00000000000000000000111111111100 (0xffc, 4092); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000001010000 (0x50, 80)
rf_x02_sp = 32'b00000000000000000000111111110100 (0xff4, 4084)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000000000111111111100 (0xffc, 4092)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000000000000011010000 (0xd0, 208)
rf_x12_a2 = 32'b00000000000000000000001001100000 (0x260, 608)
rf_x13_a3 = 32'b00000000000000000000000000000001 (0x1, 1)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001011111110001000010111110 (0x17f10be, 25104574)
instr_count = 32'b00000000101000100101111111101110 (0xa25fee, 10641390)
pc = 32'b00000000000000000000000010011100 (0x9c, 156)
epoch = 1'b0 (0x0, 0)
>> g++-10	cuttlesim	rv32e-primes	real: 2.578	user: 2.574	sys: 0.004
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/primes.rv32 -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010011000 (0x98, 152); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010010100 (0x94, 148); .data = 32'b00000000100000010010001000100011 (0x812223, 8462883); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010011000 (0x98, 152); .ppc = 32'b00000000000000000000000010011100 (0x9c, 156); .epoch = 1'b0 (0x0, 0); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010010100 (0x94, 148); .ppc = 32'b00000000000000000000000010011000 (0x98, 152); .epoch = 1'b0 (0x0, 0); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000010010000 (0x90, 144); .ppc = 32'b00000000000000000000000010010100 (0x94, 148); .epoch = 1'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111111100000010000000100010011 (0xff810113, 4286644499); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000000000111111110100 (0xff4, 4084); .rval2 = 32'b00000000000000000000111111111100 (0xffc, 4092); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000001010000 (0x50, 80)
rf_x02_sp = 32'b00000000000000000000111111110100 (0xff4, 4084)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000000000111111111100 (0xffc, 4092)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000000000000011010000 (0xd0, 208)
rf_x12_a2 = 32'b00000000000000000000001001100000 (0x260, 608)
rf_x13_a3 = 32'b00000000000000000000000000000001 (0x1, 1)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001011111110001000010111110 (0x17f10be, 25104574)
instr_count = 32'b00000000101000100101111111101110 (0xa25fee, 10641390)
pc = 32'b00000000000000000000000010011100 (0x9c, 156)
epoch = 1'b0 (0x0, 0)
>> g++-10	cuttlesim	rv32e-primes	real: 2.609	user: 2.600	sys: 0.008
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/primes.rv32 -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010011000 (0x98, 152); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010010100 (0x94, 148); .data = 32'b00000000100000010010001000100011 (0x812223, 8462883); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010011000 (0x98, 152); .ppc = 32'b00000000000000000000000010011100 (0x9c, 156); .epoch = 1'b0 (0x0, 0); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010010100 (0x94, 148); .ppc = 32'b00000000000000000000000010011000 (0x98, 152); .epoch = 1'b0 (0x0, 0); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000010010000 (0x90, 144); .ppc = 32'b00000000000000000000000010010100 (0x94, 148); .epoch = 1'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111111100000010000000100010011 (0xff810113, 4286644499); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000000000111111110100 (0xff4, 4084); .rval2 = 32'b00000000000000000000111111111100 (0xffc, 4092); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000001010000 (0x50, 80)
rf_x02_sp = 32'b00000000000000000000111111110100 (0xff4, 4084)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000000000111111111100 (0xffc, 4092)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000000000000011010000 (0xd0, 208)
rf_x12_a2 = 32'b00000000000000000000001001100000 (0x260, 608)
rf_x13_a3 = 32'b00000000000000000000000000000001 (0x1, 1)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001011111110001000010111110 (0x17f10be, 25104574)
instr_count = 32'b00000000101000100101111111101110 (0xa25fee, 10641390)
pc = 32'b00000000000000000000000010011100 (0x9c, 156)
epoch = 1'b0 (0x0, 0)
>> g++-10	cuttlesim	rv32e-primes	real: 2.472	user: 2.471	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/primes.rv32 -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010011000 (0x98, 152); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010010100 (0x94, 148); .data = 32'b00000000100000010010001000100011 (0x812223, 8462883); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010011000 (0x98, 152); .ppc = 32'b00000000000000000000000010011100 (0x9c, 156); .epoch = 1'b0 (0x0, 0); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010010100 (0x94, 148); .ppc = 32'b00000000000000000000000010011000 (0x98, 152); .epoch = 1'b0 (0x0, 0); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000010010000 (0x90, 144); .ppc = 32'b00000000000000000000000010010100 (0x94, 148); .epoch = 1'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111111100000010000000100010011 (0xff810113, 4286644499); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000000000111111110100 (0xff4, 4084); .rval2 = 32'b00000000000000000000111111111100 (0xffc, 4092); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000001010000 (0x50, 80)
rf_x02_sp = 32'b00000000000000000000111111110100 (0xff4, 4084)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000000000111111111100 (0xffc, 4092)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000000000000011010000 (0xd0, 208)
rf_x12_a2 = 32'b00000000000000000000001001100000 (0x260, 608)
rf_x13_a3 = 32'b00000000000000000000000000000001 (0x1, 1)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001011111110001000010111110 (0x17f10be, 25104574)
instr_count = 32'b00000000101000100101111111101110 (0xa25fee, 10641390)
pc = 32'b00000000000000000000000010011100 (0x9c, 156)
epoch = 1'b0 (0x0, 0)
>> g++-10	cuttlesim	rv32e-primes	real: 2.493	user: 2.479	sys: 0.012
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/primes.rv32 -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010011000 (0x98, 152); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010010100 (0x94, 148); .data = 32'b00000000100000010010001000100011 (0x812223, 8462883); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010011000 (0x98, 152); .ppc = 32'b00000000000000000000000010011100 (0x9c, 156); .epoch = 1'b0 (0x0, 0); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010010100 (0x94, 148); .ppc = 32'b00000000000000000000000010011000 (0x98, 152); .epoch = 1'b0 (0x0, 0); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000010010000 (0x90, 144); .ppc = 32'b00000000000000000000000010010100 (0x94, 148); .epoch = 1'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111111100000010000000100010011 (0xff810113, 4286644499); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000000000111111110100 (0xff4, 4084); .rval2 = 32'b00000000000000000000111111111100 (0xffc, 4092); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000001010000 (0x50, 80)
rf_x02_sp = 32'b00000000000000000000111111110100 (0xff4, 4084)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000000000111111111100 (0xffc, 4092)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b00000000000000000000000011010000 (0xd0, 208)
rf_x12_a2 = 32'b00000000000000000000001001100000 (0x260, 608)
rf_x13_a3 = 32'b00000000000000000000000000000001 (0x1, 1)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001011111110001000010111110 (0x17f10be, 25104574)
instr_count = 32'b00000000101000100101111111101110 (0xa25fee, 10641390)
pc = 32'b00000000000000000000000010011100 (0x9c, 156)
epoch = 1'b0 (0x0, 0)
>> g++-10	cuttlesim	rv32e-primes	real: 2.521	user: 2.521	sys: 0.000
+ for simulator in ${@:3}
+ bench_rv_1 g++-10 verilator rv32e primes
+ compiler=g++-10
+ simulator=verilator
+ design=rv32e
+ test=primes
++ realpath ../examples/rv/_objects/rv32e.v/
+ base=/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v
++ realpath ../examples/rv/tests/_build/rv32e/integ/
+ tests=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ
+ b='bench g++-10 verilator rv32e-primes'
+ make -C /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v clean
make: Entering directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v'
rm -rf obj_dir.opt
rm -rf obj_dir.trace
rm -f rvcore.verilator.vcd
rm -f rvcore.cuttlesim.opt
rm -f rvcore.cuttlesim.debug
rm -f rvcore.cuttlesim.perf
rm -f rvcore.cuttlesim.cov
rm -f rvcore.cuttlesim.s
rm -f rvcore.cuttlesim.out
rm -f rvcore.cuttlesim.vcd
rm -f rvcore.cuttlesim.perf.data
rm -f rvcore.cuttlesim.callgrind
rm -fr rvcore.cuttlesim.rr
rm -f *.gcov
rm -f top_ice40_usb.json
rm -f top_ice40_usb.json.log
rm -f top_ice40_usb.asc
rm -f top_ice40_usb.bin
rm -f top_ice40_usb.rpt
rm -f top_ice40_usb.json.v
make: Leaving directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v'
+ case $simulator in
+ make CXX=g++-10 -C /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v obj_dir.opt/Vtop
make: Entering directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v'
verilator +define+MEM_ADDRESS_WIDTH=10 +define+BRAM_RUNTIME_INIT+SIMULATION -CFLAGS -DVL_USER_FINISH -Wno-fatal -CFLAGS "-I /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v" --prefix Vtop --cc --exe  --Mdir obj_dir.opt --x-assign fast --x-initial fast --noassert -O3 -CFLAGS '-O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector ' -LDFLAGS '-O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector ' rvcore.verilator.cpp top.v
make -C obj_dir.opt -f Vtop.mk Vtop
make[1]: Entering directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/obj_dir.opt'
g++-10  -I.  -MMD -I/usr/local/share/verilator/include -I/usr/local/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=0 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow     -DVL_USER_FINISH -I /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector   -c -o rvcore.o ../rvcore.verilator.cpp
g++-10  -I.  -MMD -I/usr/local/share/verilator/include -I/usr/local/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=0 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow     -DVL_USER_FINISH -I /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector   -c -o verilated.o /usr/local/share/verilator/include/verilated.cpp
g++-10  -I.  -MMD -I/usr/local/share/verilator/include -I/usr/local/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=0 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow     -DVL_USER_FINISH -I /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector   -c -o verilated_dpi.o /usr/local/share/verilator/include/verilated_dpi.cpp
/usr/bin/perl /usr/local/share/verilator/bin/verilator_includer -DVL_INCLUDE_OPT=include Vtop.cpp Vtop_top.cpp Vtop_rv32.cpp > Vtop__ALLcls.cpp
g++-10  -I.  -MMD -I/usr/local/share/verilator/include -I/usr/local/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=0 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow     -DVL_USER_FINISH -I /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector   -c -o Vtop__ALLcls.o Vtop__ALLcls.cpp
/usr/bin/perl /usr/local/share/verilator/bin/verilator_includer -DVL_INCLUDE_OPT=include Vtop__Dpi.cpp Vtop__Syms.cpp > Vtop__ALLsup.cpp
g++-10  -I.  -MMD -I/usr/local/share/verilator/include -I/usr/local/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=0 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow     -DVL_USER_FINISH -I /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector   -c -o Vtop__ALLsup.o Vtop__ALLsup.cpp
ar -cr Vtop__ALL.a Vtop__ALLcls.o Vtop__ALLsup.o
ranlib Vtop__ALL.a
g++    rvcore.o verilated.o verilated_dpi.o Vtop__ALL.a   -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector  -o Vtop -lm -lstdc++ 
make[1]: Leaving directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/obj_dir.opt'
make: Leaving directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v'
+ bench g++-10 verilator rv32e-primes /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/primes.vmh -1
+ compiler=g++-10
+ simulator=verilator
+ input=rv32e-primes
+ export 'TIMEFORMAT=>> g++-10	verilator	rv32e-primes	real: %3R	user: %3U	sys: %3S'
+ TIMEFORMAT='>> g++-10	verilator	rv32e-primes	real: %3R	user: %3U	sys: %3S'
+ echo '<< verilator rv32e-primes'
<< verilator rv32e-primes
++ seq 1 10
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/primes.vmh -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
>> g++-10	verilator	rv32e-primes	real: 7.404	user: 7.402	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/primes.vmh -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
>> g++-10	verilator	rv32e-primes	real: 7.231	user: 7.226	sys: 0.004
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/primes.vmh -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
>> g++-10	verilator	rv32e-primes	real: 7.257	user: 7.246	sys: 0.008
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/primes.vmh -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
>> g++-10	verilator	rv32e-primes	real: 7.174	user: 7.170	sys: 0.004
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/primes.vmh -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
>> g++-10	verilator	rv32e-primes	real: 7.291	user: 7.291	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/primes.vmh -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
>> g++-10	verilator	rv32e-primes	real: 7.250	user: 7.240	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/primes.vmh -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
>> g++-10	verilator	rv32e-primes	real: 7.219	user: 7.217	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/primes.vmh -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
>> g++-10	verilator	rv32e-primes	real: 7.434	user: 7.382	sys: 0.008
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/primes.vmh -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
>> g++-10	verilator	rv32e-primes	real: 7.226	user: 7.195	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/primes.vmh -1
  +++-+*+---+-+---+-+---+----
  *+-+-----+---+-+---+-----+-
  ----+-+-----+---+-+-----+--
  -+-----+-------+---+-+---+-
  +---+-------------+---+----
  -+-+---------+-+-----+-----
  +---+-----+-----+-+--------
  -+-+---+-+-----------+-----
  ---&--+---+-+---+-----+-+--
  -------+-----+-----+-----+-
  +-----+---+-+&--------+----
  ---------+---+-+---+-------
  ------+-----+---------+-+--
  PASS
>> g++-10	verilator	rv32e-primes	real: 7.209	user: 7.183	sys: 0.000
+ bench_rv rv32i morse cuttlesim verilator
+ for compiler in "clang++" "g++-9" "g++-10"
+ for simulator in ${@:3}
+ bench_rv_1 clang++ cuttlesim rv32i morse
+ compiler=clang++
+ simulator=cuttlesim
+ design=rv32i
+ test=morse
++ realpath ../examples/rv/_objects/rv32i.v/
+ base=/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v
++ realpath ../examples/rv/tests/_build/rv32i/integ/
+ tests=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ
+ b='bench clang++ cuttlesim rv32i-morse'
+ make -C /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v clean
make: Entering directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v'
rm -rf obj_dir.opt
rm -rf obj_dir.trace
rm -f rvcore.verilator.vcd
rm -f rvcore.cuttlesim.opt
rm -f rvcore.cuttlesim.debug
rm -f rvcore.cuttlesim.perf
rm -f rvcore.cuttlesim.cov
rm -f rvcore.cuttlesim.s
rm -f rvcore.cuttlesim.out
rm -f rvcore.cuttlesim.vcd
rm -f rvcore.cuttlesim.perf.data
rm -f rvcore.cuttlesim.callgrind
rm -fr rvcore.cuttlesim.rr
rm -f *.gcov
rm -f top_ice40_usb.json
rm -f top_ice40_usb.json.log
rm -f top_ice40_usb.asc
rm -f top_ice40_usb.bin
rm -f top_ice40_usb.rpt
rm -f top_ice40_usb.json.v
make: Leaving directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v'
+ case $simulator in
+ make CXX=clang++ -C /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v rvcore.cuttlesim.opt
make: Entering directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v'
clang++ --std=c++17  -Wall -Wextra '-DSIM_VCD_SCOPES={"TOP", "top", "rv_core",}' -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector rvcore.cuttlesim.cpp -o "rvcore.cuttlesim.opt"
In file included from rvcore.cuttlesim.cpp:5:
In file included from ./rv32.hpp:10:
./cuttlesim.hpp:87:9: warning: Bignum truncation is broken in Boost < 1.68; if you run into issues, try upgrading. [-W#pragma-messages]
#pragma message("Bignum truncation is broken in Boost < 1.68; if you run into issues, try upgrading.")
        ^
1 warning generated.
make: Leaving directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v'
+ bench clang++ cuttlesim rv32i-morse /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/morse.rv32 -1
+ compiler=clang++
+ simulator=cuttlesim
+ input=rv32i-morse
+ export 'TIMEFORMAT=>> clang++	cuttlesim	rv32i-morse	real: %3R	user: %3U	sys: %3S'
+ TIMEFORMAT='>> clang++	cuttlesim	rv32i-morse	real: %3R	user: %3U	sys: %3S'
+ echo '<< cuttlesim rv32i-morse'
<< cuttlesim rv32i-morse
++ seq 1 10
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/morse.rv32 -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b0 (0x0, 0)
rf_x12_a2 = 32'b0 (0x0, 0)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b0 (0x0, 0)
mulState_operand2 = 32'b0 (0x0, 0)
mulState_result = 64'b0 (0x0, 0)
mulState_n_step = 5'b0 (0x0, 0)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001001010011001100011010110 (0x12998d6, 19503318)
instr_count = 32'b00000000011101110000101100101001 (0x770b29, 7801641)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b1 (0x1, 1)
>> clang++	cuttlesim	rv32i-morse	real: 2.979	user: 2.970	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/morse.rv32 -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b0 (0x0, 0)
rf_x12_a2 = 32'b0 (0x0, 0)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b0 (0x0, 0)
mulState_operand2 = 32'b0 (0x0, 0)
mulState_result = 64'b0 (0x0, 0)
mulState_n_step = 5'b0 (0x0, 0)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001001010011001100011010110 (0x12998d6, 19503318)
instr_count = 32'b00000000011101110000101100101001 (0x770b29, 7801641)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b1 (0x1, 1)
>> clang++	cuttlesim	rv32i-morse	real: 2.993	user: 2.978	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/morse.rv32 -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b0 (0x0, 0)
rf_x12_a2 = 32'b0 (0x0, 0)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b0 (0x0, 0)
mulState_operand2 = 32'b0 (0x0, 0)
mulState_result = 64'b0 (0x0, 0)
mulState_n_step = 5'b0 (0x0, 0)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001001010011001100011010110 (0x12998d6, 19503318)
instr_count = 32'b00000000011101110000101100101001 (0x770b29, 7801641)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b1 (0x1, 1)
>> clang++	cuttlesim	rv32i-morse	real: 2.880	user: 2.879	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/morse.rv32 -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b0 (0x0, 0)
rf_x12_a2 = 32'b0 (0x0, 0)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b0 (0x0, 0)
mulState_operand2 = 32'b0 (0x0, 0)
mulState_result = 64'b0 (0x0, 0)
mulState_n_step = 5'b0 (0x0, 0)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001001010011001100011010110 (0x12998d6, 19503318)
instr_count = 32'b00000000011101110000101100101001 (0x770b29, 7801641)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b1 (0x1, 1)
>> clang++	cuttlesim	rv32i-morse	real: 2.902	user: 2.898	sys: 0.004
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/morse.rv32 -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b0 (0x0, 0)
rf_x12_a2 = 32'b0 (0x0, 0)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b0 (0x0, 0)
mulState_operand2 = 32'b0 (0x0, 0)
mulState_result = 64'b0 (0x0, 0)
mulState_n_step = 5'b0 (0x0, 0)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001001010011001100011010110 (0x12998d6, 19503318)
instr_count = 32'b00000000011101110000101100101001 (0x770b29, 7801641)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b1 (0x1, 1)
>> clang++	cuttlesim	rv32i-morse	real: 2.929	user: 2.891	sys: 0.004
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/morse.rv32 -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b0 (0x0, 0)
rf_x12_a2 = 32'b0 (0x0, 0)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b0 (0x0, 0)
mulState_operand2 = 32'b0 (0x0, 0)
mulState_result = 64'b0 (0x0, 0)
mulState_n_step = 5'b0 (0x0, 0)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001001010011001100011010110 (0x12998d6, 19503318)
instr_count = 32'b00000000011101110000101100101001 (0x770b29, 7801641)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b1 (0x1, 1)
>> clang++	cuttlesim	rv32i-morse	real: 2.945	user: 2.944	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/morse.rv32 -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b0 (0x0, 0)
rf_x12_a2 = 32'b0 (0x0, 0)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b0 (0x0, 0)
mulState_operand2 = 32'b0 (0x0, 0)
mulState_result = 64'b0 (0x0, 0)
mulState_n_step = 5'b0 (0x0, 0)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001001010011001100011010110 (0x12998d6, 19503318)
instr_count = 32'b00000000011101110000101100101001 (0x770b29, 7801641)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b1 (0x1, 1)
>> clang++	cuttlesim	rv32i-morse	real: 3.095	user: 3.084	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/morse.rv32 -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b0 (0x0, 0)
rf_x12_a2 = 32'b0 (0x0, 0)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b0 (0x0, 0)
mulState_operand2 = 32'b0 (0x0, 0)
mulState_result = 64'b0 (0x0, 0)
mulState_n_step = 5'b0 (0x0, 0)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001001010011001100011010110 (0x12998d6, 19503318)
instr_count = 32'b00000000011101110000101100101001 (0x770b29, 7801641)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b1 (0x1, 1)
>> clang++	cuttlesim	rv32i-morse	real: 2.976	user: 2.889	sys: 0.008
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/morse.rv32 -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b0 (0x0, 0)
rf_x12_a2 = 32'b0 (0x0, 0)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b0 (0x0, 0)
mulState_operand2 = 32'b0 (0x0, 0)
mulState_result = 64'b0 (0x0, 0)
mulState_n_step = 5'b0 (0x0, 0)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001001010011001100011010110 (0x12998d6, 19503318)
instr_count = 32'b00000000011101110000101100101001 (0x770b29, 7801641)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b1 (0x1, 1)
>> clang++	cuttlesim	rv32i-morse	real: 2.912	user: 2.911	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/morse.rv32 -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b0 (0x0, 0)
rf_x12_a2 = 32'b0 (0x0, 0)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b0 (0x0, 0)
mulState_operand2 = 32'b0 (0x0, 0)
mulState_result = 64'b0 (0x0, 0)
mulState_n_step = 5'b0 (0x0, 0)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001001010011001100011010110 (0x12998d6, 19503318)
instr_count = 32'b00000000011101110000101100101001 (0x770b29, 7801641)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b1 (0x1, 1)
>> clang++	cuttlesim	rv32i-morse	real: 2.966	user: 2.924	sys: 0.000
+ for simulator in ${@:3}
+ bench_rv_1 clang++ verilator rv32i morse
+ compiler=clang++
+ simulator=verilator
+ design=rv32i
+ test=morse
++ realpath ../examples/rv/_objects/rv32i.v/
+ base=/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v
++ realpath ../examples/rv/tests/_build/rv32i/integ/
+ tests=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ
+ b='bench clang++ verilator rv32i-morse'
+ make -C /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v clean
make: Entering directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v'
rm -rf obj_dir.opt
rm -rf obj_dir.trace
rm -f rvcore.verilator.vcd
rm -f rvcore.cuttlesim.opt
rm -f rvcore.cuttlesim.debug
rm -f rvcore.cuttlesim.perf
rm -f rvcore.cuttlesim.cov
rm -f rvcore.cuttlesim.s
rm -f rvcore.cuttlesim.out
rm -f rvcore.cuttlesim.vcd
rm -f rvcore.cuttlesim.perf.data
rm -f rvcore.cuttlesim.callgrind
rm -fr rvcore.cuttlesim.rr
rm -f *.gcov
rm -f top_ice40_usb.json
rm -f top_ice40_usb.json.log
rm -f top_ice40_usb.asc
rm -f top_ice40_usb.bin
rm -f top_ice40_usb.rpt
rm -f top_ice40_usb.json.v
make: Leaving directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v'
+ case $simulator in
+ make CXX=clang++ -C /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v obj_dir.opt/Vtop
make: Entering directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v'
verilator +define+MEM_ADDRESS_WIDTH=14 +define+BRAM_RUNTIME_INIT+SIMULATION -CFLAGS -DVL_USER_FINISH -Wno-fatal -CFLAGS "-I /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v" --prefix Vtop --cc --exe --compiler clang -CFLAGS -fPIC --Mdir obj_dir.opt --x-assign fast --x-initial fast --noassert -O3 -CFLAGS '-O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector ' -LDFLAGS '-O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector ' rvcore.verilator.cpp top.v
make -C obj_dir.opt -f Vtop.mk Vtop
make[1]: Entering directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt'
clang++  -I.  -MMD -I/usr/local/share/verilator/include -I/usr/local/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=0 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow     -DVL_USER_FINISH -I /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v -fPIC -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector   -c -o rvcore.o ../rvcore.verilator.cpp
warning: unknown warning option '-Wno-unused-but-set-variable'; did you mean '-Wno-unused-const-variable'? [-Wunknown-warning-option]
1 warning generated.
clang++  -I.  -MMD -I/usr/local/share/verilator/include -I/usr/local/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=0 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow     -DVL_USER_FINISH -I /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v -fPIC -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector   -c -o verilated.o /usr/local/share/verilator/include/verilated.cpp
warning: unknown warning option '-Wno-unused-but-set-variable'; did you mean '-Wno-unused-const-variable'? [-Wunknown-warning-option]
1 warning generated.
clang++  -I.  -MMD -I/usr/local/share/verilator/include -I/usr/local/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=0 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow     -DVL_USER_FINISH -I /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v -fPIC -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector   -c -o verilated_dpi.o /usr/local/share/verilator/include/verilated_dpi.cpp
warning: unknown warning option '-Wno-unused-but-set-variable'; did you mean '-Wno-unused-const-variable'? [-Wunknown-warning-option]
1 warning generated.
/usr/bin/perl /usr/local/share/verilator/bin/verilator_includer -DVL_INCLUDE_OPT=include Vtop.cpp Vtop_top.cpp Vtop_rv32.cpp > Vtop__ALLcls.cpp
clang++  -I.  -MMD -I/usr/local/share/verilator/include -I/usr/local/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=0 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow     -DVL_USER_FINISH -I /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v -fPIC -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector   -c -o Vtop__ALLcls.o Vtop__ALLcls.cpp
warning: unknown warning option '-Wno-unused-but-set-variable'; did you mean '-Wno-unused-const-variable'? [-Wunknown-warning-option]
1 warning generated.
/usr/bin/perl /usr/local/share/verilator/bin/verilator_includer -DVL_INCLUDE_OPT=include Vtop__Dpi.cpp Vtop__Syms.cpp > Vtop__ALLsup.cpp
clang++  -I.  -MMD -I/usr/local/share/verilator/include -I/usr/local/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=0 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow     -DVL_USER_FINISH -I /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v -fPIC -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector   -c -o Vtop__ALLsup.o Vtop__ALLsup.cpp
warning: unknown warning option '-Wno-unused-but-set-variable'; did you mean '-Wno-unused-const-variable'? [-Wunknown-warning-option]
1 warning generated.
ar -cr Vtop__ALL.a Vtop__ALLcls.o Vtop__ALLsup.o
ranlib Vtop__ALL.a
g++    rvcore.o verilated.o verilated_dpi.o Vtop__ALL.a   -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector  -o Vtop -lm -lstdc++ 
make[1]: Leaving directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt'
make: Leaving directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v'
+ bench clang++ verilator rv32i-morse /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/morse.vmh -1
+ compiler=clang++
+ simulator=verilator
+ input=rv32i-morse
+ export 'TIMEFORMAT=>> clang++	verilator	rv32i-morse	real: %3R	user: %3U	sys: %3S'
+ TIMEFORMAT='>> clang++	verilator	rv32i-morse	real: %3R	user: %3U	sys: %3S'
+ echo '<< verilator rv32i-morse'
<< verilator rv32i-morse
++ seq 1 10
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/morse.vmh -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
>> clang++	verilator	rv32i-morse	real: 8.364	user: 8.362	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/morse.vmh -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
>> clang++	verilator	rv32i-morse	real: 7.630	user: 7.627	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/morse.vmh -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
>> clang++	verilator	rv32i-morse	real: 7.255	user: 7.251	sys: 0.004
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/morse.vmh -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
>> clang++	verilator	rv32i-morse	real: 7.398	user: 7.375	sys: 0.004
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/morse.vmh -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
>> clang++	verilator	rv32i-morse	real: 7.477	user: 7.390	sys: 0.016
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/morse.vmh -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
>> clang++	verilator	rv32i-morse	real: 7.442	user: 7.419	sys: 0.008
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/morse.vmh -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
>> clang++	verilator	rv32i-morse	real: 7.832	user: 7.815	sys: 0.008
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/morse.vmh -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
>> clang++	verilator	rv32i-morse	real: 7.140	user: 7.130	sys: 0.004
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/morse.vmh -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
>> clang++	verilator	rv32i-morse	real: 7.257	user: 7.177	sys: 0.004
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/morse.vmh -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
>> clang++	verilator	rv32i-morse	real: 7.288	user: 7.284	sys: 0.000
+ for compiler in "clang++" "g++-9" "g++-10"
+ for simulator in ${@:3}
+ bench_rv_1 g++-9 cuttlesim rv32i morse
+ compiler=g++-9
+ simulator=cuttlesim
+ design=rv32i
+ test=morse
++ realpath ../examples/rv/_objects/rv32i.v/
+ base=/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v
++ realpath ../examples/rv/tests/_build/rv32i/integ/
+ tests=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ
+ b='bench g++-9 cuttlesim rv32i-morse'
+ make -C /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v clean
make: Entering directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v'
rm -rf obj_dir.opt
rm -rf obj_dir.trace
rm -f rvcore.verilator.vcd
rm -f rvcore.cuttlesim.opt
rm -f rvcore.cuttlesim.debug
rm -f rvcore.cuttlesim.perf
rm -f rvcore.cuttlesim.cov
rm -f rvcore.cuttlesim.s
rm -f rvcore.cuttlesim.out
rm -f rvcore.cuttlesim.vcd
rm -f rvcore.cuttlesim.perf.data
rm -f rvcore.cuttlesim.callgrind
rm -fr rvcore.cuttlesim.rr
rm -f *.gcov
rm -f top_ice40_usb.json
rm -f top_ice40_usb.json.log
rm -f top_ice40_usb.asc
rm -f top_ice40_usb.bin
rm -f top_ice40_usb.rpt
rm -f top_ice40_usb.json.v
make: Leaving directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v'
+ case $simulator in
+ make CXX=g++-9 -C /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v rvcore.cuttlesim.opt
make: Entering directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v'
g++-9 --std=c++17  -Wall -Wextra '-DSIM_VCD_SCOPES={"TOP", "top", "rv_core",}' -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector rvcore.cuttlesim.cpp -o "rvcore.cuttlesim.opt"
In file included from rv32.hpp:10,
                 from rvcore.cuttlesim.cpp:5:
cuttlesim.hpp:87:102: note: #pragma message: Bignum truncation is broken in Boost < 1.68; if you run into issues, try upgrading.
   87 | #pragma message("Bignum truncation is broken in Boost < 1.68; if you run into issues, try upgrading.")
      |                                                                                                      ^
make: Leaving directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v'
+ bench g++-9 cuttlesim rv32i-morse /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/morse.rv32 -1
+ compiler=g++-9
+ simulator=cuttlesim
+ input=rv32i-morse
+ export 'TIMEFORMAT=>> g++-9	cuttlesim	rv32i-morse	real: %3R	user: %3U	sys: %3S'
+ TIMEFORMAT='>> g++-9	cuttlesim	rv32i-morse	real: %3R	user: %3U	sys: %3S'
+ echo '<< cuttlesim rv32i-morse'
<< cuttlesim rv32i-morse
++ seq 1 10
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/morse.rv32 -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b0 (0x0, 0)
rf_x12_a2 = 32'b0 (0x0, 0)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b0 (0x0, 0)
mulState_operand2 = 32'b0 (0x0, 0)
mulState_result = 64'b0 (0x0, 0)
mulState_n_step = 5'b0 (0x0, 0)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001001010011001100011010110 (0x12998d6, 19503318)
instr_count = 32'b00000000011101110000101100101001 (0x770b29, 7801641)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b1 (0x1, 1)
>> g++-9	cuttlesim	rv32i-morse	real: 3.158	user: 3.156	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/morse.rv32 -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b0 (0x0, 0)
rf_x12_a2 = 32'b0 (0x0, 0)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b0 (0x0, 0)
mulState_operand2 = 32'b0 (0x0, 0)
mulState_result = 64'b0 (0x0, 0)
mulState_n_step = 5'b0 (0x0, 0)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001001010011001100011010110 (0x12998d6, 19503318)
instr_count = 32'b00000000011101110000101100101001 (0x770b29, 7801641)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b1 (0x1, 1)
>> g++-9	cuttlesim	rv32i-morse	real: 3.106	user: 3.105	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/morse.rv32 -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b0 (0x0, 0)
rf_x12_a2 = 32'b0 (0x0, 0)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b0 (0x0, 0)
mulState_operand2 = 32'b0 (0x0, 0)
mulState_result = 64'b0 (0x0, 0)
mulState_n_step = 5'b0 (0x0, 0)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001001010011001100011010110 (0x12998d6, 19503318)
instr_count = 32'b00000000011101110000101100101001 (0x770b29, 7801641)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b1 (0x1, 1)
>> g++-9	cuttlesim	rv32i-morse	real: 3.101	user: 3.097	sys: 0.004
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/morse.rv32 -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b0 (0x0, 0)
rf_x12_a2 = 32'b0 (0x0, 0)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b0 (0x0, 0)
mulState_operand2 = 32'b0 (0x0, 0)
mulState_result = 64'b0 (0x0, 0)
mulState_n_step = 5'b0 (0x0, 0)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001001010011001100011010110 (0x12998d6, 19503318)
instr_count = 32'b00000000011101110000101100101001 (0x770b29, 7801641)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b1 (0x1, 1)
>> g++-9	cuttlesim	rv32i-morse	real: 3.145	user: 3.145	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/morse.rv32 -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b0 (0x0, 0)
rf_x12_a2 = 32'b0 (0x0, 0)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b0 (0x0, 0)
mulState_operand2 = 32'b0 (0x0, 0)
mulState_result = 64'b0 (0x0, 0)
mulState_n_step = 5'b0 (0x0, 0)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001001010011001100011010110 (0x12998d6, 19503318)
instr_count = 32'b00000000011101110000101100101001 (0x770b29, 7801641)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b1 (0x1, 1)
>> g++-9	cuttlesim	rv32i-morse	real: 3.098	user: 3.063	sys: 0.004
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/morse.rv32 -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b0 (0x0, 0)
rf_x12_a2 = 32'b0 (0x0, 0)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b0 (0x0, 0)
mulState_operand2 = 32'b0 (0x0, 0)
mulState_result = 64'b0 (0x0, 0)
mulState_n_step = 5'b0 (0x0, 0)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001001010011001100011010110 (0x12998d6, 19503318)
instr_count = 32'b00000000011101110000101100101001 (0x770b29, 7801641)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b1 (0x1, 1)
>> g++-9	cuttlesim	rv32i-morse	real: 3.265	user: 3.264	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/morse.rv32 -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b0 (0x0, 0)
rf_x12_a2 = 32'b0 (0x0, 0)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b0 (0x0, 0)
mulState_operand2 = 32'b0 (0x0, 0)
mulState_result = 64'b0 (0x0, 0)
mulState_n_step = 5'b0 (0x0, 0)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001001010011001100011010110 (0x12998d6, 19503318)
instr_count = 32'b00000000011101110000101100101001 (0x770b29, 7801641)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b1 (0x1, 1)
>> g++-9	cuttlesim	rv32i-morse	real: 3.484	user: 3.429	sys: 0.004
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/morse.rv32 -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b0 (0x0, 0)
rf_x12_a2 = 32'b0 (0x0, 0)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b0 (0x0, 0)
mulState_operand2 = 32'b0 (0x0, 0)
mulState_result = 64'b0 (0x0, 0)
mulState_n_step = 5'b0 (0x0, 0)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001001010011001100011010110 (0x12998d6, 19503318)
instr_count = 32'b00000000011101110000101100101001 (0x770b29, 7801641)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b1 (0x1, 1)
>> g++-9	cuttlesim	rv32i-morse	real: 3.268	user: 3.264	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/morse.rv32 -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b0 (0x0, 0)
rf_x12_a2 = 32'b0 (0x0, 0)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b0 (0x0, 0)
mulState_operand2 = 32'b0 (0x0, 0)
mulState_result = 64'b0 (0x0, 0)
mulState_n_step = 5'b0 (0x0, 0)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001001010011001100011010110 (0x12998d6, 19503318)
instr_count = 32'b00000000011101110000101100101001 (0x770b29, 7801641)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b1 (0x1, 1)
>> g++-9	cuttlesim	rv32i-morse	real: 3.140	user: 3.135	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/morse.rv32 -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b0 (0x0, 0)
rf_x12_a2 = 32'b0 (0x0, 0)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b0 (0x0, 0)
mulState_operand2 = 32'b0 (0x0, 0)
mulState_result = 64'b0 (0x0, 0)
mulState_n_step = 5'b0 (0x0, 0)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001001010011001100011010110 (0x12998d6, 19503318)
instr_count = 32'b00000000011101110000101100101001 (0x770b29, 7801641)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b1 (0x1, 1)
>> g++-9	cuttlesim	rv32i-morse	real: 3.105	user: 3.105	sys: 0.000
+ for simulator in ${@:3}
+ bench_rv_1 g++-9 verilator rv32i morse
+ compiler=g++-9
+ simulator=verilator
+ design=rv32i
+ test=morse
++ realpath ../examples/rv/_objects/rv32i.v/
+ base=/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v
++ realpath ../examples/rv/tests/_build/rv32i/integ/
+ tests=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ
+ b='bench g++-9 verilator rv32i-morse'
+ make -C /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v clean
make: Entering directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v'
rm -rf obj_dir.opt
rm -rf obj_dir.trace
rm -f rvcore.verilator.vcd
rm -f rvcore.cuttlesim.opt
rm -f rvcore.cuttlesim.debug
rm -f rvcore.cuttlesim.perf
rm -f rvcore.cuttlesim.cov
rm -f rvcore.cuttlesim.s
rm -f rvcore.cuttlesim.out
rm -f rvcore.cuttlesim.vcd
rm -f rvcore.cuttlesim.perf.data
rm -f rvcore.cuttlesim.callgrind
rm -fr rvcore.cuttlesim.rr
rm -f *.gcov
rm -f top_ice40_usb.json
rm -f top_ice40_usb.json.log
rm -f top_ice40_usb.asc
rm -f top_ice40_usb.bin
rm -f top_ice40_usb.rpt
rm -f top_ice40_usb.json.v
make: Leaving directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v'
+ case $simulator in
+ make CXX=g++-9 -C /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v obj_dir.opt/Vtop
make: Entering directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v'
verilator +define+MEM_ADDRESS_WIDTH=14 +define+BRAM_RUNTIME_INIT+SIMULATION -CFLAGS -DVL_USER_FINISH -Wno-fatal -CFLAGS "-I /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v" --prefix Vtop --cc --exe  --Mdir obj_dir.opt --x-assign fast --x-initial fast --noassert -O3 -CFLAGS '-O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector ' -LDFLAGS '-O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector ' rvcore.verilator.cpp top.v
make -C obj_dir.opt -f Vtop.mk Vtop
make[1]: Entering directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt'
g++-9  -I.  -MMD -I/usr/local/share/verilator/include -I/usr/local/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=0 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow     -DVL_USER_FINISH -I /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector   -c -o rvcore.o ../rvcore.verilator.cpp
g++-9  -I.  -MMD -I/usr/local/share/verilator/include -I/usr/local/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=0 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow     -DVL_USER_FINISH -I /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector   -c -o verilated.o /usr/local/share/verilator/include/verilated.cpp
g++-9  -I.  -MMD -I/usr/local/share/verilator/include -I/usr/local/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=0 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow     -DVL_USER_FINISH -I /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector   -c -o verilated_dpi.o /usr/local/share/verilator/include/verilated_dpi.cpp
/usr/bin/perl /usr/local/share/verilator/bin/verilator_includer -DVL_INCLUDE_OPT=include Vtop.cpp Vtop_top.cpp Vtop_rv32.cpp > Vtop__ALLcls.cpp
g++-9  -I.  -MMD -I/usr/local/share/verilator/include -I/usr/local/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=0 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow     -DVL_USER_FINISH -I /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector   -c -o Vtop__ALLcls.o Vtop__ALLcls.cpp
/usr/bin/perl /usr/local/share/verilator/bin/verilator_includer -DVL_INCLUDE_OPT=include Vtop__Dpi.cpp Vtop__Syms.cpp > Vtop__ALLsup.cpp
g++-9  -I.  -MMD -I/usr/local/share/verilator/include -I/usr/local/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=0 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow     -DVL_USER_FINISH -I /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector   -c -o Vtop__ALLsup.o Vtop__ALLsup.cpp
ar -cr Vtop__ALL.a Vtop__ALLcls.o Vtop__ALLsup.o
ranlib Vtop__ALL.a
g++    rvcore.o verilated.o verilated_dpi.o Vtop__ALL.a   -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector  -o Vtop -lm -lstdc++ 
make[1]: Leaving directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt'
make: Leaving directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v'
+ bench g++-9 verilator rv32i-morse /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/morse.vmh -1
+ compiler=g++-9
+ simulator=verilator
+ input=rv32i-morse
+ export 'TIMEFORMAT=>> g++-9	verilator	rv32i-morse	real: %3R	user: %3U	sys: %3S'
+ TIMEFORMAT='>> g++-9	verilator	rv32i-morse	real: %3R	user: %3U	sys: %3S'
+ echo '<< verilator rv32i-morse'
<< verilator rv32i-morse
++ seq 1 10
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/morse.vmh -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
>> g++-9	verilator	rv32i-morse	real: 8.238	user: 8.233	sys: 0.004
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/morse.vmh -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
>> g++-9	verilator	rv32i-morse	real: 9.264	user: 9.232	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/morse.vmh -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
>> g++-9	verilator	rv32i-morse	real: 9.150	user: 9.146	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/morse.vmh -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
>> g++-9	verilator	rv32i-morse	real: 8.222	user: 8.216	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/morse.vmh -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
>> g++-9	verilator	rv32i-morse	real: 8.129	user: 8.125	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/morse.vmh -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
>> g++-9	verilator	rv32i-morse	real: 8.573	user: 8.572	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/morse.vmh -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
>> g++-9	verilator	rv32i-morse	real: 8.037	user: 8.032	sys: 0.004
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/morse.vmh -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
>> g++-9	verilator	rv32i-morse	real: 8.057	user: 8.026	sys: 0.008
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/morse.vmh -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
>> g++-9	verilator	rv32i-morse	real: 8.117	user: 8.113	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/morse.vmh -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
>> g++-9	verilator	rv32i-morse	real: 8.131	user: 8.130	sys: 0.000
+ for compiler in "clang++" "g++-9" "g++-10"
+ for simulator in ${@:3}
+ bench_rv_1 g++-10 cuttlesim rv32i morse
+ compiler=g++-10
+ simulator=cuttlesim
+ design=rv32i
+ test=morse
++ realpath ../examples/rv/_objects/rv32i.v/
+ base=/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v
++ realpath ../examples/rv/tests/_build/rv32i/integ/
+ tests=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ
+ b='bench g++-10 cuttlesim rv32i-morse'
+ make -C /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v clean
make: Entering directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v'
rm -rf obj_dir.opt
rm -rf obj_dir.trace
rm -f rvcore.verilator.vcd
rm -f rvcore.cuttlesim.opt
rm -f rvcore.cuttlesim.debug
rm -f rvcore.cuttlesim.perf
rm -f rvcore.cuttlesim.cov
rm -f rvcore.cuttlesim.s
rm -f rvcore.cuttlesim.out
rm -f rvcore.cuttlesim.vcd
rm -f rvcore.cuttlesim.perf.data
rm -f rvcore.cuttlesim.callgrind
rm -fr rvcore.cuttlesim.rr
rm -f *.gcov
rm -f top_ice40_usb.json
rm -f top_ice40_usb.json.log
rm -f top_ice40_usb.asc
rm -f top_ice40_usb.bin
rm -f top_ice40_usb.rpt
rm -f top_ice40_usb.json.v
make: Leaving directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v'
+ case $simulator in
+ make CXX=g++-10 -C /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v rvcore.cuttlesim.opt
make: Entering directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v'
g++-10 --std=c++17  -Wall -Wextra '-DSIM_VCD_SCOPES={"TOP", "top", "rv_core",}' -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector rvcore.cuttlesim.cpp -o "rvcore.cuttlesim.opt"
In file included from rv32.hpp:10,
                 from rvcore.cuttlesim.cpp:5:
cuttlesim.hpp:87:102: note: ‘#pragma message: Bignum truncation is broken in Boost < 1.68; if you run into issues, try upgrading.’
   87 | #pragma message("Bignum truncation is broken in Boost < 1.68; if you run into issues, try upgrading.")
      |                                                                                                      ^
make: Leaving directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v'
+ bench g++-10 cuttlesim rv32i-morse /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/morse.rv32 -1
+ compiler=g++-10
+ simulator=cuttlesim
+ input=rv32i-morse
+ export 'TIMEFORMAT=>> g++-10	cuttlesim	rv32i-morse	real: %3R	user: %3U	sys: %3S'
+ TIMEFORMAT='>> g++-10	cuttlesim	rv32i-morse	real: %3R	user: %3U	sys: %3S'
+ echo '<< cuttlesim rv32i-morse'
<< cuttlesim rv32i-morse
++ seq 1 10
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/morse.rv32 -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b0 (0x0, 0)
rf_x12_a2 = 32'b0 (0x0, 0)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b0 (0x0, 0)
mulState_operand2 = 32'b0 (0x0, 0)
mulState_result = 64'b0 (0x0, 0)
mulState_n_step = 5'b0 (0x0, 0)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001001010011001100011010110 (0x12998d6, 19503318)
instr_count = 32'b00000000011101110000101100101001 (0x770b29, 7801641)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b1 (0x1, 1)
>> g++-10	cuttlesim	rv32i-morse	real: 4.200	user: 4.197	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/morse.rv32 -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b0 (0x0, 0)
rf_x12_a2 = 32'b0 (0x0, 0)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b0 (0x0, 0)
mulState_operand2 = 32'b0 (0x0, 0)
mulState_result = 64'b0 (0x0, 0)
mulState_n_step = 5'b0 (0x0, 0)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001001010011001100011010110 (0x12998d6, 19503318)
instr_count = 32'b00000000011101110000101100101001 (0x770b29, 7801641)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b1 (0x1, 1)
>> g++-10	cuttlesim	rv32i-morse	real: 4.234	user: 4.228	sys: 0.004
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/morse.rv32 -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b0 (0x0, 0)
rf_x12_a2 = 32'b0 (0x0, 0)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b0 (0x0, 0)
mulState_operand2 = 32'b0 (0x0, 0)
mulState_result = 64'b0 (0x0, 0)
mulState_n_step = 5'b0 (0x0, 0)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001001010011001100011010110 (0x12998d6, 19503318)
instr_count = 32'b00000000011101110000101100101001 (0x770b29, 7801641)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b1 (0x1, 1)
>> g++-10	cuttlesim	rv32i-morse	real: 4.198	user: 4.197	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/morse.rv32 -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b0 (0x0, 0)
rf_x12_a2 = 32'b0 (0x0, 0)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b0 (0x0, 0)
mulState_operand2 = 32'b0 (0x0, 0)
mulState_result = 64'b0 (0x0, 0)
mulState_n_step = 5'b0 (0x0, 0)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001001010011001100011010110 (0x12998d6, 19503318)
instr_count = 32'b00000000011101110000101100101001 (0x770b29, 7801641)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b1 (0x1, 1)
>> g++-10	cuttlesim	rv32i-morse	real: 4.581	user: 4.567	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/morse.rv32 -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b0 (0x0, 0)
rf_x12_a2 = 32'b0 (0x0, 0)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b0 (0x0, 0)
mulState_operand2 = 32'b0 (0x0, 0)
mulState_result = 64'b0 (0x0, 0)
mulState_n_step = 5'b0 (0x0, 0)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001001010011001100011010110 (0x12998d6, 19503318)
instr_count = 32'b00000000011101110000101100101001 (0x770b29, 7801641)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b1 (0x1, 1)
>> g++-10	cuttlesim	rv32i-morse	real: 4.418	user: 4.418	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/morse.rv32 -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b0 (0x0, 0)
rf_x12_a2 = 32'b0 (0x0, 0)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b0 (0x0, 0)
mulState_operand2 = 32'b0 (0x0, 0)
mulState_result = 64'b0 (0x0, 0)
mulState_n_step = 5'b0 (0x0, 0)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001001010011001100011010110 (0x12998d6, 19503318)
instr_count = 32'b00000000011101110000101100101001 (0x770b29, 7801641)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b1 (0x1, 1)
>> g++-10	cuttlesim	rv32i-morse	real: 4.372	user: 4.370	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/morse.rv32 -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b0 (0x0, 0)
rf_x12_a2 = 32'b0 (0x0, 0)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b0 (0x0, 0)
mulState_operand2 = 32'b0 (0x0, 0)
mulState_result = 64'b0 (0x0, 0)
mulState_n_step = 5'b0 (0x0, 0)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001001010011001100011010110 (0x12998d6, 19503318)
instr_count = 32'b00000000011101110000101100101001 (0x770b29, 7801641)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b1 (0x1, 1)
>> g++-10	cuttlesim	rv32i-morse	real: 4.373	user: 4.372	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/morse.rv32 -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b0 (0x0, 0)
rf_x12_a2 = 32'b0 (0x0, 0)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b0 (0x0, 0)
mulState_operand2 = 32'b0 (0x0, 0)
mulState_result = 64'b0 (0x0, 0)
mulState_n_step = 5'b0 (0x0, 0)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001001010011001100011010110 (0x12998d6, 19503318)
instr_count = 32'b00000000011101110000101100101001 (0x770b29, 7801641)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b1 (0x1, 1)
>> g++-10	cuttlesim	rv32i-morse	real: 4.344	user: 4.343	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/morse.rv32 -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b0 (0x0, 0)
rf_x12_a2 = 32'b0 (0x0, 0)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b0 (0x0, 0)
mulState_operand2 = 32'b0 (0x0, 0)
mulState_result = 64'b0 (0x0, 0)
mulState_n_step = 5'b0 (0x0, 0)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001001010011001100011010110 (0x12998d6, 19503318)
instr_count = 32'b00000000011101110000101100101001 (0x770b29, 7801641)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b1 (0x1, 1)
>> g++-10	cuttlesim	rv32i-morse	real: 4.404	user: 4.399	sys: 0.004
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/morse.rv32 -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011011000 (0xd8, 216); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000011010100 (0xd4, 212); .data = 32'b00000000100000010010111000100011 (0x812e23, 8465955); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011011000 (0xd8, 216); .ppc = 32'b00000000000000000000000011011100 (0xdc, 220); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000011010100 (0xd4, 212); .ppc = 32'b00000000000000000000000011011000 (0xd8, 216); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000011010000 (0xd0, 208); .ppc = 32'b00000000000000000000000011010100 (0xd4, 212); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111110000000010000000100010011 (0xfe010113, 4261478675); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000111111111111011100 (0x3ffdc, 262108); .rval2 = 32'b0 (0x0, 0); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000010010000 (0x90, 144)
rf_x02_sp = 32'b00000000000000111111111111011100 (0x3ffdc, 262108)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000111111111111111100 (0x3fffc, 262140)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b0 (0x0, 0)
rf_x12_a2 = 32'b0 (0x0, 0)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
rf_x16_a6 = 32'b0 (0x0, 0)
rf_x17_a7 = 32'b0 (0x0, 0)
rf_x18_s2 = 32'b0 (0x0, 0)
rf_x19_s3 = 32'b0 (0x0, 0)
rf_x20_s4 = 32'b0 (0x0, 0)
rf_x21_s5 = 32'b0 (0x0, 0)
rf_x22_s6 = 32'b0 (0x0, 0)
rf_x23_s7 = 32'b0 (0x0, 0)
rf_x24_s8 = 32'b0 (0x0, 0)
rf_x25_s9 = 32'b0 (0x0, 0)
rf_x26_s10 = 32'b0 (0x0, 0)
rf_x27_s11 = 32'b0 (0x0, 0)
rf_x28_t3 = 32'b0 (0x0, 0)
rf_x29_t4 = 32'b0 (0x0, 0)
rf_x30_t5 = 32'b0 (0x0, 0)
rf_x31_t6 = 32'b0 (0x0, 0)
mulState_valid = 1'b0 (0x0, 0)
mulState_operand1 = 32'b0 (0x0, 0)
mulState_operand2 = 32'b0 (0x0, 0)
mulState_result = 64'b0 (0x0, 0)
mulState_n_step = 5'b0 (0x0, 0)
mulState_finished = 1'b0 (0x0, 0)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
scoreboard_x16_a6 = 2'b0 (0x0, 0)
scoreboard_x17_a7 = 2'b0 (0x0, 0)
scoreboard_x18_s2 = 2'b0 (0x0, 0)
scoreboard_x19_s3 = 2'b0 (0x0, 0)
scoreboard_x20_s4 = 2'b0 (0x0, 0)
scoreboard_x21_s5 = 2'b0 (0x0, 0)
scoreboard_x22_s6 = 2'b0 (0x0, 0)
scoreboard_x23_s7 = 2'b0 (0x0, 0)
scoreboard_x24_s8 = 2'b0 (0x0, 0)
scoreboard_x25_s9 = 2'b0 (0x0, 0)
scoreboard_x26_s10 = 2'b0 (0x0, 0)
scoreboard_x27_s11 = 2'b0 (0x0, 0)
scoreboard_x28_t3 = 2'b0 (0x0, 0)
scoreboard_x29_t4 = 2'b0 (0x0, 0)
scoreboard_x30_t5 = 2'b0 (0x0, 0)
scoreboard_x31_t6 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001001010011001100011010110 (0x12998d6, 19503318)
instr_count = 32'b00000000011101110000101100101001 (0x770b29, 7801641)
pc = 32'b00000000000000000000000011011100 (0xdc, 220)
epoch = 1'b1 (0x1, 1)
>> g++-10	cuttlesim	rv32i-morse	real: 4.349	user: 4.324	sys: 0.000
+ for simulator in ${@:3}
+ bench_rv_1 g++-10 verilator rv32i morse
+ compiler=g++-10
+ simulator=verilator
+ design=rv32i
+ test=morse
++ realpath ../examples/rv/_objects/rv32i.v/
+ base=/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v
++ realpath ../examples/rv/tests/_build/rv32i/integ/
+ tests=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ
+ b='bench g++-10 verilator rv32i-morse'
+ make -C /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v clean
make: Entering directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v'
rm -rf obj_dir.opt
rm -rf obj_dir.trace
rm -f rvcore.verilator.vcd
rm -f rvcore.cuttlesim.opt
rm -f rvcore.cuttlesim.debug
rm -f rvcore.cuttlesim.perf
rm -f rvcore.cuttlesim.cov
rm -f rvcore.cuttlesim.s
rm -f rvcore.cuttlesim.out
rm -f rvcore.cuttlesim.vcd
rm -f rvcore.cuttlesim.perf.data
rm -f rvcore.cuttlesim.callgrind
rm -fr rvcore.cuttlesim.rr
rm -f *.gcov
rm -f top_ice40_usb.json
rm -f top_ice40_usb.json.log
rm -f top_ice40_usb.asc
rm -f top_ice40_usb.bin
rm -f top_ice40_usb.rpt
rm -f top_ice40_usb.json.v
make: Leaving directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v'
+ case $simulator in
+ make CXX=g++-10 -C /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v obj_dir.opt/Vtop
make: Entering directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v'
verilator +define+MEM_ADDRESS_WIDTH=14 +define+BRAM_RUNTIME_INIT+SIMULATION -CFLAGS -DVL_USER_FINISH -Wno-fatal -CFLAGS "-I /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v" --prefix Vtop --cc --exe  --Mdir obj_dir.opt --x-assign fast --x-initial fast --noassert -O3 -CFLAGS '-O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector ' -LDFLAGS '-O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector ' rvcore.verilator.cpp top.v
make -C obj_dir.opt -f Vtop.mk Vtop
make[1]: Entering directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt'
g++-10  -I.  -MMD -I/usr/local/share/verilator/include -I/usr/local/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=0 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow     -DVL_USER_FINISH -I /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector   -c -o rvcore.o ../rvcore.verilator.cpp
g++-10  -I.  -MMD -I/usr/local/share/verilator/include -I/usr/local/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=0 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow     -DVL_USER_FINISH -I /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector   -c -o verilated.o /usr/local/share/verilator/include/verilated.cpp
g++-10  -I.  -MMD -I/usr/local/share/verilator/include -I/usr/local/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=0 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow     -DVL_USER_FINISH -I /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector   -c -o verilated_dpi.o /usr/local/share/verilator/include/verilated_dpi.cpp
/usr/bin/perl /usr/local/share/verilator/bin/verilator_includer -DVL_INCLUDE_OPT=include Vtop.cpp Vtop_top.cpp Vtop_rv32.cpp > Vtop__ALLcls.cpp
g++-10  -I.  -MMD -I/usr/local/share/verilator/include -I/usr/local/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=0 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow     -DVL_USER_FINISH -I /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector   -c -o Vtop__ALLcls.o Vtop__ALLcls.cpp
/usr/bin/perl /usr/local/share/verilator/bin/verilator_includer -DVL_INCLUDE_OPT=include Vtop__Dpi.cpp Vtop__Syms.cpp > Vtop__ALLsup.cpp
g++-10  -I.  -MMD -I/usr/local/share/verilator/include -I/usr/local/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=0 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow     -DVL_USER_FINISH -I /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector   -c -o Vtop__ALLsup.o Vtop__ALLsup.cpp
ar -cr Vtop__ALL.a Vtop__ALLcls.o Vtop__ALLsup.o
ranlib Vtop__ALL.a
g++    rvcore.o verilated.o verilated_dpi.o Vtop__ALL.a   -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector  -o Vtop -lm -lstdc++ 
make[1]: Leaving directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt'
make: Leaving directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v'
+ bench g++-10 verilator rv32i-morse /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/morse.vmh -1
+ compiler=g++-10
+ simulator=verilator
+ input=rv32i-morse
+ export 'TIMEFORMAT=>> g++-10	verilator	rv32i-morse	real: %3R	user: %3U	sys: %3S'
+ TIMEFORMAT='>> g++-10	verilator	rv32i-morse	real: %3R	user: %3U	sys: %3S'
+ echo '<< verilator rv32i-morse'
<< verilator rv32i-morse
++ seq 1 10
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/morse.vmh -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
>> g++-10	verilator	rv32i-morse	real: 8.339	user: 8.325	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/morse.vmh -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
>> g++-10	verilator	rv32i-morse	real: 8.223	user: 8.212	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/morse.vmh -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
>> g++-10	verilator	rv32i-morse	real: 8.237	user: 8.236	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/morse.vmh -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
>> g++-10	verilator	rv32i-morse	real: 8.331	user: 8.330	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/morse.vmh -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
>> g++-10	verilator	rv32i-morse	real: 8.281	user: 8.278	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/morse.vmh -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
>> g++-10	verilator	rv32i-morse	real: 8.196	user: 8.194	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/morse.vmh -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
>> g++-10	verilator	rv32i-morse	real: 8.585	user: 8.580	sys: 0.004
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/morse.vmh -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
>> g++-10	verilator	rv32i-morse	real: 8.207	user: 8.206	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/morse.vmh -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
>> g++-10	verilator	rv32i-morse	real: 8.331	user: 8.330	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32i.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32i/integ/morse.vmh -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
>> g++-10	verilator	rv32i-morse	real: 8.394	user: 8.394	sys: 0.000
+ bench_rv rv32e morse cuttlesim verilator
+ for compiler in "clang++" "g++-9" "g++-10"
+ for simulator in ${@:3}
+ bench_rv_1 clang++ cuttlesim rv32e morse
+ compiler=clang++
+ simulator=cuttlesim
+ design=rv32e
+ test=morse
++ realpath ../examples/rv/_objects/rv32e.v/
+ base=/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v
++ realpath ../examples/rv/tests/_build/rv32e/integ/
+ tests=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ
+ b='bench clang++ cuttlesim rv32e-morse'
+ make -C /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v clean
make: Entering directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v'
rm -rf obj_dir.opt
rm -rf obj_dir.trace
rm -f rvcore.verilator.vcd
rm -f rvcore.cuttlesim.opt
rm -f rvcore.cuttlesim.debug
rm -f rvcore.cuttlesim.perf
rm -f rvcore.cuttlesim.cov
rm -f rvcore.cuttlesim.s
rm -f rvcore.cuttlesim.out
rm -f rvcore.cuttlesim.vcd
rm -f rvcore.cuttlesim.perf.data
rm -f rvcore.cuttlesim.callgrind
rm -fr rvcore.cuttlesim.rr
rm -f *.gcov
rm -f top_ice40_usb.json
rm -f top_ice40_usb.json.log
rm -f top_ice40_usb.asc
rm -f top_ice40_usb.bin
rm -f top_ice40_usb.rpt
rm -f top_ice40_usb.json.v
make: Leaving directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v'
+ case $simulator in
+ make CXX=clang++ -C /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v rvcore.cuttlesim.opt
make: Entering directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v'
clang++ --std=c++17  -Wall -Wextra '-DSIM_VCD_SCOPES={"TOP", "top", "rv_core",}' -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector rvcore.cuttlesim.cpp -o "rvcore.cuttlesim.opt"
In file included from rvcore.cuttlesim.cpp:5:
In file included from ./rv32.hpp:10:
./cuttlesim.hpp:87:9: warning: Bignum truncation is broken in Boost < 1.68; if you run into issues, try upgrading. [-W#pragma-messages]
#pragma message("Bignum truncation is broken in Boost < 1.68; if you run into issues, try upgrading.")
        ^
In file included from rvcore.cuttlesim.cpp:5:
./rv32.hpp:1670:38: warning: unused parameter 'op1' [-Wunused-parameter]
  DEF_FN(enq_2, unit &_ret, bits<32> op1, bits<32> op2) {
                                     ^
./rv32.hpp:1670:52: warning: unused parameter 'op2' [-Wunused-parameter]
  DEF_FN(enq_2, unit &_ret, bits<32> op1, bits<32> op2) {
                                                   ^
3 warnings generated.
make: Leaving directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v'
+ bench clang++ cuttlesim rv32e-morse /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/morse.rv32 -1
+ compiler=clang++
+ simulator=cuttlesim
+ input=rv32e-morse
+ export 'TIMEFORMAT=>> clang++	cuttlesim	rv32e-morse	real: %3R	user: %3U	sys: %3S'
+ TIMEFORMAT='>> clang++	cuttlesim	rv32e-morse	real: %3R	user: %3U	sys: %3S'
+ echo '<< cuttlesim rv32e-morse'
<< cuttlesim rv32e-morse
++ seq 1 10
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/morse.rv32 -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010011000 (0x98, 152); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010010100 (0x94, 148); .data = 32'b00000000100000010010001000100011 (0x812223, 8462883); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010011000 (0x98, 152); .ppc = 32'b00000000000000000000000010011100 (0x9c, 156); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010010100 (0x94, 148); .ppc = 32'b00000000000000000000000010011000 (0x98, 152); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000010010000 (0x90, 144); .ppc = 32'b00000000000000000000000010010100 (0x94, 148); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111111100000010000000100010011 (0xff810113, 4286644499); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000000000111111110100 (0xff4, 4084); .rval2 = 32'b00000000000000000000111111111100 (0xffc, 4092); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000001010000 (0x50, 80)
rf_x02_sp = 32'b00000000000000000000111111110100 (0xff4, 4084)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000000000111111111100 (0xffc, 4092)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b0 (0x0, 0)
rf_x12_a2 = 32'b0 (0x0, 0)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001001010011001100011111110 (0x12998fe, 19503358)
instr_count = 32'b00000000011101110000101100011001 (0x770b19, 7801625)
pc = 32'b00000000000000000000000010011100 (0x9c, 156)
epoch = 1'b1 (0x1, 1)
>> clang++	cuttlesim	rv32e-morse	real: 2.172	user: 2.172	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/morse.rv32 -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010011000 (0x98, 152); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010010100 (0x94, 148); .data = 32'b00000000100000010010001000100011 (0x812223, 8462883); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010011000 (0x98, 152); .ppc = 32'b00000000000000000000000010011100 (0x9c, 156); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010010100 (0x94, 148); .ppc = 32'b00000000000000000000000010011000 (0x98, 152); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000010010000 (0x90, 144); .ppc = 32'b00000000000000000000000010010100 (0x94, 148); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111111100000010000000100010011 (0xff810113, 4286644499); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000000000111111110100 (0xff4, 4084); .rval2 = 32'b00000000000000000000111111111100 (0xffc, 4092); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000001010000 (0x50, 80)
rf_x02_sp = 32'b00000000000000000000111111110100 (0xff4, 4084)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000000000111111111100 (0xffc, 4092)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b0 (0x0, 0)
rf_x12_a2 = 32'b0 (0x0, 0)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001001010011001100011111110 (0x12998fe, 19503358)
instr_count = 32'b00000000011101110000101100011001 (0x770b19, 7801625)
pc = 32'b00000000000000000000000010011100 (0x9c, 156)
epoch = 1'b1 (0x1, 1)
>> clang++	cuttlesim	rv32e-morse	real: 2.180	user: 2.174	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/morse.rv32 -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010011000 (0x98, 152); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010010100 (0x94, 148); .data = 32'b00000000100000010010001000100011 (0x812223, 8462883); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010011000 (0x98, 152); .ppc = 32'b00000000000000000000000010011100 (0x9c, 156); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010010100 (0x94, 148); .ppc = 32'b00000000000000000000000010011000 (0x98, 152); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000010010000 (0x90, 144); .ppc = 32'b00000000000000000000000010010100 (0x94, 148); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111111100000010000000100010011 (0xff810113, 4286644499); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000000000111111110100 (0xff4, 4084); .rval2 = 32'b00000000000000000000111111111100 (0xffc, 4092); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000001010000 (0x50, 80)
rf_x02_sp = 32'b00000000000000000000111111110100 (0xff4, 4084)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000000000111111111100 (0xffc, 4092)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b0 (0x0, 0)
rf_x12_a2 = 32'b0 (0x0, 0)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001001010011001100011111110 (0x12998fe, 19503358)
instr_count = 32'b00000000011101110000101100011001 (0x770b19, 7801625)
pc = 32'b00000000000000000000000010011100 (0x9c, 156)
epoch = 1'b1 (0x1, 1)
>> clang++	cuttlesim	rv32e-morse	real: 2.312	user: 2.204	sys: 0.024
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/morse.rv32 -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010011000 (0x98, 152); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010010100 (0x94, 148); .data = 32'b00000000100000010010001000100011 (0x812223, 8462883); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010011000 (0x98, 152); .ppc = 32'b00000000000000000000000010011100 (0x9c, 156); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010010100 (0x94, 148); .ppc = 32'b00000000000000000000000010011000 (0x98, 152); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000010010000 (0x90, 144); .ppc = 32'b00000000000000000000000010010100 (0x94, 148); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111111100000010000000100010011 (0xff810113, 4286644499); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000000000111111110100 (0xff4, 4084); .rval2 = 32'b00000000000000000000111111111100 (0xffc, 4092); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000001010000 (0x50, 80)
rf_x02_sp = 32'b00000000000000000000111111110100 (0xff4, 4084)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000000000111111111100 (0xffc, 4092)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b0 (0x0, 0)
rf_x12_a2 = 32'b0 (0x0, 0)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001001010011001100011111110 (0x12998fe, 19503358)
instr_count = 32'b00000000011101110000101100011001 (0x770b19, 7801625)
pc = 32'b00000000000000000000000010011100 (0x9c, 156)
epoch = 1'b1 (0x1, 1)
>> clang++	cuttlesim	rv32e-morse	real: 2.190	user: 2.156	sys: 0.004
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/morse.rv32 -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010011000 (0x98, 152); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010010100 (0x94, 148); .data = 32'b00000000100000010010001000100011 (0x812223, 8462883); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010011000 (0x98, 152); .ppc = 32'b00000000000000000000000010011100 (0x9c, 156); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010010100 (0x94, 148); .ppc = 32'b00000000000000000000000010011000 (0x98, 152); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000010010000 (0x90, 144); .ppc = 32'b00000000000000000000000010010100 (0x94, 148); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111111100000010000000100010011 (0xff810113, 4286644499); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000000000111111110100 (0xff4, 4084); .rval2 = 32'b00000000000000000000111111111100 (0xffc, 4092); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000001010000 (0x50, 80)
rf_x02_sp = 32'b00000000000000000000111111110100 (0xff4, 4084)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000000000111111111100 (0xffc, 4092)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b0 (0x0, 0)
rf_x12_a2 = 32'b0 (0x0, 0)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001001010011001100011111110 (0x12998fe, 19503358)
instr_count = 32'b00000000011101110000101100011001 (0x770b19, 7801625)
pc = 32'b00000000000000000000000010011100 (0x9c, 156)
epoch = 1'b1 (0x1, 1)
>> clang++	cuttlesim	rv32e-morse	real: 2.168	user: 2.136	sys: 0.004
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/morse.rv32 -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010011000 (0x98, 152); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010010100 (0x94, 148); .data = 32'b00000000100000010010001000100011 (0x812223, 8462883); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010011000 (0x98, 152); .ppc = 32'b00000000000000000000000010011100 (0x9c, 156); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010010100 (0x94, 148); .ppc = 32'b00000000000000000000000010011000 (0x98, 152); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000010010000 (0x90, 144); .ppc = 32'b00000000000000000000000010010100 (0x94, 148); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111111100000010000000100010011 (0xff810113, 4286644499); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000000000111111110100 (0xff4, 4084); .rval2 = 32'b00000000000000000000111111111100 (0xffc, 4092); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000001010000 (0x50, 80)
rf_x02_sp = 32'b00000000000000000000111111110100 (0xff4, 4084)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000000000111111111100 (0xffc, 4092)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b0 (0x0, 0)
rf_x12_a2 = 32'b0 (0x0, 0)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001001010011001100011111110 (0x12998fe, 19503358)
instr_count = 32'b00000000011101110000101100011001 (0x770b19, 7801625)
pc = 32'b00000000000000000000000010011100 (0x9c, 156)
epoch = 1'b1 (0x1, 1)
>> clang++	cuttlesim	rv32e-morse	real: 2.233	user: 2.178	sys: 0.004
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/morse.rv32 -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010011000 (0x98, 152); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010010100 (0x94, 148); .data = 32'b00000000100000010010001000100011 (0x812223, 8462883); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010011000 (0x98, 152); .ppc = 32'b00000000000000000000000010011100 (0x9c, 156); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010010100 (0x94, 148); .ppc = 32'b00000000000000000000000010011000 (0x98, 152); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000010010000 (0x90, 144); .ppc = 32'b00000000000000000000000010010100 (0x94, 148); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111111100000010000000100010011 (0xff810113, 4286644499); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000000000111111110100 (0xff4, 4084); .rval2 = 32'b00000000000000000000111111111100 (0xffc, 4092); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000001010000 (0x50, 80)
rf_x02_sp = 32'b00000000000000000000111111110100 (0xff4, 4084)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000000000111111111100 (0xffc, 4092)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b0 (0x0, 0)
rf_x12_a2 = 32'b0 (0x0, 0)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001001010011001100011111110 (0x12998fe, 19503358)
instr_count = 32'b00000000011101110000101100011001 (0x770b19, 7801625)
pc = 32'b00000000000000000000000010011100 (0x9c, 156)
epoch = 1'b1 (0x1, 1)
>> clang++	cuttlesim	rv32e-morse	real: 2.154	user: 2.151	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/morse.rv32 -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010011000 (0x98, 152); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010010100 (0x94, 148); .data = 32'b00000000100000010010001000100011 (0x812223, 8462883); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010011000 (0x98, 152); .ppc = 32'b00000000000000000000000010011100 (0x9c, 156); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010010100 (0x94, 148); .ppc = 32'b00000000000000000000000010011000 (0x98, 152); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000010010000 (0x90, 144); .ppc = 32'b00000000000000000000000010010100 (0x94, 148); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111111100000010000000100010011 (0xff810113, 4286644499); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000000000111111110100 (0xff4, 4084); .rval2 = 32'b00000000000000000000111111111100 (0xffc, 4092); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000001010000 (0x50, 80)
rf_x02_sp = 32'b00000000000000000000111111110100 (0xff4, 4084)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000000000111111111100 (0xffc, 4092)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b0 (0x0, 0)
rf_x12_a2 = 32'b0 (0x0, 0)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001001010011001100011111110 (0x12998fe, 19503358)
instr_count = 32'b00000000011101110000101100011001 (0x770b19, 7801625)
pc = 32'b00000000000000000000000010011100 (0x9c, 156)
epoch = 1'b1 (0x1, 1)
>> clang++	cuttlesim	rv32e-morse	real: 2.228	user: 2.227	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/morse.rv32 -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010011000 (0x98, 152); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010010100 (0x94, 148); .data = 32'b00000000100000010010001000100011 (0x812223, 8462883); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010011000 (0x98, 152); .ppc = 32'b00000000000000000000000010011100 (0x9c, 156); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010010100 (0x94, 148); .ppc = 32'b00000000000000000000000010011000 (0x98, 152); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000010010000 (0x90, 144); .ppc = 32'b00000000000000000000000010010100 (0x94, 148); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111111100000010000000100010011 (0xff810113, 4286644499); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000000000111111110100 (0xff4, 4084); .rval2 = 32'b00000000000000000000111111111100 (0xffc, 4092); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000001010000 (0x50, 80)
rf_x02_sp = 32'b00000000000000000000111111110100 (0xff4, 4084)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000000000111111111100 (0xffc, 4092)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b0 (0x0, 0)
rf_x12_a2 = 32'b0 (0x0, 0)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001001010011001100011111110 (0x12998fe, 19503358)
instr_count = 32'b00000000011101110000101100011001 (0x770b19, 7801625)
pc = 32'b00000000000000000000000010011100 (0x9c, 156)
epoch = 1'b1 (0x1, 1)
>> clang++	cuttlesim	rv32e-morse	real: 2.211	user: 2.211	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/morse.rv32 -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010011000 (0x98, 152); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010010100 (0x94, 148); .data = 32'b00000000100000010010001000100011 (0x812223, 8462883); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010011000 (0x98, 152); .ppc = 32'b00000000000000000000000010011100 (0x9c, 156); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010010100 (0x94, 148); .ppc = 32'b00000000000000000000000010011000 (0x98, 152); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000010010000 (0x90, 144); .ppc = 32'b00000000000000000000000010010100 (0x94, 148); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111111100000010000000100010011 (0xff810113, 4286644499); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000000000111111110100 (0xff4, 4084); .rval2 = 32'b00000000000000000000111111111100 (0xffc, 4092); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000001010000 (0x50, 80)
rf_x02_sp = 32'b00000000000000000000111111110100 (0xff4, 4084)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000000000111111111100 (0xffc, 4092)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b0 (0x0, 0)
rf_x12_a2 = 32'b0 (0x0, 0)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001001010011001100011111110 (0x12998fe, 19503358)
instr_count = 32'b00000000011101110000101100011001 (0x770b19, 7801625)
pc = 32'b00000000000000000000000010011100 (0x9c, 156)
epoch = 1'b1 (0x1, 1)
>> clang++	cuttlesim	rv32e-morse	real: 2.157	user: 2.149	sys: 0.008
+ for simulator in ${@:3}
+ bench_rv_1 clang++ verilator rv32e morse
+ compiler=clang++
+ simulator=verilator
+ design=rv32e
+ test=morse
++ realpath ../examples/rv/_objects/rv32e.v/
+ base=/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v
++ realpath ../examples/rv/tests/_build/rv32e/integ/
+ tests=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ
+ b='bench clang++ verilator rv32e-morse'
+ make -C /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v clean
make: Entering directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v'
rm -rf obj_dir.opt
rm -rf obj_dir.trace
rm -f rvcore.verilator.vcd
rm -f rvcore.cuttlesim.opt
rm -f rvcore.cuttlesim.debug
rm -f rvcore.cuttlesim.perf
rm -f rvcore.cuttlesim.cov
rm -f rvcore.cuttlesim.s
rm -f rvcore.cuttlesim.out
rm -f rvcore.cuttlesim.vcd
rm -f rvcore.cuttlesim.perf.data
rm -f rvcore.cuttlesim.callgrind
rm -fr rvcore.cuttlesim.rr
rm -f *.gcov
rm -f top_ice40_usb.json
rm -f top_ice40_usb.json.log
rm -f top_ice40_usb.asc
rm -f top_ice40_usb.bin
rm -f top_ice40_usb.rpt
rm -f top_ice40_usb.json.v
make: Leaving directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v'
+ case $simulator in
+ make CXX=clang++ -C /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v obj_dir.opt/Vtop
make: Entering directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v'
verilator +define+MEM_ADDRESS_WIDTH=10 +define+BRAM_RUNTIME_INIT+SIMULATION -CFLAGS -DVL_USER_FINISH -Wno-fatal -CFLAGS "-I /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v" --prefix Vtop --cc --exe --compiler clang -CFLAGS -fPIC --Mdir obj_dir.opt --x-assign fast --x-initial fast --noassert -O3 -CFLAGS '-O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector ' -LDFLAGS '-O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector ' rvcore.verilator.cpp top.v
make -C obj_dir.opt -f Vtop.mk Vtop
make[1]: Entering directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/obj_dir.opt'
clang++  -I.  -MMD -I/usr/local/share/verilator/include -I/usr/local/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=0 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow     -DVL_USER_FINISH -I /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v -fPIC -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector   -c -o rvcore.o ../rvcore.verilator.cpp
warning: unknown warning option '-Wno-unused-but-set-variable'; did you mean '-Wno-unused-const-variable'? [-Wunknown-warning-option]
1 warning generated.
clang++  -I.  -MMD -I/usr/local/share/verilator/include -I/usr/local/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=0 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow     -DVL_USER_FINISH -I /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v -fPIC -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector   -c -o verilated.o /usr/local/share/verilator/include/verilated.cpp
warning: unknown warning option '-Wno-unused-but-set-variable'; did you mean '-Wno-unused-const-variable'? [-Wunknown-warning-option]
1 warning generated.
clang++  -I.  -MMD -I/usr/local/share/verilator/include -I/usr/local/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=0 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow     -DVL_USER_FINISH -I /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v -fPIC -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector   -c -o verilated_dpi.o /usr/local/share/verilator/include/verilated_dpi.cpp
warning: unknown warning option '-Wno-unused-but-set-variable'; did you mean '-Wno-unused-const-variable'? [-Wunknown-warning-option]
1 warning generated.
/usr/bin/perl /usr/local/share/verilator/bin/verilator_includer -DVL_INCLUDE_OPT=include Vtop.cpp Vtop_top.cpp Vtop_rv32.cpp > Vtop__ALLcls.cpp
clang++  -I.  -MMD -I/usr/local/share/verilator/include -I/usr/local/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=0 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow     -DVL_USER_FINISH -I /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v -fPIC -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector   -c -o Vtop__ALLcls.o Vtop__ALLcls.cpp
warning: unknown warning option '-Wno-unused-but-set-variable'; did you mean '-Wno-unused-const-variable'? [-Wunknown-warning-option]
1 warning generated.
/usr/bin/perl /usr/local/share/verilator/bin/verilator_includer -DVL_INCLUDE_OPT=include Vtop__Dpi.cpp Vtop__Syms.cpp > Vtop__ALLsup.cpp
clang++  -I.  -MMD -I/usr/local/share/verilator/include -I/usr/local/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=0 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow     -DVL_USER_FINISH -I /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v -fPIC -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector   -c -o Vtop__ALLsup.o Vtop__ALLsup.cpp
warning: unknown warning option '-Wno-unused-but-set-variable'; did you mean '-Wno-unused-const-variable'? [-Wunknown-warning-option]
1 warning generated.
ar -cr Vtop__ALL.a Vtop__ALLcls.o Vtop__ALLsup.o
ranlib Vtop__ALL.a
g++    rvcore.o verilated.o verilated_dpi.o Vtop__ALL.a   -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector  -o Vtop -lm -lstdc++ 
make[1]: Leaving directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/obj_dir.opt'
make: Leaving directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v'
+ bench clang++ verilator rv32e-morse /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/morse.vmh -1
+ compiler=clang++
+ simulator=verilator
+ input=rv32e-morse
+ export 'TIMEFORMAT=>> clang++	verilator	rv32e-morse	real: %3R	user: %3U	sys: %3S'
+ TIMEFORMAT='>> clang++	verilator	rv32e-morse	real: %3R	user: %3U	sys: %3S'
+ echo '<< verilator rv32e-morse'
<< verilator rv32e-morse
++ seq 1 10
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/morse.vmh -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
>> clang++	verilator	rv32e-morse	real: 5.007	user: 4.988	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/morse.vmh -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
>> clang++	verilator	rv32e-morse	real: 4.913	user: 4.904	sys: 0.008
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/morse.vmh -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
>> clang++	verilator	rv32e-morse	real: 5.384	user: 5.375	sys: 0.008
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/morse.vmh -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
>> clang++	verilator	rv32e-morse	real: 4.893	user: 4.892	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/morse.vmh -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
>> clang++	verilator	rv32e-morse	real: 4.843	user: 4.838	sys: 0.004
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/morse.vmh -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
>> clang++	verilator	rv32e-morse	real: 4.983	user: 4.908	sys: 0.004
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/morse.vmh -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
>> clang++	verilator	rv32e-morse	real: 5.441	user: 5.441	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/morse.vmh -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
>> clang++	verilator	rv32e-morse	real: 4.858	user: 4.853	sys: 0.004
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/morse.vmh -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
>> clang++	verilator	rv32e-morse	real: 4.990	user: 4.990	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/morse.vmh -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
>> clang++	verilator	rv32e-morse	real: 5.378	user: 5.372	sys: 0.004
+ for compiler in "clang++" "g++-9" "g++-10"
+ for simulator in ${@:3}
+ bench_rv_1 g++-9 cuttlesim rv32e morse
+ compiler=g++-9
+ simulator=cuttlesim
+ design=rv32e
+ test=morse
++ realpath ../examples/rv/_objects/rv32e.v/
+ base=/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v
++ realpath ../examples/rv/tests/_build/rv32e/integ/
+ tests=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ
+ b='bench g++-9 cuttlesim rv32e-morse'
+ make -C /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v clean
make: Entering directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v'
rm -rf obj_dir.opt
rm -rf obj_dir.trace
rm -f rvcore.verilator.vcd
rm -f rvcore.cuttlesim.opt
rm -f rvcore.cuttlesim.debug
rm -f rvcore.cuttlesim.perf
rm -f rvcore.cuttlesim.cov
rm -f rvcore.cuttlesim.s
rm -f rvcore.cuttlesim.out
rm -f rvcore.cuttlesim.vcd
rm -f rvcore.cuttlesim.perf.data
rm -f rvcore.cuttlesim.callgrind
rm -fr rvcore.cuttlesim.rr
rm -f *.gcov
rm -f top_ice40_usb.json
rm -f top_ice40_usb.json.log
rm -f top_ice40_usb.asc
rm -f top_ice40_usb.bin
rm -f top_ice40_usb.rpt
rm -f top_ice40_usb.json.v
make: Leaving directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v'
+ case $simulator in
+ make CXX=g++-9 -C /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v rvcore.cuttlesim.opt
make: Entering directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v'
g++-9 --std=c++17  -Wall -Wextra '-DSIM_VCD_SCOPES={"TOP", "top", "rv_core",}' -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector rvcore.cuttlesim.cpp -o "rvcore.cuttlesim.opt"
In file included from rv32.hpp:10,
                 from rvcore.cuttlesim.cpp:5:
cuttlesim.hpp:87:102: note: #pragma message: Bignum truncation is broken in Boost < 1.68; if you run into issues, try upgrading.
   87 | #pragma message("Bignum truncation is broken in Boost < 1.68; if you run into issues, try upgrading.")
      |                                                                                                      ^
make: Leaving directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v'
+ bench g++-9 cuttlesim rv32e-morse /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/morse.rv32 -1
+ compiler=g++-9
+ simulator=cuttlesim
+ input=rv32e-morse
+ export 'TIMEFORMAT=>> g++-9	cuttlesim	rv32e-morse	real: %3R	user: %3U	sys: %3S'
+ TIMEFORMAT='>> g++-9	cuttlesim	rv32e-morse	real: %3R	user: %3U	sys: %3S'
+ echo '<< cuttlesim rv32e-morse'
<< cuttlesim rv32e-morse
++ seq 1 10
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/morse.rv32 -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010011000 (0x98, 152); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010010100 (0x94, 148); .data = 32'b00000000100000010010001000100011 (0x812223, 8462883); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010011000 (0x98, 152); .ppc = 32'b00000000000000000000000010011100 (0x9c, 156); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010010100 (0x94, 148); .ppc = 32'b00000000000000000000000010011000 (0x98, 152); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000010010000 (0x90, 144); .ppc = 32'b00000000000000000000000010010100 (0x94, 148); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111111100000010000000100010011 (0xff810113, 4286644499); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000000000111111110100 (0xff4, 4084); .rval2 = 32'b00000000000000000000111111111100 (0xffc, 4092); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000001010000 (0x50, 80)
rf_x02_sp = 32'b00000000000000000000111111110100 (0xff4, 4084)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000000000111111111100 (0xffc, 4092)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b0 (0x0, 0)
rf_x12_a2 = 32'b0 (0x0, 0)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001001010011001100011111110 (0x12998fe, 19503358)
instr_count = 32'b00000000011101110000101100011001 (0x770b19, 7801625)
pc = 32'b00000000000000000000000010011100 (0x9c, 156)
epoch = 1'b1 (0x1, 1)
>> g++-9	cuttlesim	rv32e-morse	real: 1.778	user: 1.774	sys: 0.004
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/morse.rv32 -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010011000 (0x98, 152); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010010100 (0x94, 148); .data = 32'b00000000100000010010001000100011 (0x812223, 8462883); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010011000 (0x98, 152); .ppc = 32'b00000000000000000000000010011100 (0x9c, 156); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010010100 (0x94, 148); .ppc = 32'b00000000000000000000000010011000 (0x98, 152); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000010010000 (0x90, 144); .ppc = 32'b00000000000000000000000010010100 (0x94, 148); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111111100000010000000100010011 (0xff810113, 4286644499); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000000000111111110100 (0xff4, 4084); .rval2 = 32'b00000000000000000000111111111100 (0xffc, 4092); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000001010000 (0x50, 80)
rf_x02_sp = 32'b00000000000000000000111111110100 (0xff4, 4084)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000000000111111111100 (0xffc, 4092)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b0 (0x0, 0)
rf_x12_a2 = 32'b0 (0x0, 0)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001001010011001100011111110 (0x12998fe, 19503358)
instr_count = 32'b00000000011101110000101100011001 (0x770b19, 7801625)
pc = 32'b00000000000000000000000010011100 (0x9c, 156)
epoch = 1'b1 (0x1, 1)
>> g++-9	cuttlesim	rv32e-morse	real: 1.842	user: 1.842	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/morse.rv32 -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010011000 (0x98, 152); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010010100 (0x94, 148); .data = 32'b00000000100000010010001000100011 (0x812223, 8462883); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010011000 (0x98, 152); .ppc = 32'b00000000000000000000000010011100 (0x9c, 156); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010010100 (0x94, 148); .ppc = 32'b00000000000000000000000010011000 (0x98, 152); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000010010000 (0x90, 144); .ppc = 32'b00000000000000000000000010010100 (0x94, 148); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111111100000010000000100010011 (0xff810113, 4286644499); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000000000111111110100 (0xff4, 4084); .rval2 = 32'b00000000000000000000111111111100 (0xffc, 4092); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000001010000 (0x50, 80)
rf_x02_sp = 32'b00000000000000000000111111110100 (0xff4, 4084)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000000000111111111100 (0xffc, 4092)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b0 (0x0, 0)
rf_x12_a2 = 32'b0 (0x0, 0)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001001010011001100011111110 (0x12998fe, 19503358)
instr_count = 32'b00000000011101110000101100011001 (0x770b19, 7801625)
pc = 32'b00000000000000000000000010011100 (0x9c, 156)
epoch = 1'b1 (0x1, 1)
>> g++-9	cuttlesim	rv32e-morse	real: 1.832	user: 1.821	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/morse.rv32 -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010011000 (0x98, 152); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010010100 (0x94, 148); .data = 32'b00000000100000010010001000100011 (0x812223, 8462883); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010011000 (0x98, 152); .ppc = 32'b00000000000000000000000010011100 (0x9c, 156); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010010100 (0x94, 148); .ppc = 32'b00000000000000000000000010011000 (0x98, 152); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000010010000 (0x90, 144); .ppc = 32'b00000000000000000000000010010100 (0x94, 148); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111111100000010000000100010011 (0xff810113, 4286644499); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000000000111111110100 (0xff4, 4084); .rval2 = 32'b00000000000000000000111111111100 (0xffc, 4092); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000001010000 (0x50, 80)
rf_x02_sp = 32'b00000000000000000000111111110100 (0xff4, 4084)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000000000111111111100 (0xffc, 4092)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b0 (0x0, 0)
rf_x12_a2 = 32'b0 (0x0, 0)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001001010011001100011111110 (0x12998fe, 19503358)
instr_count = 32'b00000000011101110000101100011001 (0x770b19, 7801625)
pc = 32'b00000000000000000000000010011100 (0x9c, 156)
epoch = 1'b1 (0x1, 1)
>> g++-9	cuttlesim	rv32e-morse	real: 1.807	user: 1.800	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/morse.rv32 -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010011000 (0x98, 152); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010010100 (0x94, 148); .data = 32'b00000000100000010010001000100011 (0x812223, 8462883); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010011000 (0x98, 152); .ppc = 32'b00000000000000000000000010011100 (0x9c, 156); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010010100 (0x94, 148); .ppc = 32'b00000000000000000000000010011000 (0x98, 152); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000010010000 (0x90, 144); .ppc = 32'b00000000000000000000000010010100 (0x94, 148); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111111100000010000000100010011 (0xff810113, 4286644499); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000000000111111110100 (0xff4, 4084); .rval2 = 32'b00000000000000000000111111111100 (0xffc, 4092); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000001010000 (0x50, 80)
rf_x02_sp = 32'b00000000000000000000111111110100 (0xff4, 4084)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000000000111111111100 (0xffc, 4092)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b0 (0x0, 0)
rf_x12_a2 = 32'b0 (0x0, 0)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001001010011001100011111110 (0x12998fe, 19503358)
instr_count = 32'b00000000011101110000101100011001 (0x770b19, 7801625)
pc = 32'b00000000000000000000000010011100 (0x9c, 156)
epoch = 1'b1 (0x1, 1)
>> g++-9	cuttlesim	rv32e-morse	real: 1.838	user: 1.838	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/morse.rv32 -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010011000 (0x98, 152); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010010100 (0x94, 148); .data = 32'b00000000100000010010001000100011 (0x812223, 8462883); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010011000 (0x98, 152); .ppc = 32'b00000000000000000000000010011100 (0x9c, 156); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010010100 (0x94, 148); .ppc = 32'b00000000000000000000000010011000 (0x98, 152); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000010010000 (0x90, 144); .ppc = 32'b00000000000000000000000010010100 (0x94, 148); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111111100000010000000100010011 (0xff810113, 4286644499); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000000000111111110100 (0xff4, 4084); .rval2 = 32'b00000000000000000000111111111100 (0xffc, 4092); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000001010000 (0x50, 80)
rf_x02_sp = 32'b00000000000000000000111111110100 (0xff4, 4084)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000000000111111111100 (0xffc, 4092)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b0 (0x0, 0)
rf_x12_a2 = 32'b0 (0x0, 0)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001001010011001100011111110 (0x12998fe, 19503358)
instr_count = 32'b00000000011101110000101100011001 (0x770b19, 7801625)
pc = 32'b00000000000000000000000010011100 (0x9c, 156)
epoch = 1'b1 (0x1, 1)
>> g++-9	cuttlesim	rv32e-morse	real: 1.850	user: 1.849	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/morse.rv32 -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010011000 (0x98, 152); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010010100 (0x94, 148); .data = 32'b00000000100000010010001000100011 (0x812223, 8462883); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010011000 (0x98, 152); .ppc = 32'b00000000000000000000000010011100 (0x9c, 156); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010010100 (0x94, 148); .ppc = 32'b00000000000000000000000010011000 (0x98, 152); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000010010000 (0x90, 144); .ppc = 32'b00000000000000000000000010010100 (0x94, 148); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111111100000010000000100010011 (0xff810113, 4286644499); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000000000111111110100 (0xff4, 4084); .rval2 = 32'b00000000000000000000111111111100 (0xffc, 4092); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000001010000 (0x50, 80)
rf_x02_sp = 32'b00000000000000000000111111110100 (0xff4, 4084)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000000000111111111100 (0xffc, 4092)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b0 (0x0, 0)
rf_x12_a2 = 32'b0 (0x0, 0)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001001010011001100011111110 (0x12998fe, 19503358)
instr_count = 32'b00000000011101110000101100011001 (0x770b19, 7801625)
pc = 32'b00000000000000000000000010011100 (0x9c, 156)
epoch = 1'b1 (0x1, 1)
>> g++-9	cuttlesim	rv32e-morse	real: 1.836	user: 1.835	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/morse.rv32 -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010011000 (0x98, 152); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010010100 (0x94, 148); .data = 32'b00000000100000010010001000100011 (0x812223, 8462883); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010011000 (0x98, 152); .ppc = 32'b00000000000000000000000010011100 (0x9c, 156); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010010100 (0x94, 148); .ppc = 32'b00000000000000000000000010011000 (0x98, 152); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000010010000 (0x90, 144); .ppc = 32'b00000000000000000000000010010100 (0x94, 148); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111111100000010000000100010011 (0xff810113, 4286644499); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000000000111111110100 (0xff4, 4084); .rval2 = 32'b00000000000000000000111111111100 (0xffc, 4092); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000001010000 (0x50, 80)
rf_x02_sp = 32'b00000000000000000000111111110100 (0xff4, 4084)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000000000111111111100 (0xffc, 4092)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b0 (0x0, 0)
rf_x12_a2 = 32'b0 (0x0, 0)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001001010011001100011111110 (0x12998fe, 19503358)
instr_count = 32'b00000000011101110000101100011001 (0x770b19, 7801625)
pc = 32'b00000000000000000000000010011100 (0x9c, 156)
epoch = 1'b1 (0x1, 1)
>> g++-9	cuttlesim	rv32e-morse	real: 1.766	user: 1.766	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/morse.rv32 -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010011000 (0x98, 152); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010010100 (0x94, 148); .data = 32'b00000000100000010010001000100011 (0x812223, 8462883); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010011000 (0x98, 152); .ppc = 32'b00000000000000000000000010011100 (0x9c, 156); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010010100 (0x94, 148); .ppc = 32'b00000000000000000000000010011000 (0x98, 152); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000010010000 (0x90, 144); .ppc = 32'b00000000000000000000000010010100 (0x94, 148); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111111100000010000000100010011 (0xff810113, 4286644499); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000000000111111110100 (0xff4, 4084); .rval2 = 32'b00000000000000000000111111111100 (0xffc, 4092); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000001010000 (0x50, 80)
rf_x02_sp = 32'b00000000000000000000111111110100 (0xff4, 4084)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000000000111111111100 (0xffc, 4092)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b0 (0x0, 0)
rf_x12_a2 = 32'b0 (0x0, 0)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001001010011001100011111110 (0x12998fe, 19503358)
instr_count = 32'b00000000011101110000101100011001 (0x770b19, 7801625)
pc = 32'b00000000000000000000000010011100 (0x9c, 156)
epoch = 1'b1 (0x1, 1)
>> g++-9	cuttlesim	rv32e-morse	real: 1.840	user: 1.835	sys: 0.004
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/morse.rv32 -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010011000 (0x98, 152); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010010100 (0x94, 148); .data = 32'b00000000100000010010001000100011 (0x812223, 8462883); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010011000 (0x98, 152); .ppc = 32'b00000000000000000000000010011100 (0x9c, 156); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010010100 (0x94, 148); .ppc = 32'b00000000000000000000000010011000 (0x98, 152); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000010010000 (0x90, 144); .ppc = 32'b00000000000000000000000010010100 (0x94, 148); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111111100000010000000100010011 (0xff810113, 4286644499); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000000000111111110100 (0xff4, 4084); .rval2 = 32'b00000000000000000000111111111100 (0xffc, 4092); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000001010000 (0x50, 80)
rf_x02_sp = 32'b00000000000000000000111111110100 (0xff4, 4084)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000000000111111111100 (0xffc, 4092)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b0 (0x0, 0)
rf_x12_a2 = 32'b0 (0x0, 0)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001001010011001100011111110 (0x12998fe, 19503358)
instr_count = 32'b00000000011101110000101100011001 (0x770b19, 7801625)
pc = 32'b00000000000000000000000010011100 (0x9c, 156)
epoch = 1'b1 (0x1, 1)
>> g++-9	cuttlesim	rv32e-morse	real: 1.862	user: 1.858	sys: 0.004
+ for simulator in ${@:3}
+ bench_rv_1 g++-9 verilator rv32e morse
+ compiler=g++-9
+ simulator=verilator
+ design=rv32e
+ test=morse
++ realpath ../examples/rv/_objects/rv32e.v/
+ base=/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v
++ realpath ../examples/rv/tests/_build/rv32e/integ/
+ tests=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ
+ b='bench g++-9 verilator rv32e-morse'
+ make -C /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v clean
make: Entering directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v'
rm -rf obj_dir.opt
rm -rf obj_dir.trace
rm -f rvcore.verilator.vcd
rm -f rvcore.cuttlesim.opt
rm -f rvcore.cuttlesim.debug
rm -f rvcore.cuttlesim.perf
rm -f rvcore.cuttlesim.cov
rm -f rvcore.cuttlesim.s
rm -f rvcore.cuttlesim.out
rm -f rvcore.cuttlesim.vcd
rm -f rvcore.cuttlesim.perf.data
rm -f rvcore.cuttlesim.callgrind
rm -fr rvcore.cuttlesim.rr
rm -f *.gcov
rm -f top_ice40_usb.json
rm -f top_ice40_usb.json.log
rm -f top_ice40_usb.asc
rm -f top_ice40_usb.bin
rm -f top_ice40_usb.rpt
rm -f top_ice40_usb.json.v
make: Leaving directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v'
+ case $simulator in
+ make CXX=g++-9 -C /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v obj_dir.opt/Vtop
make: Entering directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v'
verilator +define+MEM_ADDRESS_WIDTH=10 +define+BRAM_RUNTIME_INIT+SIMULATION -CFLAGS -DVL_USER_FINISH -Wno-fatal -CFLAGS "-I /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v" --prefix Vtop --cc --exe  --Mdir obj_dir.opt --x-assign fast --x-initial fast --noassert -O3 -CFLAGS '-O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector ' -LDFLAGS '-O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector ' rvcore.verilator.cpp top.v
make -C obj_dir.opt -f Vtop.mk Vtop
make[1]: Entering directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/obj_dir.opt'
g++-9  -I.  -MMD -I/usr/local/share/verilator/include -I/usr/local/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=0 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow     -DVL_USER_FINISH -I /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector   -c -o rvcore.o ../rvcore.verilator.cpp
g++-9  -I.  -MMD -I/usr/local/share/verilator/include -I/usr/local/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=0 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow     -DVL_USER_FINISH -I /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector   -c -o verilated.o /usr/local/share/verilator/include/verilated.cpp
g++-9  -I.  -MMD -I/usr/local/share/verilator/include -I/usr/local/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=0 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow     -DVL_USER_FINISH -I /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector   -c -o verilated_dpi.o /usr/local/share/verilator/include/verilated_dpi.cpp
/usr/bin/perl /usr/local/share/verilator/bin/verilator_includer -DVL_INCLUDE_OPT=include Vtop.cpp Vtop_top.cpp Vtop_rv32.cpp > Vtop__ALLcls.cpp
g++-9  -I.  -MMD -I/usr/local/share/verilator/include -I/usr/local/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=0 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow     -DVL_USER_FINISH -I /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector   -c -o Vtop__ALLcls.o Vtop__ALLcls.cpp
/usr/bin/perl /usr/local/share/verilator/bin/verilator_includer -DVL_INCLUDE_OPT=include Vtop__Dpi.cpp Vtop__Syms.cpp > Vtop__ALLsup.cpp
g++-9  -I.  -MMD -I/usr/local/share/verilator/include -I/usr/local/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=0 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow     -DVL_USER_FINISH -I /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector   -c -o Vtop__ALLsup.o Vtop__ALLsup.cpp
ar -cr Vtop__ALL.a Vtop__ALLcls.o Vtop__ALLsup.o
ranlib Vtop__ALL.a
g++    rvcore.o verilated.o verilated_dpi.o Vtop__ALL.a   -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector  -o Vtop -lm -lstdc++ 
make[1]: Leaving directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/obj_dir.opt'
make: Leaving directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v'
+ bench g++-9 verilator rv32e-morse /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/morse.vmh -1
+ compiler=g++-9
+ simulator=verilator
+ input=rv32e-morse
+ export 'TIMEFORMAT=>> g++-9	verilator	rv32e-morse	real: %3R	user: %3U	sys: %3S'
+ TIMEFORMAT='>> g++-9	verilator	rv32e-morse	real: %3R	user: %3U	sys: %3S'
+ echo '<< verilator rv32e-morse'
<< verilator rv32e-morse
++ seq 1 10
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/morse.vmh -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
>> g++-9	verilator	rv32e-morse	real: 5.438	user: 5.436	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/morse.vmh -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
>> g++-9	verilator	rv32e-morse	real: 5.452	user: 5.451	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/morse.vmh -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
>> g++-9	verilator	rv32e-morse	real: 5.441	user: 5.441	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/morse.vmh -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
>> g++-9	verilator	rv32e-morse	real: 5.427	user: 5.425	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/morse.vmh -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
>> g++-9	verilator	rv32e-morse	real: 5.408	user: 5.408	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/morse.vmh -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
>> g++-9	verilator	rv32e-morse	real: 5.957	user: 5.947	sys: 0.004
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/morse.vmh -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
>> g++-9	verilator	rv32e-morse	real: 5.423	user: 5.422	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/morse.vmh -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
>> g++-9	verilator	rv32e-morse	real: 6.328	user: 6.328	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/morse.vmh -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
>> g++-9	verilator	rv32e-morse	real: 5.949	user: 5.934	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/morse.vmh -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
>> g++-9	verilator	rv32e-morse	real: 5.443	user: 5.443	sys: 0.000
+ for compiler in "clang++" "g++-9" "g++-10"
+ for simulator in ${@:3}
+ bench_rv_1 g++-10 cuttlesim rv32e morse
+ compiler=g++-10
+ simulator=cuttlesim
+ design=rv32e
+ test=morse
++ realpath ../examples/rv/_objects/rv32e.v/
+ base=/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v
++ realpath ../examples/rv/tests/_build/rv32e/integ/
+ tests=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ
+ b='bench g++-10 cuttlesim rv32e-morse'
+ make -C /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v clean
make: Entering directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v'
rm -rf obj_dir.opt
rm -rf obj_dir.trace
rm -f rvcore.verilator.vcd
rm -f rvcore.cuttlesim.opt
rm -f rvcore.cuttlesim.debug
rm -f rvcore.cuttlesim.perf
rm -f rvcore.cuttlesim.cov
rm -f rvcore.cuttlesim.s
rm -f rvcore.cuttlesim.out
rm -f rvcore.cuttlesim.vcd
rm -f rvcore.cuttlesim.perf.data
rm -f rvcore.cuttlesim.callgrind
rm -fr rvcore.cuttlesim.rr
rm -f *.gcov
rm -f top_ice40_usb.json
rm -f top_ice40_usb.json.log
rm -f top_ice40_usb.asc
rm -f top_ice40_usb.bin
rm -f top_ice40_usb.rpt
rm -f top_ice40_usb.json.v
make: Leaving directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v'
+ case $simulator in
+ make CXX=g++-10 -C /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v rvcore.cuttlesim.opt
make: Entering directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v'
g++-10 --std=c++17  -Wall -Wextra '-DSIM_VCD_SCOPES={"TOP", "top", "rv_core",}' -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector rvcore.cuttlesim.cpp -o "rvcore.cuttlesim.opt"
In file included from rv32.hpp:10,
                 from rvcore.cuttlesim.cpp:5:
cuttlesim.hpp:87:102: note: ‘#pragma message: Bignum truncation is broken in Boost < 1.68; if you run into issues, try upgrading.’
   87 | #pragma message("Bignum truncation is broken in Boost < 1.68; if you run into issues, try upgrading.")
      |                                                                                                      ^
make: Leaving directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v'
+ bench g++-10 cuttlesim rv32e-morse /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/morse.rv32 -1
+ compiler=g++-10
+ simulator=cuttlesim
+ input=rv32e-morse
+ export 'TIMEFORMAT=>> g++-10	cuttlesim	rv32e-morse	real: %3R	user: %3U	sys: %3S'
+ TIMEFORMAT='>> g++-10	cuttlesim	rv32e-morse	real: %3R	user: %3U	sys: %3S'
+ echo '<< cuttlesim rv32e-morse'
<< cuttlesim rv32e-morse
++ seq 1 10
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/morse.rv32 -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010011000 (0x98, 152); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010010100 (0x94, 148); .data = 32'b00000000100000010010001000100011 (0x812223, 8462883); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010011000 (0x98, 152); .ppc = 32'b00000000000000000000000010011100 (0x9c, 156); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010010100 (0x94, 148); .ppc = 32'b00000000000000000000000010011000 (0x98, 152); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000010010000 (0x90, 144); .ppc = 32'b00000000000000000000000010010100 (0x94, 148); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111111100000010000000100010011 (0xff810113, 4286644499); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000000000111111110100 (0xff4, 4084); .rval2 = 32'b00000000000000000000111111111100 (0xffc, 4092); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000001010000 (0x50, 80)
rf_x02_sp = 32'b00000000000000000000111111110100 (0xff4, 4084)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000000000111111111100 (0xffc, 4092)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b0 (0x0, 0)
rf_x12_a2 = 32'b0 (0x0, 0)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001001010011001100011111110 (0x12998fe, 19503358)
instr_count = 32'b00000000011101110000101100011001 (0x770b19, 7801625)
pc = 32'b00000000000000000000000010011100 (0x9c, 156)
epoch = 1'b1 (0x1, 1)
>> g++-10	cuttlesim	rv32e-morse	real: 1.905	user: 1.905	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/morse.rv32 -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010011000 (0x98, 152); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010010100 (0x94, 148); .data = 32'b00000000100000010010001000100011 (0x812223, 8462883); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010011000 (0x98, 152); .ppc = 32'b00000000000000000000000010011100 (0x9c, 156); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010010100 (0x94, 148); .ppc = 32'b00000000000000000000000010011000 (0x98, 152); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000010010000 (0x90, 144); .ppc = 32'b00000000000000000000000010010100 (0x94, 148); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111111100000010000000100010011 (0xff810113, 4286644499); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000000000111111110100 (0xff4, 4084); .rval2 = 32'b00000000000000000000111111111100 (0xffc, 4092); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000001010000 (0x50, 80)
rf_x02_sp = 32'b00000000000000000000111111110100 (0xff4, 4084)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000000000111111111100 (0xffc, 4092)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b0 (0x0, 0)
rf_x12_a2 = 32'b0 (0x0, 0)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001001010011001100011111110 (0x12998fe, 19503358)
instr_count = 32'b00000000011101110000101100011001 (0x770b19, 7801625)
pc = 32'b00000000000000000000000010011100 (0x9c, 156)
epoch = 1'b1 (0x1, 1)
>> g++-10	cuttlesim	rv32e-morse	real: 1.903	user: 1.887	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/morse.rv32 -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010011000 (0x98, 152); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010010100 (0x94, 148); .data = 32'b00000000100000010010001000100011 (0x812223, 8462883); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010011000 (0x98, 152); .ppc = 32'b00000000000000000000000010011100 (0x9c, 156); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010010100 (0x94, 148); .ppc = 32'b00000000000000000000000010011000 (0x98, 152); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000010010000 (0x90, 144); .ppc = 32'b00000000000000000000000010010100 (0x94, 148); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111111100000010000000100010011 (0xff810113, 4286644499); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000000000111111110100 (0xff4, 4084); .rval2 = 32'b00000000000000000000111111111100 (0xffc, 4092); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000001010000 (0x50, 80)
rf_x02_sp = 32'b00000000000000000000111111110100 (0xff4, 4084)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000000000111111111100 (0xffc, 4092)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b0 (0x0, 0)
rf_x12_a2 = 32'b0 (0x0, 0)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001001010011001100011111110 (0x12998fe, 19503358)
instr_count = 32'b00000000011101110000101100011001 (0x770b19, 7801625)
pc = 32'b00000000000000000000000010011100 (0x9c, 156)
epoch = 1'b1 (0x1, 1)
>> g++-10	cuttlesim	rv32e-morse	real: 1.956	user: 1.952	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/morse.rv32 -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010011000 (0x98, 152); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010010100 (0x94, 148); .data = 32'b00000000100000010010001000100011 (0x812223, 8462883); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010011000 (0x98, 152); .ppc = 32'b00000000000000000000000010011100 (0x9c, 156); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010010100 (0x94, 148); .ppc = 32'b00000000000000000000000010011000 (0x98, 152); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000010010000 (0x90, 144); .ppc = 32'b00000000000000000000000010010100 (0x94, 148); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111111100000010000000100010011 (0xff810113, 4286644499); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000000000111111110100 (0xff4, 4084); .rval2 = 32'b00000000000000000000111111111100 (0xffc, 4092); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000001010000 (0x50, 80)
rf_x02_sp = 32'b00000000000000000000111111110100 (0xff4, 4084)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000000000111111111100 (0xffc, 4092)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b0 (0x0, 0)
rf_x12_a2 = 32'b0 (0x0, 0)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001001010011001100011111110 (0x12998fe, 19503358)
instr_count = 32'b00000000011101110000101100011001 (0x770b19, 7801625)
pc = 32'b00000000000000000000000010011100 (0x9c, 156)
epoch = 1'b1 (0x1, 1)
>> g++-10	cuttlesim	rv32e-morse	real: 2.440	user: 2.431	sys: 0.008
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/morse.rv32 -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010011000 (0x98, 152); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010010100 (0x94, 148); .data = 32'b00000000100000010010001000100011 (0x812223, 8462883); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010011000 (0x98, 152); .ppc = 32'b00000000000000000000000010011100 (0x9c, 156); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010010100 (0x94, 148); .ppc = 32'b00000000000000000000000010011000 (0x98, 152); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000010010000 (0x90, 144); .ppc = 32'b00000000000000000000000010010100 (0x94, 148); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111111100000010000000100010011 (0xff810113, 4286644499); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000000000111111110100 (0xff4, 4084); .rval2 = 32'b00000000000000000000111111111100 (0xffc, 4092); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000001010000 (0x50, 80)
rf_x02_sp = 32'b00000000000000000000111111110100 (0xff4, 4084)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000000000111111111100 (0xffc, 4092)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b0 (0x0, 0)
rf_x12_a2 = 32'b0 (0x0, 0)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001001010011001100011111110 (0x12998fe, 19503358)
instr_count = 32'b00000000011101110000101100011001 (0x770b19, 7801625)
pc = 32'b00000000000000000000000010011100 (0x9c, 156)
epoch = 1'b1 (0x1, 1)
>> g++-10	cuttlesim	rv32e-morse	real: 1.912	user: 1.912	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/morse.rv32 -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010011000 (0x98, 152); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010010100 (0x94, 148); .data = 32'b00000000100000010010001000100011 (0x812223, 8462883); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010011000 (0x98, 152); .ppc = 32'b00000000000000000000000010011100 (0x9c, 156); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010010100 (0x94, 148); .ppc = 32'b00000000000000000000000010011000 (0x98, 152); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000010010000 (0x90, 144); .ppc = 32'b00000000000000000000000010010100 (0x94, 148); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111111100000010000000100010011 (0xff810113, 4286644499); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000000000111111110100 (0xff4, 4084); .rval2 = 32'b00000000000000000000111111111100 (0xffc, 4092); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000001010000 (0x50, 80)
rf_x02_sp = 32'b00000000000000000000111111110100 (0xff4, 4084)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000000000111111111100 (0xffc, 4092)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b0 (0x0, 0)
rf_x12_a2 = 32'b0 (0x0, 0)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001001010011001100011111110 (0x12998fe, 19503358)
instr_count = 32'b00000000011101110000101100011001 (0x770b19, 7801625)
pc = 32'b00000000000000000000000010011100 (0x9c, 156)
epoch = 1'b1 (0x1, 1)
>> g++-10	cuttlesim	rv32e-morse	real: 1.836	user: 1.832	sys: 0.004
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/morse.rv32 -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010011000 (0x98, 152); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010010100 (0x94, 148); .data = 32'b00000000100000010010001000100011 (0x812223, 8462883); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010011000 (0x98, 152); .ppc = 32'b00000000000000000000000010011100 (0x9c, 156); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010010100 (0x94, 148); .ppc = 32'b00000000000000000000000010011000 (0x98, 152); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000010010000 (0x90, 144); .ppc = 32'b00000000000000000000000010010100 (0x94, 148); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111111100000010000000100010011 (0xff810113, 4286644499); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000000000111111110100 (0xff4, 4084); .rval2 = 32'b00000000000000000000111111111100 (0xffc, 4092); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000001010000 (0x50, 80)
rf_x02_sp = 32'b00000000000000000000111111110100 (0xff4, 4084)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000000000111111111100 (0xffc, 4092)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b0 (0x0, 0)
rf_x12_a2 = 32'b0 (0x0, 0)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001001010011001100011111110 (0x12998fe, 19503358)
instr_count = 32'b00000000011101110000101100011001 (0x770b19, 7801625)
pc = 32'b00000000000000000000000010011100 (0x9c, 156)
epoch = 1'b1 (0x1, 1)
>> g++-10	cuttlesim	rv32e-morse	real: 1.891	user: 1.851	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/morse.rv32 -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010011000 (0x98, 152); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010010100 (0x94, 148); .data = 32'b00000000100000010010001000100011 (0x812223, 8462883); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010011000 (0x98, 152); .ppc = 32'b00000000000000000000000010011100 (0x9c, 156); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010010100 (0x94, 148); .ppc = 32'b00000000000000000000000010011000 (0x98, 152); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000010010000 (0x90, 144); .ppc = 32'b00000000000000000000000010010100 (0x94, 148); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111111100000010000000100010011 (0xff810113, 4286644499); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000000000111111110100 (0xff4, 4084); .rval2 = 32'b00000000000000000000111111111100 (0xffc, 4092); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000001010000 (0x50, 80)
rf_x02_sp = 32'b00000000000000000000111111110100 (0xff4, 4084)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000000000111111111100 (0xffc, 4092)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b0 (0x0, 0)
rf_x12_a2 = 32'b0 (0x0, 0)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001001010011001100011111110 (0x12998fe, 19503358)
instr_count = 32'b00000000011101110000101100011001 (0x770b19, 7801625)
pc = 32'b00000000000000000000000010011100 (0x9c, 156)
epoch = 1'b1 (0x1, 1)
>> g++-10	cuttlesim	rv32e-morse	real: 1.869	user: 1.856	sys: 0.004
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/morse.rv32 -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010011000 (0x98, 152); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010010100 (0x94, 148); .data = 32'b00000000100000010010001000100011 (0x812223, 8462883); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010011000 (0x98, 152); .ppc = 32'b00000000000000000000000010011100 (0x9c, 156); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010010100 (0x94, 148); .ppc = 32'b00000000000000000000000010011000 (0x98, 152); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000010010000 (0x90, 144); .ppc = 32'b00000000000000000000000010010100 (0x94, 148); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111111100000010000000100010011 (0xff810113, 4286644499); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000000000111111110100 (0xff4, 4084); .rval2 = 32'b00000000000000000000111111111100 (0xffc, 4092); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000001010000 (0x50, 80)
rf_x02_sp = 32'b00000000000000000000111111110100 (0xff4, 4084)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000000000111111111100 (0xffc, 4092)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b0 (0x0, 0)
rf_x12_a2 = 32'b0 (0x0, 0)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001001010011001100011111110 (0x12998fe, 19503358)
instr_count = 32'b00000000011101110000101100011001 (0x770b19, 7801625)
pc = 32'b00000000000000000000000010011100 (0x9c, 156)
epoch = 1'b1 (0x1, 1)
>> g++-10	cuttlesim	rv32e-morse	real: 1.911	user: 1.877	sys: 0.008
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/rvcore.cuttlesim.opt /home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/morse.rv32 -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
toIMem_data0 = mem_req { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010011000 (0x98, 152); .data = 32'b0 (0x0, 0); }
toIMem_valid0 = 1'b0 (0x0, 0)
fromIMem_data0 = mem_resp { .byte_en = 4'b0 (0x0, 0); .addr = 32'b00000000000000000000000010010100 (0x94, 148); .data = 32'b00000000100000010010001000100011 (0x812223, 8462883); }
fromIMem_valid0 = 1'b1 (0x1, 1)
toDMem_data0 = mem_req { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
toDMem_valid0 = 1'b0 (0x0, 0)
fromDMem_data0 = mem_resp { .byte_en = 4'b1111 (0xf, 15); .addr = 32'b01000000000000000001000000000000 (0x40001000, 1073745920); .data = 32'b0 (0x0, 0); }
fromDMem_valid0 = 1'b1 (0x1, 1)
f2d_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010011000 (0x98, 152); .ppc = 32'b00000000000000000000000010011100 (0x9c, 156); .epoch = 1'b1 (0x1, 1); }
f2d_valid0 = 1'b1 (0x1, 1)
f2dprim_data0 = fetch_bookkeeping { .pc = 32'b00000000000000000000000010010100 (0x94, 148); .ppc = 32'b00000000000000000000000010011000 (0x98, 152); .epoch = 1'b1 (0x1, 1); }
f2dprim_valid0 = 1'b1 (0x1, 1)
d2e_data0 = decode_bookkeeping { .pc = 32'b00000000000000000000000010010000 (0x90, 144); .ppc = 32'b00000000000000000000000010010100 (0x94, 148); .epoch = 1'b1 (0x1, 1); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b0 (0x0, 0); .valid_rd = 1'b1 (0x1, 1); .legal = 1'b1 (0x1, 1); .inst = 32'b11111111100000010000000100010011 (0xff810113, 4286644499); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmI; }; }; .rval1 = 32'b00000000000000000000111111110100 (0xff4, 4084); .rval2 = 32'b00000000000000000000111111111100 (0xffc, 4092); }
d2e_valid0 = 1'b1 (0x1, 1)
e2w_data0 = execute_bookkeeping { .isUnsigned = 1'b0 (0x0, 0); .size = 2'b10 (0x2, 2); .offset = 2'b0 (0x0, 0); .newrd = 32'b0 (0x0, 0); .dInst = decodedInst { .valid_rs1 = 1'b1 (0x1, 1); .valid_rs2 = 1'b1 (0x1, 1); .valid_rd = 1'b0 (0x0, 0); .legal = 1'b1 (0x1, 1); .inst = 32'b00000000111001111010000000100011 (0xe7a023, 15179811); .immediateType = maybe_immType { .valid = 1'b1 (0x1, 1); .data = immType::ImmS; }; }; }
e2w_valid0 = 1'b1 (0x1, 1)
rf_x00_zero = 32'b0 (0x0, 0)
rf_x01_ra = 32'b00000000000000000000000001010000 (0x50, 80)
rf_x02_sp = 32'b00000000000000000000111111110100 (0xff4, 4084)
rf_x03_gp = 32'b0 (0x0, 0)
rf_x04_tp = 32'b0 (0x0, 0)
rf_x05_t0 = 32'b0 (0x0, 0)
rf_x06_t1 = 32'b0 (0x0, 0)
rf_x07_t2 = 32'b0 (0x0, 0)
rf_x08_s0_fp = 32'b00000000000000000000111111111100 (0xffc, 4092)
rf_x09_s1 = 32'b0 (0x0, 0)
rf_x10_a0 = 32'b0 (0x0, 0)
rf_x11_a1 = 32'b0 (0x0, 0)
rf_x12_a2 = 32'b0 (0x0, 0)
rf_x13_a3 = 32'b0 (0x0, 0)
rf_x14_a4 = 32'b0 (0x0, 0)
rf_x15_a5 = 32'b01000000000000000001000000000000 (0x40001000, 1073745920)
scoreboard_x00_zero = 2'b0 (0x0, 0)
scoreboard_x01_ra = 2'b0 (0x0, 0)
scoreboard_x02_sp = 2'b01 (0x1, 1)
scoreboard_x03_gp = 2'b0 (0x0, 0)
scoreboard_x04_tp = 2'b0 (0x0, 0)
scoreboard_x05_t0 = 2'b0 (0x0, 0)
scoreboard_x06_t1 = 2'b0 (0x0, 0)
scoreboard_x07_t2 = 2'b0 (0x0, 0)
scoreboard_x08_s0_fp = 2'b0 (0x0, 0)
scoreboard_x09_s1 = 2'b0 (0x0, 0)
scoreboard_x10_a0 = 2'b0 (0x0, 0)
scoreboard_x11_a1 = 2'b0 (0x0, 0)
scoreboard_x12_a2 = 2'b0 (0x0, 0)
scoreboard_x13_a3 = 2'b0 (0x0, 0)
scoreboard_x14_a4 = 2'b0 (0x0, 0)
scoreboard_x15_a5 = 2'b0 (0x0, 0)
cycle_count = 32'b00000001001010011001100011111110 (0x12998fe, 19503358)
instr_count = 32'b00000000011101110000101100011001 (0x770b19, 7801625)
pc = 32'b00000000000000000000000010011100 (0x9c, 156)
epoch = 1'b1 (0x1, 1)
>> g++-10	cuttlesim	rv32e-morse	real: 1.924	user: 1.918	sys: 0.004
+ for simulator in ${@:3}
+ bench_rv_1 g++-10 verilator rv32e morse
+ compiler=g++-10
+ simulator=verilator
+ design=rv32e
+ test=morse
++ realpath ../examples/rv/_objects/rv32e.v/
+ base=/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v
++ realpath ../examples/rv/tests/_build/rv32e/integ/
+ tests=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ
+ b='bench g++-10 verilator rv32e-morse'
+ make -C /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v clean
make: Entering directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v'
rm -rf obj_dir.opt
rm -rf obj_dir.trace
rm -f rvcore.verilator.vcd
rm -f rvcore.cuttlesim.opt
rm -f rvcore.cuttlesim.debug
rm -f rvcore.cuttlesim.perf
rm -f rvcore.cuttlesim.cov
rm -f rvcore.cuttlesim.s
rm -f rvcore.cuttlesim.out
rm -f rvcore.cuttlesim.vcd
rm -f rvcore.cuttlesim.perf.data
rm -f rvcore.cuttlesim.callgrind
rm -fr rvcore.cuttlesim.rr
rm -f *.gcov
rm -f top_ice40_usb.json
rm -f top_ice40_usb.json.log
rm -f top_ice40_usb.asc
rm -f top_ice40_usb.bin
rm -f top_ice40_usb.rpt
rm -f top_ice40_usb.json.v
make: Leaving directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v'
+ case $simulator in
+ make CXX=g++-10 -C /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v obj_dir.opt/Vtop
make: Entering directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v'
verilator +define+MEM_ADDRESS_WIDTH=10 +define+BRAM_RUNTIME_INIT+SIMULATION -CFLAGS -DVL_USER_FINISH -Wno-fatal -CFLAGS "-I /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v" --prefix Vtop --cc --exe  --Mdir obj_dir.opt --x-assign fast --x-initial fast --noassert -O3 -CFLAGS '-O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector ' -LDFLAGS '-O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector ' rvcore.verilator.cpp top.v
make -C obj_dir.opt -f Vtop.mk Vtop
make[1]: Entering directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/obj_dir.opt'
g++-10  -I.  -MMD -I/usr/local/share/verilator/include -I/usr/local/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=0 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow     -DVL_USER_FINISH -I /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector   -c -o rvcore.o ../rvcore.verilator.cpp
g++-10  -I.  -MMD -I/usr/local/share/verilator/include -I/usr/local/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=0 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow     -DVL_USER_FINISH -I /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector   -c -o verilated.o /usr/local/share/verilator/include/verilated.cpp
g++-10  -I.  -MMD -I/usr/local/share/verilator/include -I/usr/local/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=0 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow     -DVL_USER_FINISH -I /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector   -c -o verilated_dpi.o /usr/local/share/verilator/include/verilated_dpi.cpp
/usr/bin/perl /usr/local/share/verilator/bin/verilator_includer -DVL_INCLUDE_OPT=include Vtop.cpp Vtop_top.cpp Vtop_rv32.cpp > Vtop__ALLcls.cpp
g++-10  -I.  -MMD -I/usr/local/share/verilator/include -I/usr/local/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=0 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow     -DVL_USER_FINISH -I /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector   -c -o Vtop__ALLcls.o Vtop__ALLcls.cpp
/usr/bin/perl /usr/local/share/verilator/bin/verilator_includer -DVL_INCLUDE_OPT=include Vtop__Dpi.cpp Vtop__Syms.cpp > Vtop__ALLsup.cpp
g++-10  -I.  -MMD -I/usr/local/share/verilator/include -I/usr/local/share/verilator/include/vltstd -DVM_COVERAGE=0 -DVM_SC=0 -DVM_TRACE=0 -faligned-new -fcf-protection=none -Wno-bool-operation -Wno-sign-compare -Wno-uninitialized -Wno-unused-but-set-variable -Wno-unused-parameter -Wno-unused-variable -Wno-shadow     -DVL_USER_FINISH -I /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector   -c -o Vtop__ALLsup.o Vtop__ALLsup.cpp
ar -cr Vtop__ALL.a Vtop__ALLcls.o Vtop__ALLsup.o
ranlib Vtop__ALL.a
g++    rvcore.o verilated.o verilated_dpi.o Vtop__ALL.a   -O3 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0 -fno-stack-protector  -o Vtop -lm -lstdc++ 
make[1]: Leaving directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/obj_dir.opt'
make: Leaving directory '/home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v'
+ bench g++-10 verilator rv32e-morse /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/morse.vmh -1
+ compiler=g++-10
+ simulator=verilator
+ input=rv32e-morse
+ export 'TIMEFORMAT=>> g++-10	verilator	rv32e-morse	real: %3R	user: %3U	sys: %3S'
+ TIMEFORMAT='>> g++-10	verilator	rv32e-morse	real: %3R	user: %3U	sys: %3S'
+ echo '<< verilator rv32e-morse'
<< verilator rv32e-morse
++ seq 1 10
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/morse.vmh -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
>> g++-10	verilator	rv32e-morse	real: 5.581	user: 5.577	sys: 0.004
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/morse.vmh -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
>> g++-10	verilator	rv32e-morse	real: 5.433	user: 5.433	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/morse.vmh -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
>> g++-10	verilator	rv32e-morse	real: 5.390	user: 5.390	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/morse.vmh -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
>> g++-10	verilator	rv32e-morse	real: 6.240	user: 6.236	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/morse.vmh -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
>> g++-10	verilator	rv32e-morse	real: 5.752	user: 5.746	sys: 0.004
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/morse.vmh -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
>> g++-10	verilator	rv32e-morse	real: 6.043	user: 6.032	sys: 0.004
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/morse.vmh -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
>> g++-10	verilator	rv32e-morse	real: 5.598	user: 5.597	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/morse.vmh -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
>> g++-10	verilator	rv32e-morse	real: 6.056	user: 6.046	sys: 0.004
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/morse.vmh -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
>> g++-10	verilator	rv32e-morse	real: 5.606	user: 5.606	sys: 0.000
+ for _ in $(seq 1 $REPEAT)
+ /home/clement/documents/mit/plv/koika/examples/rv/_objects/rv32e.v/obj_dir.opt/Vtop +VMH=/home/clement/documents/mit/plv/koika/examples/rv/tests/_build/rv32e/integ/morse.vmh -1
☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣🌣🌣☀🌣☀🌣☀🌣🌣🌣☀🌣☀🌣
  PASS
>> g++-10	verilator	rv32e-morse	real: 5.537	user: 5.526	sys: 0.004

Comint finished at Wed Aug 19 18:04:52
